<root>
<function name="clutter_value_get_unit">
<description>
Gets the #ClutterUnit&amp;lt;!-- --&amp;gt;s contained in @value.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue initialized to #CLUTTER_TYPE_UNIT
</parameter_description>
</parameter>
</parameters>
<return> the units inside the passed #GValue

Since: 0.8
</return>
</function>

<function name="CLUTTER_ACTOR_IS_REALIZED">
<description>
Evaluates to %TRUE if the %CLUTTER_ACTOR_REALIZED flag is set.

Since: 0.2

</description>
<parameters>
<parameter name="e">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_get">
<description>
Pops an event off the event queue. Applications should not need to call 
this.


</description>
<parameters>
</parameters>
<return> A #ClutterEvent or NULL if queue empty

Since: 0.4
</return>
</function>

<function name="clutter_score_append">
<description>
Appends a timeline to another one existing in the score; the newly
appended timeline will be started when @parent is complete.

If @parent is %NULL, the new #ClutterTimeline will be started when
clutter_score_start() is called.

#ClutterScore will take a reference on @timeline.


</description>
<parameters>
<parameter name="score">
<parameter_description> a #ClutterScore
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> a #ClutterTimeline in the score, or %NULL
</parameter_description>
</parameter>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> the id of the #ClutterTimeline inside the score, or
0 on failure. The returned id can be used with clutter_score_remove()
or clutter_score_get_timeline().

Since: 0.6
</return>
</function>

<function name="ClutterModelIter">
<description>
The row number to which this iter points to.

Since: 0.6

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_shader">
<description>
Queries the currently set #ClutterShader on @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> The currently set #ClutterShader or %NULL if no
shader is set.

Since: 0.6
</return>
</function>

<function name="json_array_get_element">
<description>
Retrieves the #JsonNode containing the value of the element at @index_
inside a #JsonArray.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the element to retrieve
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the #JsonNode at the requested index
</return>
</function>

<function name="clutter_label_get_alignment">
<description>
Return value: The label&apos;s #PangoAlignment

</description>
<parameters>
<parameter name="label">
<parameter_description> a #ClutterLabel
</parameter_description>
</parameter>
</parameters>
<return> The label&apos;s #PangoAlignment

Since 0.2
</return>
</function>

<function name="clutter_actor_raise">
<description>
Puts @self above @below.

Both actors must have the same parent.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="below">
<parameter_description> A #ClutterActor to raise above.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_remove_marker">
<description>
Removes @marker_name, if found, from @timeline.

Since: 0.8

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="marker_name">
<parameter_description> the name of the marker to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="CLUTTER_ALPHA_RAMP">
<description>
Convenience symbol for clutter_ramp_func().

Since: 0.2

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_get_current_frame">
<description>
Request the current frame number of the timeline.


</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> current frame number
</return>
</function>

<function name="json_parser_load_from_data">
<description>
Loads a JSON stream from a buffer and parses it. You can call this function
multiple times with the same #JsonParser object, but the contents of the
parser will be destroyed each time.


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #JsonParser
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the buffer to parse
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of the buffer, or -1
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the buffer was succesfully parser. In case
of error, @error is set accordingly and %FALSE is returned
</return>
</function>

<function name="clutter_clone_texture_set_parent_texture">
<description>
Sets the parent texture cloned by the #ClutterCloneTexture.

Since: 0.2

</description>
<parameters>
<parameter name="clone">
<parameter_description> a #ClutterCloneTexture
</parameter_description>
</parameter>
<parameter name="texture">
<parameter_description> a #ClutterTexture or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_get_use_fog">
<description>
Gets whether the depth cueing effect is enabled on @stage.


</description>
<parameters>
<parameter name="stage">
<parameter_description> the #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the the depth cueing effect is enabled

Since: 0.6
</return>
</function>

<function name="clutter_stage_get_fogx">
<description>
Retrieves the current depth cueing settings from the stage. This is the
fixed point version of clutter_stage_get_fog().

Since: 0.6

</description>
<parameters>
<parameter name="stage">
<parameter_description> the #ClutterStage
</parameter_description>
</parameter>
<parameter name="fog">
<parameter_description> return location for a #ClutterFog structure
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_ellipse_get_direction">
<description>
Retrieves the #ClutterRotateDirection used by the ellipse behaviour.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
</parameters>
<return> the rotation direction

Since: 0.4
</return>
</function>

<function name="clutter_alpha_set_timeline">
<description>
Binds @alpha to @timeline.

Since: 0.2

</description>
<parameters>
<parameter name="alpha">
<parameter_description> A #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_label_set_justify">
<description>
Sets whether the text of the @label actor should be justified
on both margins. This setting is ignored if Clutter is compiled
against Pango &amp;lt; 1.18.

Since: 0.6

</description>
<parameters>
<parameter name="label">
<parameter_description> a #ClutterLabel
</parameter_description>
</parameter>
<parameter name="justify">
<parameter_description> whether the text should be justified
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_value_set_fixed">
<description>
Sets @value to @fixed_.

Since: 0.8

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue initialized to #CLUTTER_TYPE_FIXED
</parameter_description>
</parameter>
<parameter name="fixed_">
<parameter_description> the fixed point value to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_entry_get_visibility">
<description>
Return value: %TRUE if the contents of the entry are displayed as plaintext.

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the contents of the entry are displayed as plaintext.

Since: 0.4
</return>
</function>

<function name="clutter_actor_set_clipu">
<description>
Unit-based variant of clutter_actor_set_clip()

Sets clip area for @self. The clip area is always computed from the
upper left corner of the actor, even if the anchor point is set
otherwise.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="xoff">
<parameter_description> X offset of the clip rectangle, in #ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
<parameter name="yoff">
<parameter_description> Y offset of the clip rectangle, in #ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of the clip rectangle, in #ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of the clip rectangle, in #ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_container_child_get_property">
<description>
Gets a container specific property of a child of @container, In general,
a copy is made of the property contents and the caller is responsible for
freeing the memory by calling g_value_unset().

Note that clutter_container_child_set_property() is really intended for
language bindings, clutter_container_child_set() is much more convenient
for C programming.

Since: 0.8

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #ClutterActor that is a child of @container.
</parameter_description>
</parameter>
<parameter name="property">
<parameter_description> the name of the property to set.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_key_focus">
<description>
Sets the key focus on @actor. An actor with key focus will receive
all the key events. If @actor is %NULL, the stage will receive
focus.

Since: 0.6

</description>
<parameters>
<parameter name="stage">
<parameter_description> the #ClutterStage
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the actor to set key focus to, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_get_keyboard_grab">
<description>
Queries the current keyboard grab of clutter.


</description>
<parameters>
</parameters>
<return> the actor currently holding the keyboard grab, or NULL if there is no grab.

Since: 0.6
</return>
</function>

<function name="clutter_timeout_pool_new">
<description>
Creates a new timeout pool source. A timeout pool should be used when
multiple timeout functions, running at the same priority, are needed and
the g_timeout_add() API might lead to starvation of the time slice of
the main loop. A timeout pool allocates a single time slice of the main
loop and runs every timeout function inside it. The timeout pool is
always sorted, so that the extraction of the next timeout function is
a constant time operation.

Inside Clutter, every #ClutterTimeline share the same timeout pool, unless
the CLUTTER_TIMELINE=no-pool environment variable is set.


</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the timeout pool. Typically this will
be #G_PRIORITY_DEFAULT
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterTimeoutPool

Since: 0.4
</return>
</function>

<function name="clutter_texture_set_filter_quality">
<description>
Sets the filter quality when scaling a texture. The quality is an
enumeration currently the following values are supported:
CLUTTER_TEXTURE_QUALITY_LOW which is fast but only uses nearest neighbour
interpolation. CLUTTER_TEXTURE_QUALITY_MEDIUM which is computationally a bit
more expensive (bilinear interpolation), and CLUTTER_TEXTURE_QUALITY_HIGH
which uses extra texture memory resources to improve scaled down rendering
as well (it uses mipmaps). The default value is
CLUTTER_TEXTURE_QUALITY_MEDIUM.

Since: 0.8

</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterTexture
</parameter_description>
</parameter>
<parameter name="filter_quality">
<parameter_description> New filter quality value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_exp_dec_func">
<description>
Convenience alpha function for a decreasing 2^x curve. You can use this
function as the alpha function for clutter_alpha_set_func().


</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="dummy">
<parameter_description> unused argument
</parameter_description>
</parameter>
</parameters>
<return> an alpha value.

Since: 0.4
</return>
</function>

<function name="CLUTTER_ALPHA_SINE_HALF">
<description>
Convenience symbol for clutter_sine_half_func().

Since: 0.4

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_alpha_new">
<description>
Creates a new #ClutterAlpha instance.  You must set a function
to compute the alpha value using clutter_alpha_set_func() and
bind a #ClutterTimeline object to the #ClutterAlpha instance
using clutter_alpha_set_timeline().

You should use the newly created #ClutterAlpha instance inside
a #ClutterBehaviour object.


</description>
<parameters>
</parameters>
<return> the newly created empty #ClutterAlpha instance.

Since: 0.2
</return>
</function>

<function name="clutter_effect_template_new_full">
<description>
Creates a new #ClutterEffectTemplate, to be used with the effects API.

A #ClutterEffectTemplate binds a timeline and an alpha function and can
be used as a template for multiple calls of clutter_effect_fade(),
clutter_effect_move() and clutter_effect_scale().

This API is intended for simple animations involving a single actor;
for more complex animations, you should see #ClutterBehaviour and the
derived classes.

This function is intended for language bindings only: if @notify is
not %NULL it will be called to dispose of @user_data.


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="alpha_func">
<parameter_description> an alpha function to use for the template
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to be passed to the alpha function, or %NULL
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to be called when disposing the alpha function&apos;s use
data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterEffectTemplate object

Since: 0.4
</return>
</function>

<function name="clutter_actor_set_scale">
<description>
Scales an actor with the given factors. The scaling is always
relative to the anchor point.

Since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="scale_x">
<parameter_description> double factor to scale actor by horizontally.
</parameter_description>
</parameter>
<parameter name="scale_y">
<parameter_description> double factor to scale actor by vertically.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_add_filter">
<description>
Adds an event filter function.

Since: 0.6

</description>
<parameters>
<parameter name="func">
<parameter_description> a filter function
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to be passed to the filter function, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_take_object">
<description>
Sets @object inside @node. The reference count of @object is not increased.

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_group_get_children">
<description>
Get a list containing all actors contained in the group.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterGroup
</parameter_description>
</parameter>
</parameters>
<return> A list of #ClutterActors. You  should free the returned
list using g_list_free() when finished using it.

@Deprecated: 0.4: This function is obsolete, use
clutter_container_get_children() instead.
</return>
</function>

<function name="clutter_scriptable_get_id">
<description>
Retrieves the id of @scriptable set using clutter_scriptable_set_id().


</description>
<parameters>
<parameter name="scriptable">
<parameter_description> a #ClutterScriptable
</parameter_description>
</parameter>
</parameters>
<return> the id of the object. The returned string is owned by
the scriptable object and should never be modified of freed

Since: 0.6
</return>
</function>

<function name="clutter_behaviour_remove_all">
<description>
Removes every actor from the list that @behave holds.

Since: 0.4

</description>
<parameters>
<parameter name="behave">
<parameter_description> a #ClutterBehaviour
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_from_hlsx">
<description>
Converts a color expressed in HLS (hue, luminance and saturation)
values into a #ClutterColor.

</description>
<parameters>
<parameter name="dest">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
<parameter name="hue">
<parameter_description> hue value (0 .. 360)
</parameter_description>
</parameter>
<parameter name="luminance">
<parameter_description> luminance value (0 .. 1)
</parameter_description>
</parameter>
<parameter name="saturation">
<parameter_description> saturation value (0 .. 1)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_peek">
<description>
Return value: A #ClutterEvent or NULL if queue empty.

</description>
<parameters>
</parameters>
<return> A #ClutterEvent or NULL if queue empty.

Since: 0.4
</return>
</function>

<function name="clutter_shader_get_fragment_source">
<description>
Query the current GLSL fragment source set on @shader.


</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader
</parameter_description>
</parameter>
</parameters>
<return> the source of the fragment shader for this
ClutterShader object or %NULL. The returned string is owned by the
shader object and should never be modified or freed

Since: 0.6
</return>
</function>

<function name="clutter_actor_hide">
<description>
Flags an actor to be hidden. A hidden actor will not be
rendered on the stage.

Actors are visible by default.

If this function is called on an actor without a parent, the
#ClutterActor:show-on-set-parent property will be set to %FALSE
as a side-effect.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_allocation_vertices">
<description>
Calculates the transformed coordinates of the four corners of the
actor in the plane of @ancestor. The returned vertices relate to
the #ClutterActorBox coordinates as follows:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;v[0] contains (x1, y1)&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;v[1] contains (x2, y1)&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;v[2] contains (x1, y2)&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;v[3] contains (x2, y2)&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;

If @ancestor is %NULL the ancestor will be the #ClutterStage. In
this case, the coordinates returned will be the coordinates on
the stage before the projection is applied. This is different from
the behaviour of clutter_actor_get_abs_allocation_vertices().

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="ancestor">
<parameter_description> A #ClutterActor to calculate the vertices against, or %NULL
to use the default #ClutterStage
</parameter_description>
</parameter>
<parameter name="verts">
<parameter_description> return location for an array of 4 #ClutterVertex in which
to store the result.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_set_motion_events_enabled">
<description>
Sets whether per-actor motion events should be enabled or not (the
default is to enable them).

If @enable is %FALSE the following events will not work:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;ClutterActor::motion-event, unless on the
#ClutterStage&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;ClutterActor::enter-event&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;ClutterActor::leave-event&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;

Since: 0.6

</description>
<parameters>
<parameter name="enable">
<parameter_description> %TRUE to enable per-actor motion events
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="ClutterLabel">
<description>
Whether the contents of the label should be justified on both
margins.

Since: 0.6

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_model_get_column_type">
<description>
Retrieves the type of the @column.


</description>
<parameters>
<parameter name="model">
<parameter_description> #ClutterModel
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> the column number
</parameter_description>
</parameter>
</parameters>
<return> the type of the column.

Since: 0.6
</return>
</function>

<function name="clutter_stage_set_user_resizable">
<description>
Sets if the stage is resizable by user interaction (e.g. via
window manager controls)

Since: 0.4

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="resizable">
<parameter_description> whether the stage should be user resizable.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_parser_get_current_pos">
<description>
Retrieves the current position inside the current line, starting
from 0.


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #JsonParser
</parameter_description>
</parameter>
</parameters>
<return> the position in the current line
</return>
</function>

<function name="clutter_actor_set_heightu">
<description>
Forces a height request on an actor, causing the actor&apos;s
normal width and height (if any) to be ignored. This function
sets both the minimum and natural size request of the actor.

since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Requested new height for the actor, in #ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_effect_template_set_timeline_clone">
<description>
Sets if effects using this template should make a copy of the
templates timeline (default) or reference the effects timeline.

Since: 0.6

</description>
<parameters>
<parameter name="template_">
<parameter_description>  A #ClutterEffectTemplate
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> A boolean indicating if effects should clone the timeline.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_path_new">
<description>
Creates a new path behaviour. You can use this behaviour to drive
actors along the nodes of a path, described by the @knots.


</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha, or %NULL
</parameter_description>
</parameter>
<parameter name="knots">
<parameter_description> a list of #ClutterKnots, or %NULL for an empty path
</parameter_description>
</parameter>
<parameter name="n_knots">
<parameter_description> the number of nodes in the path
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterBehaviour

Since: 0.2
</return>
</function>

<function name="json_node_set_int">
<description>
Sets @value as the integer content of the @node, replacing any existing
content.

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode of type %JSON_NODE_VALUE
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> an integer value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_depth_get_bounds">
<description>
Gets the boundaries of the @behaviour

Since: 0.6

</description>
<parameters>
<parameter name="behaviour">
<parameter_description> a #ClutterBehaviourDepth
</parameter_description>
</parameter>
<parameter name="depth_start">
<parameter_description> return location for the initial depth value, or %NULL
</parameter_description>
</parameter>
<parameter name="depth_end">
<parameter_description> return location for the final depth value, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_entry_get_max_length">
<description>
Gets the maximum length of text that can be set into @entry.
See clutter_entry_set_max_length().


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
</parameters>
<return> the maximum number of characters.

Since: 0.4
</return>
</function>

<function name="clutter_feature_available">
<description>
Checks whether @feature is available.  @feature can be a logical
OR of #ClutterFeatureFlags.


</description>
<parameters>
<parameter name="feature">
<parameter_description> a #ClutterFeatureFlags
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a feature is available

Since: 0.1.1
</return>
</function>

<function name="clutter_container_sort_depth_order">
<description>
Sorts a container&apos;s children using their depth. This function should not
be normally used by applications.

Since: 0.6

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_knot_copy">
<description>
Makes an allocated copy of a knot.


</description>
<parameters>
<parameter name="knot">
<parameter_description> a #ClutterKnot
</parameter_description>
</parameter>
</parameters>
<return> the copied knot.

Since: 0.2
</return>
</function>

<function name="clutter_knot_equal">
<description>
Compares to knot and checks if the point to the same location.


</description>
<parameters>
<parameter name="knot_a">
<parameter_description> First knot
</parameter_description>
</parameter>
<parameter name="knot_b">
<parameter_description> Second knot
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the knots point to the same location.

Since: 0.2
</return>
</function>

<function name="ClutterContainer">
<description>
The ::child-notify signal is emitted each time a property is
being set through the clutter_container_child_set() and
clutter_container_child_set_property() calls.

Since: 0.8

</description>
<parameters>
<parameter name="container">
<parameter_description> the container which received the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the child that has had a property set. 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_group_add_many">
<description>
Adds a %NULL-terminated list of actors to a group.  This function is
equivalent to calling clutter_group_add() for each member of the list.

@Deprecated: 0.4: This function is obsolete, use clutter_container_add()
instead.

</description>
<parameters>
<parameter name="group">
<parameter_description> A #ClutterGroup
</parameter_description>
</parameter>
<parameter name="first_actor">
<parameter_description> the #ClutterActor actor to add to the group
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> additional actors to add to the group
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_unparent">
<description>
This function should not be used in applications.  It should be called by
implementations of container actors, to dissociate a child from the
container.

Since: 0.1.1

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_to_hlsx">
<description>
Converts @src to the HLS format. Returned hue is in degrees (0 .. 360),
luminance and saturation from interval &amp;lt;0 .. 1&amp;gt;.

</description>
<parameters>
<parameter name="src">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="hue">
<parameter_description> return location for the hue value or %NULL
</parameter_description>
</parameter>
<parameter name="luminance">
<parameter_description> return location for the luminance value or %NULL
</parameter_description>
</parameter>
<parameter name="saturation">
<parameter_description> return location for the saturation value or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_media_set_uri">
<description>
Sets the URI of @media to @uri.

</description>
<parameters>
<parameter name="media">
<parameter_description> #ClutterMedia object
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> URI
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeout_pool_add">
<description>
Sets a function to be called at regular intervals, and puts it inside
the @pool. The function is repeatedly called until it returns %FALSE,
at which point the timeout is automatically destroyed and the function
won&apos;t be called again. If @notify is not %NULL, the @notify function
will be called. The first call to @func will be at the end of @interval.

Since version 0.8 this will try to compensate for delays. For
example, if @func takes half the interval time to execute then the
function will be called again half the interval time after it
finished. Before version 0.8 it would not fire until a full
interval after the function completes so the delay between calls
would be @interval * 1.5. This function does not however try to
invoke the function multiple times to catch up missing frames if
@func takes more than @interval ms to execute.


</description>
<parameters>
<parameter name="pool">
<parameter_description> a #ClutterTimeoutPool
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> the time between calls to the function, in milliseconds
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function, or %NULL
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to call when the timeout is removed, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the timeout inside the pool.
Use clutter_timeout_pool_remove() to stop the timeout.

Since: 0.4
</return>
</function>

<function name="clutter_media_set_position">
<description>
Sets the playback position of @media to @position.

</description>
<parameters>
<parameter name="media">
<parameter_description> A #ClutterMedia object
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> The desired position.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_list_model_new">
<description>
Creates a new default model with @n_columns columns with the types 
and names passed in.

For example:

&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
model = clutter_list_model_new (3,
G_TYPE_INT,      &quot;Score&quot;,
G_TYPE_STRING,   &quot;Team&quot;,
GDK_TYPE_PIXBUF, &quot;Logo&quot;);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;

will create a new #ClutterModel with three columns of type int,
string and #GdkPixbuf respectively.

Note that the name of the column can be set to %NULL, in which case
the canonical name of the type held by the column will be used as
the title.


</description>
<parameters>
<parameter name="n_columns">
<parameter_description> number of columns in the model
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> @n_columns number of #GType and string pairs
</parameter_description>
</parameter>
</parameters>
<return> a new #ClutterListModel

Since: 0.6
</return>
</function>

<function name="json_array_remove_element">
<description>
Removes the #JsonNode inside @array at @index_ freeing its allocated
resources.

</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the position of the element to be removed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_score_append_at_marker">
<description>
Appends @timeline at the given @marker_name on the @parent
#ClutterTimeline.

If you want to append @timeline at the end of @parent, use
clutter_score_append().

The #ClutterScore will take a reference on @timeline.


</description>
<parameters>
<parameter name="score">
<parameter_description> a #ClutterScore
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> the parent #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="marker_name">
<parameter_description> the name of the marker to use
</parameter_description>
</parameter>
<parameter name="timeline">
<parameter_description> the #ClutterTimeline to append
</parameter_description>
</parameter>
</parameters>
<return> the id of the #ClutterTimeline inside the score, or
0 on failure. The returned id can be used with clutter_score_remove()
or clutter_score_get_timeline().

Since: 0.8
</return>
</function>

<function name="clutter_stage_get_default">
<description>
Return value: the main #ClutterStage.  You should never

</description>
<parameters>
</parameters>
<return> the main #ClutterStage.  You should never
destroy or unref the returned actor.
</return>
</function>

<function name="clutter_container_foreach">
<description>
Calls @callback for each child of @container.

Since: 0.4

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a function to be called for each child
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to be passed to the function, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_list_model_newv">
<description>
Non-vararg version of clutter_list_model_new(). This function is
useful for language bindings.


</description>
<parameters>
<parameter name="n_columns">
<parameter_description> number of columns in the model
</parameter_description>
</parameter>
<parameter name="types">
<parameter_description> an array of #GType types for the columns, from first to last
</parameter_description>
</parameter>
<parameter name="names">
<parameter_description> an array of names for the columns, from first to last
</parameter_description>
</parameter>
</parameters>
<return> a new default #ClutterModel

Since: 0.6
</return>
</function>

<function name="clutter_score_pause">
<description>
Pauses a playing score @score.

Since: 0.6

</description>
<parameters>
<parameter name="score">
<parameter_description> a #ClutterScore
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_shader_param">
<description>
Sets the value for a named parameter of the shader applied
to @actor.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="param">
<parameter_description> the name of the parameter
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value of the parameter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_preferred_height">
<description>
Computes the requested minimum and natural heights for an actor,
or if they are already computed, returns the cached values.

An actor may not get its request - depending on the layout
manager that&apos;s in effect.

A request should not incorporate the actor&apos;s scale or anchor point;
those transformations do not affect layout, only rendering.

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="for_width">
<parameter_description> available width to assume in computing desired height,
or a negative value to indicate that no width is defined
</parameter_description>
</parameter>
<parameter name="min_height_p">
<parameter_description> return location for min height, or %NULL
</parameter_description>
</parameter>
<parameter name="natural_height_p">
<parameter_description> return location for natural height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="ClutterBehaviourOpacity">
<description>
Final opacity level of the behaviour.

Since: 0.2

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_effect_fade">
<description>
Simple effect for fading a single #ClutterActor.


</description>
<parameters>
<parameter name="template_">
<parameter_description> A #ClutterEffectTemplate
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> A #ClutterActor to apply the effect to.
</parameter_description>
</parameter>
<parameter name="opacity_end">
<parameter_description> Final opacity value to apply to actor
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> A #ClutterEffectCompleteFunc to call on effect
completion or %NULL
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> Data to pass to supplied  #ClutterEffectCompleteFunc
or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterTimeline for the effect. Will be unrefed by
the effect when completed.

Since: 0.6
</return>
</function>

<function name="CLUTTER_ACTOR_IS_REACTIVE">
<description>
Evaluates to %TRUE if the %CLUTTER_ACTOR_REACTIVE flag is set.

Since: 0.6

</description>
<parameters>
<parameter name="e">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_insertv">
<description>
Inserts data at @row into the #ClutterModel, setting the row
values for the given @columns upon creation.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> row index
</parameter_description>
</parameter>
<parameter name="n_columns">
<parameter_description> the number of columns and values to set
</parameter_description>
</parameter>
<parameter name="columns">
<parameter_description> a vector containing the columns to set
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a vector containing the values for the cells
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_label_set_ellipsize">
<description>
Sets the mode used to ellipsize (add an ellipsis: &quot;...&quot;) to the text 
if there is not enough space to render the entire string.

Since: 0.2

</description>
<parameters>
<parameter name="label">
<parameter_description> a #ClutterLabel
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> a #PangoEllipsizeMode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_set_stage_foreign">
<description>
Target the #ClutterStage to use an existing external X Window


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="xwindow">
<parameter_description> an existing X Window id
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if foreign window is valid

Since: 0.4
</return>
</function>

<function name="clutter_label_new_with_text">
<description>
Creates a new #ClutterLabel displaying @text using @font_name.


</description>
<parameters>
<parameter name="font_name">
<parameter_description> the name (and size) of the font to be used
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to be displayed
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterLabel
</return>
</function>

<function name="clutter_label_set_font_name">
<description>
Sets @font_name as the font used by @label.

@font_name must be a string containing the font name and its
size, similarly to what you would feed to the
pango_font_description_from_string() function.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #ClutterLabel
</parameter_description>
</parameter>
<parameter name="font_name">
<parameter_description> a font name and size, or %NULL for the default font
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_get_default_backend">
<description>
FIXME


</description>
<parameters>
</parameters>
<return> the default backend. You should not ref or
unref the returned object. Applications should not rarely need
to use this.

Since: 0.4
</return>
</function>

<function name="clutter_score_get_timeline">
<description>
Retrieves the #ClutterTimeline for @id inside @score.


</description>
<parameters>
<parameter name="score">
<parameter_description> a #ClutterScore
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the id of the timeline
</parameter_description>
</parameter>
</parameters>
<return> the requested timeline, or %NULL. This function does
not increase the reference count on the returned #ClutterTimeline

Since: 0.6
</return>
</function>

<function name="json_array_new">
<description>
Creates a new #JsonArray.


</description>
<parameters>
</parameters>
<return> the newly created #JsonArray
</return>
</function>

<function name="clutter_behaviour_ellipse_get_angle_end">
<description>
Gets the at which movements ends.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
</parameters>
<return> angle in degrees

Since: 0.4
</return>
</function>

<function name="clutter_actor_pick">
<description>
Renders a silhouette of the actor using the supplied color. Used
internally for mapping pointer events to actors.

This function should never be called directly by applications.

Subclasses overiding the ClutterActor::pick() method should call
clutter_actor_should_pick_paint() to decide whether to render their
silhouette. Containers should always recursively call pick for
each child.

Since 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> A #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_entry_set_max_length">
<description>
Sets the maximum allowed length of the contents of the actor. If the
current contents are longer than the given length, then they will be
truncated to fit.

Since: 0.4

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> the maximum number of characters allowed in the entry; 0
to disable or -1 to set the length of the current string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_win32_disable_event_retrieval">
<description>
Disables retrieval of Windows messages in the main loop. Use to
create event-less canvas.

This function can only be called before calling clutter_init().

Since: 0.8

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_media_get_duration">
<description>
Retrieves the duration of the media stream that @media represents.


</description>
<parameters>
<parameter name="media">
<parameter_description> A #ClutterMedia object
</parameter_description>
</parameter>
</parameters>
<return> The length of the media stream.
</return>
</function>

<function name="clutter_entry_set_text">
<description>
Sets @text as the text to be displayed by @entry. The
ClutterEntry::text-changed signal is emitted.

Since: 0.4

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to be displayed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_sizeu">
<description>
Overrides the actor&apos;s size request in #ClutterUnit&amp;lt;!-- --&amp;gt;s. If @width
and/or @height are -1 the actor will use its normal size request (the
override is removed).

This function sets or unsets both the minimum and natural size.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> New width of actor in #ClutterUnit&amp;lt;!-- --&amp;gt;s, or -1
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> New height of actor in #ClutterUnit&amp;lt;!-- --&amp;gt;s, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_shader_is_compiled">
<description>
Checks whether @shader is is currently compiled, linked and bound
to the GL context.


</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the shader is compiled, linked and ready for use.

Since: 0.8
</return>
</function>

<function name="clutter_container_class_find_child_property">
<description>
Looks up the #GParamSpec for a child property of @klass.


</description>
<parameters>
<parameter name="klass">
<parameter_description> a #GObjectClass implementing the #ClutterContainer interface.
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> a property name.
</parameter_description>
</parameter>
</parameters>
<return> The #GParamSpec for the property or %NULL if no such
property exist.

Since: 0.8
</return>
</function>

<function name="clutter_qmulx">
<description>
Multiplies two fixed values using 64bit arithmetic; this provides
significantly better precission than the #CLUTTER_FIXED_MUL macro,
but at performance cost (about 2.7 times slowdown on ARMv5e, and 2 times
on x86).


</description>
<parameters>
<parameter name="op1">
<parameter_description> #ClutterFixed
</parameter_description>
</parameter>
<parameter name="op2">
<parameter_description> #ClutterFixed
</parameter_description>
</parameter>
</parameters>
<return> the result of the operation

Since: 0.4
</return>
</function>

<function name="clutter_shader_set_vertex_source">
<description>
Sets the GLSL source code to be used by a #ClutterShader for the vertex
program.

Since: 0.6

</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> GLSL source code.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> length of source buffer (currently ignored)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_ellipse_set_height">
<description>
Sets the height of the elliptical path.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of the ellipse
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_new">
<description>
Creates a new #JsonNode of @type.


</description>
<parameters>
<parameter name="type">
<parameter_description> a #JsonNodeType
</parameter_description>
</parameter>
</parameters>
<return> the newly created #JsonNode
</return>
</function>

<function name="clutter_ramp_inc_func">
<description>
Convenience alpha function for a monotonic increasing ramp. You
can use this function as the alpha function for clutter_alpha_set_func().


</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="dummy">
<parameter_description> unused argument
</parameter_description>
</parameter>
</parameters>
<return> an alpha value.

Since: 0.2
</return>
</function>

<function name="clutter_timeline_get_direction">
<description>
Retrieves the direction of the timeline set with
clutter_timeline_set_direction().


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> the direction of the timeline

Since: 0.6
</return>
</function>

<function name="json_array_unref">
<description>
Decreases by one the reference count of a #JsonArray. If the
reference count reaches zero, the array is destroyed and all
its allocated resources are freed.

</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_scale_set_boundsx">
<description>
Fixed point version of clutter_behaviour_scale_set_bounds().

Sets the bounds used by scale behaviour.

Since: 0.6

</description>
<parameters>
<parameter name="scale">
<parameter_description> a #ClutterBehaviourScale
</parameter_description>
</parameter>
<parameter name="x_scale_start">
<parameter_description> initial scale factor on the X axis
</parameter_description>
</parameter>
<parameter name="y_scale_start">
<parameter_description> initial scale factor on the Y axis
</parameter_description>
</parameter>
<parameter name="x_scale_end">
<parameter_description> final scale factor on the X axis
</parameter_description>
</parameter>
<parameter name="y_scale_end">
<parameter_description> final scale factor on the Y axis
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_exp_inc_func">
<description>
Convenience alpha function for a 2^x curve. You can use this function as the
alpha function for clutter_alpha_set_func().


</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="dummy">
<parameter_description> unused argument
</parameter_description>
</parameter>
</parameters>
<return> an alpha value.

Since: 0.4
</return>
</function>

<function name="clutter_behaviour_get_n_actors">
<description>
Gets the number of actors this behaviour is applied too.


</description>
<parameters>
<parameter name="behave">
<parameter_description> a #ClutterBehaviour
</parameter_description>
</parameter>
</parameters>
<return> The number of applied actors 

Since: 0.2
</return>
</function>

<function name="clutter_model_filter_iter">
<description>
Checks whether the row pointer by @iter should be filtered or not using
the filtering function set on @model.

This function should be used only by subclasses of #ClutterModel.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> the row to filter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the row should be displayed,
%FALSE otherwise

Since: 0.6
</return>
</function>

<function name="clutter_init_with_args">
<description>
This function does the same work as clutter_init(). Additionally,
it allows you to add your own command line options, and it
automatically generates nicely formatted &amp;lt;option&amp;gt;--help&amp;lt;/option&amp;gt;
output. Note that your program will be terminated after writing
out the help output. Also note that, in case of error, the
error message will be placed inside @error instead of being
printed on the display.


</description>
<parameters>
<parameter name="argc">
<parameter_description> a pointer to the number of command line arguments
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> a pointer to the array of comman line arguments
</parameter_description>
</parameter>
<parameter name="parameter_string">
<parameter_description> a string which is displayed in the
first line of &amp;lt;option&amp;gt;--help&amp;lt;/option&amp;gt; output, after
&amp;lt;literal&amp;gt;&amp;lt;replaceable&amp;gt;programname&amp;lt;/replaceable&amp;gt; [OPTION...]&amp;lt;/literal&amp;gt;
</parameter_description>
</parameter>
<parameter name="entries">
<parameter_description> a %NULL terminated array of #GOptionEntry&amp;lt;!-- --&amp;gt;s
describing the options of your program
</parameter_description>
</parameter>
<parameter name="translation_domain">
<parameter_description> a translation domain to use for translating
the &amp;lt;option&amp;gt;--help&amp;lt;/option&amp;gt; output for the options in @entries
with gettext(), or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return> %CLUTTER_INIT_SUCCESS if Clutter has been successfully
initialised, or other values or #ClutterInitError in case of
error.

Since: 0.2
</return>
</function>

<function name="clutter_color_parse">
<description>
Parses a string definition of a color, filling the
&amp;lt;structfield&amp;gt;red&amp;lt;/structfield&amp;gt;, &amp;lt;structfield&amp;gt;green&amp;lt;/structfield&amp;gt;, 
&amp;lt;structfield&amp;gt;blue&amp;lt;/structfield&amp;gt; and &amp;lt;structfield&amp;gt;alpha&amp;lt;/structfield&amp;gt; 
channels of @dest. If alpha is not specified it will be set full opaque.
The color in @dest is not allocated.

The color may be defined by any of the formats understood by
&amp;lt;function&amp;gt;pango_color_parse&amp;lt;/function&amp;gt;; these include literal color
names, like &amp;lt;literal&amp;gt;Red&amp;lt;/literal&amp;gt; or &amp;lt;literal&amp;gt;DarkSlateGray&amp;lt;/literal&amp;gt;,
or hexadecimal specifications like &amp;lt;literal&amp;gt;&amp;num;3050b2&amp;lt;/literal&amp;gt; or
&amp;lt;literal&amp;gt;&amp;num;333&amp;lt;/literal&amp;gt;.


</description>
<parameters>
<parameter name="color">
<parameter_description> a string specifiying a color (named color or #RRGGBBAA)
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if parsing succeeded.

Since: 0.2
</return>
</function>

<function name="clutter_stage_manager_list_stage">
<description>
Lists all currently used stages.


</description>
<parameters>
<parameter name="stage_manager">
<parameter_description> a #ClutterStageManager
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated list of #ClutterStage objects. Use
g_slist_free() to deallocate it when done.

Since: 0.8
</return>
</function>

<function name="clutter_behaviour_remove">
<description>
Removes @actor from the list of #ClutterActor&amp;lt;!-- --&amp;gt;s to which
@behave applies.  This function removes a reference on the actor.

Since: 0.2

</description>
<parameters>
<parameter name="behave">
<parameter_description> a #ClutterBehaviour
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="ClutterChildMeta">
<description>
The #ClutterActor being wrapped by this #ClutterChildMeta

Since: 0.8

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_path_get_knots">
<description>
Return value: a #GSList of the paths knots.

</description>
<parameters>
<parameter name="pathb">
<parameter_description> a #ClutterBehvaiourPath
</parameter_description>
</parameter>
</parameters>
<return> a #GSList of the paths knots.

Since: 0.2
</return>
</function>

<function name="clutter_actor_unrealize">
<description>
Frees up any underlying graphics resources needed by the actor to be
displayed.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_rotation">
<description>
Sets the rotation angle of @self around the given axis.

The rotation center coordinates used depend on the value of @axis:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;%CLUTTER_X_AXIS requires @y and @z&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;%CLUTTER_Y_AXIS requires @x and @z&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;%CLUTTER_Z_AXIS requires @x and @y&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;

The rotation coordinates are relative to the anchor point of the
actor, set using clutter_actor_set_anchor_point(). If no anchor
point is set, the upper left corner is assumed as the origin.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> the axis of rotation
</parameter_description>
</parameter>
<parameter name="angle">
<parameter_description> the angle of rotation
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate of the rotation center
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate of the rotation center
</parameter_description>
</parameter>
<parameter name="z">
<parameter_description> Z coordinate of the rotation center
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_apply">
<description>
Applies @behave to @actor.  This function adds a reference on
the actor.

Since: 0.2

</description>
<parameters>
<parameter name="behave">
<parameter_description> a #ClutterBehaviour
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_disable_event_retrieval">
<description>
Disables retrieval of X events in the main loop. Use to create event-less
canvas or in conjunction with clutter_x11_handle_event.

This function can only be called before calling clutter_init().

Since: 0.8

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_paint_opacity">
<description>
Retrieves the absolute opacity of the actor, as it appears on the stage.

This function traverses the hierarchy chain and composites the opacity of
the actor with that of its parents.

This function is intended for subclasses to use in the paint virtual
function, to paint themselves with the correct opacity.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> The actor opacity value.

Since: 0.8
</return>
</function>

<function name="clutter_sinx">
<description>
Fixed point implementation of sine function


</description>
<parameters>
<parameter name="angle">
<parameter_description> a #ClutterFixed angle in radians
</parameter_description>
</parameter>
</parameters>
<return> #ClutterFixed sine value.

Since: 0.2
</return>
</function>

<function name="clutter_score_set_loop">
<description>
Sets whether @score should loop. A looping #ClutterScore will start
from its initial state after the ::complete signal has been fired.

Since: 0.6

</description>
<parameters>
<parameter name="score">
<parameter_description> a #ClutterScore
</parameter_description>
</parameter>
<parameter name="loop">
<parameter_description> %TRUE for enable looping
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_get_delta">
<description>
Retrieves the number of frames and the amount of time elapsed since
the last ClutterTimeline::new-frame signal.

This function is only useful inside handlers for the ::new-frame
signal, and its behaviour is undefined if the timeline is not
playing.


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="msecs">
<parameter_description> return location for the milliseconds elapsed since the last
frame, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the amount of frames elapsed since the last one

Since: 0.6
</return>
</function>

<function name="clutter_script_get_object">
<description>
Retrieves the object bound to @name. This function does not increment
the reference count of the returned object.


</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the object to retrieve
</parameter_description>
</parameter>
</parameters>
<return> the named object, or %NULL if no object with the
given name was available

Since: 0.6
</return>
</function>

<function name="clutter_sini">
<description>
Very fast fixed point implementation of sine function.

ClutterAngle is an integer such that 1024 represents
full circle.


</description>
<parameters>
<parameter name="angle">
<parameter_description> a #ClutterAngle
</parameter_description>
</parameter>
</parameters>
<return> #ClutterFixed sine value.

Since: 0.2
</return>
</function>

<function name="clutter_behaviour_ellipse_newx">
<description>
Creates a behaviour that drives actors along an elliptical path. This
is the fixed point variant of clutter_behaviour_ellipse_new().


</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha, or %NULL
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinace of the center
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordiance of the center
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the ellipse
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of the ellipse
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> #ClutterRotateDirection of rotation
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> #ClutterFixed angle in degrees at which movement starts
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> #ClutterFixed angle in degrees at which movement ends
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterBehaviourEllipse

Since: 0.4
</return>
</function>

<function name="clutter_timeline_start">
<description>
Starts the #ClutterTimeline playing.

</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_rotate_get_boundsx">
<description>
Retrieves the rotation boundaries of the rotate behaviour. This is
the fixed point notation version of clutter_behaviour_rotate_get_bounds().

Since: 0.4

</description>
<parameters>
<parameter name="rotate">
<parameter_description> a #ClutterBehaviourRotate
</parameter_description>
</parameter>
<parameter name="angle_start">
<parameter_description> return value for the initial angle
</parameter_description>
</parameter>
<parameter name="angle_end">
<parameter_description> return value for the final angle
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_get_actor_at_pos">
<description>
Checks the scene at the coordinates @x and @y and returns a pointer
to the #ClutterActor at those coordinates.


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate to check
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate to check
</parameter_description>
</parameter>
</parameters>
<return> the actor at the specified coordinates, if any
</return>
</function>

<function name="clutter_timeline_set_direction">
<description>
Sets the direction of @timeline, either %CLUTTER_TIMELINE_FORWARD or
%CLUTTER_TIMELINE_BACKWARD.

Since: 0.6

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> the direction of the timeline
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="ClutterBehaviourDepth">
<description>
End depth level to apply to the actors.

Since: 0.4

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_paint_area">
<description>
Gets where an actor will be painted, which is generally the union
of the paint boxes of the actor&apos;s children, plus anything the actor
draws itself, transformed by the scale factor and anchor point. The
result is a &quot;paint area&quot;, i.e. where the actor will actually be
painted.

The returned #ClutterActorBox is in the coordinates of the actor&apos;s
parent, just as an allocation is.

&amp;lt;note&amp;gt;This function is only valid if the allocation is valid,
which means for the most part only inside a paint() method.&amp;lt;/note&amp;gt;

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="box">
<parameter_description> the function fills this in with the actor&apos;s paint area
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_ellipse_new">
<description>
Creates a behaviour that drives actors along an elliptical path with
given center, width and height; the movement starts at @angle_start
degrees (with 0 corresponding to 12 o&apos;clock) and ends at @angle_end
degrees. Angles &amp;gt;= 360 degrees get clamped to the canonical interval
&amp;lt;0, 360), if start == end, the behaviour will rotate by exacly 360 degrees.


</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha, or %NULL
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinace of the center
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordiance of the center
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the ellipse
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of the ellipse
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> #ClutterRotateDirection of rotation
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> angle in degrees at which movement starts, between 0 and 360
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> angle in degrees at which movement ends, between 0 and 360
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterBehaviourEllipse

Since: 0.4
</return>
</function>

<function name="clutter_model_foreach">
<description>
Calls @func for each row in the model. 

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #ClutterModelForeachFunc
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_array_get_elements">
<description>
Gets the elements of a #JsonArray as a list of #JsonNode&amp;lt;!-- --&amp;gt;s.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
</parameters>
<return> a #GList containing the elements of the array. The
contents of the list are owned by the array and should never be
modified or freed. Use g_list_free() on the returned list when
done using it
</return>
</function>

<function name="clutter_entry_set_visible_cursor">
<description>
Sets the visibility of the input cursor.

Since: 0.4

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
<parameter name="visible">
<parameter_description> whether the input cursor should be visible
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_shader_set_uniform_1f">
<description>
Sets a user configurable variable in the shader programs attached
to a #ClutterShader.

Since: 0.6

</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of uniform in vertex or fragment program to set.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the new value of the uniform.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_ellipse_set_tilt">
<description>
Sets the angles at which the ellipse should be tilted around it&apos;s center.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="angle_tilt_x">
<parameter_description> tilt of the elipse around the center in X axis in degrees.
</parameter_description>
</parameter>
<parameter name="angle_tilt_y">
<parameter_description> tilt of the elipse around the center in Y axis in degrees.
</parameter_description>
</parameter>
<parameter name="angle_tilt_z">
<parameter_description> tilt of the elipse around the center in Z axis in degrees.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_sine_inc_func">
<description>
Convenience alpha function for a sine wave over interval [0, pi / 2].
You can use this function as the alpha function for
clutter_alpha_set_func().


</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="dummy">
<parameter_description> unused argument
</parameter_description>
</parameter>
</parameters>
<return> an alpha value.

Since: 0.2
</return>
</function>

<function name="clutter_group_get_n_children">
<description>
Gets the number of actors held in the group.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterGroup
</parameter_description>
</parameter>
</parameters>
<return> The number of child actors held in the group.

Since: 0.2
</return>
</function>

<function name="clutter_behaviour_rotate_set_boundsx">
<description>
Fixed point version of clutter_behaviour_rotate_set_bounds().

Since: 0.4

</description>
<parameters>
<parameter name="rotate">
<parameter_description> a #ClutterBehaviourRotate
</parameter_description>
</parameter>
<parameter name="angle_start">
<parameter_description> initial angle, in fixed point notation in degrees, between 0
and 360.
</parameter_description>
</parameter>
<parameter name="angle_end">
<parameter_description> final angle, in fixed point notation in degress, between 0 and
360.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_group_sort_depth_order">
<description>
Sorts a #ClutterGroup&apos;s children by their depth value.
This function should not be used by applications.

Deprecated: 0.6: Use clutter_container_sort_depth_order() instead.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterGroup
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_set_double">
<description>
Sets @value as the double content of the @node, replacing any existing
content.

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode of type %JSON_NODE_VALUE
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a double value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_yu">
<description>
Sets the actor&apos;s Y coordinate, relative to its parent.
Overrides any layout manager and forces a fixed position for
the actor.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the actor&apos;s position on the Y axis, in #ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_container_add_actor">
<description>
Adds a #ClutterActor to @container. This function will emit the
&quot;actor-added&quot; signal. The actor should be parented to
@container. You cannot add a #ClutterActor to more than one
#ClutterContainer.

Since: 0.4

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the first #ClutterActor to add
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_fixed_position_set">
<description>
Sets whether an actor has a fixed position set (and will thus be
unaffected by any layout manager).

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="is_set">
<parameter_description> whether to use fixed position
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_positionu">
<description>
This function tries to &quot;do what you mean&quot; and tell you where the
actor is, prior to any transformations. Retrieves the fixed
position of an actor in pixels, if one has been set; otherwise, if
the allocation is valid, returns the actor&apos;s allocated position;
otherwise, returns 0,0.

The returned position is in #ClutterUnit&amp;lt;!-- --&amp;gt;s.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_opacity_set_bounds">
<description>
Sets the initial and final levels of the opacity applied by @behaviour
on each actor it controls.

Since: 0.6

</description>
<parameters>
<parameter name="behaviour">
<parameter_description> a #ClutterBehaviourOpacity
</parameter_description>
</parameter>
<parameter name="opacity_start">
<parameter_description> minimum level of opacity
</parameter_description>
</parameter>
<parameter name="opacity_end">
<parameter_description> maximum level of opacity
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_rotate_get_bounds">
<description>
Retrieves the rotation boundaries of the rotate behaviour.

Since: 0.4

</description>
<parameters>
<parameter name="rotate">
<parameter_description> a #ClutterBehaviourRotate
</parameter_description>
</parameter>
<parameter name="angle_start">
<parameter_description> return value for the initial angle
</parameter_description>
</parameter>
<parameter name="angle_end">
<parameter_description> return value for the final angle
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_get_loop">
<description>
Gets whether @timeline is looping


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the timeline is looping
</return>
</function>

<function name="clutter_sine_func">
<description>
Convenience alpha function for a sine wave. You can use this
function as the alpha function for clutter_alpha_set_func().


</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="dummy">
<parameter_description> unused argument
</parameter_description>
</parameter>
</parameters>
<return> an alpha value.

Since: 0.2
</return>
</function>

<function name="clutter_behaviour_ellipse_set_angle_endx">
<description>
Sets the angle at which movement ends; angles &amp;gt;= 360 degress get clamped
to the canonical interval &amp;lt;0, 360).

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="angle_end">
<parameter_description> angle, as #ClutterFixed, at which movement ends, in degrees,
between 0 and 360.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_object_add_member">
<description>
Adds a member named @member_name and containing @node into a #JsonObject.
The object will take ownership of the #JsonNode.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of the member
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> the value of the member
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_get_boolean">
<description>
Gets the boolean value stored inside a #JsonNode


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode of type %JSON_NODE_VALUE
</parameter_description>
</parameter>
</parameters>
<return> a boolean value.
</return>
</function>

<function name="clutter_stage_set_fogx">
<description>
Sets the depth cueing settings for the @stage. This is the fixed point
version of clutter_stage_set_fog().

Since: 0.6

</description>
<parameters>
<parameter name="stage">
<parameter_description> the #ClutterStage
</parameter_description>
</parameter>
<parameter name="fog">
<parameter_description> a #ClutterFog structure
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_set_types">
<description>
Sets the types of the columns inside a #ClutterModel.

This function is meant primarily for #GObjects that inherit from
#ClutterModel, and should only be used when contructing a #ClutterModel.
It will not work after the initial creation of the #ClutterModel.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="n_columns">
<parameter_description> number of columns for the model
</parameter_description>
</parameter>
<parameter name="types">
<parameter_description> an array of #GType types
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="ClutterBehaviourScale">
<description>
The final scaling factor on the Y axis for the actors.

Since: 0.6

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_texture_set_cogl_texture">
<description>
Replaces the underlying COGL texture drawn by this actor with
@cogl_tex. A reference to the texture is taken so if the handle is
no longer needed it should be deref&apos;d with cogl_texture_unref.

Since: 0.8

</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterTexture
</parameter_description>
</parameter>
<parameter name="cogl_tex">
<parameter_description> A CoglHandle for a texture
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_raise_top">
<description>
Raises @self to the top.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_win32_get_stage_from_window">
<description>
Gets the stage for a particular window.


</description>
<parameters>
<parameter name="hwnd">
<parameter_description> a window handle
</parameter_description>
</parameter>
</parameters>
<return> The stage or NULL if a stage does not exist for the
window.

Since: 0.8
</return>
</function>

<function name="clutter_actor_move_byu">
<description>
Moves an actor by the specified distance relative to its current
position.

The move is accomplished by setting a fixed position, overriding
any layout manager, see clutter_actor_set_positionu().

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="dx">
<parameter_description> Distance to move Actor on X axis, in #ClutterUnit&amp;lt;!-- --&amp;gt;s.
</parameter_description>
</parameter>
<parameter name="dy">
<parameter_description> Distance to move Actor on Y axis, in #ClutterUnit&amp;lt;!-- --&amp;gt;s.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_score_stop">
<description>
Stops and rewinds a playing #ClutterScore instance.

Since: 0.6

</description>
<parameters>
<parameter name="score">
<parameter_description> A #ClutterScore
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_is_default">
<description>
Checks if @stage is the default stage, or an instance created using
clutter_stage_new() but internally using the same implementation.


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the passed stage is the default one

Since: 0.8
</return>
</function>

<function name="clutter_timeline_is_playing">
<description>
Query state of a #ClutterTimeline instance.


</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> TRUE if timeline is currently playing, FALSE if not.
</return>
</function>

<function name="clutter_color_darken">
<description>
Darkens @src by a fixed amount, and saves the changed color
in @dest.

</description>
<parameters>
<parameter name="src">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> return location for the darker color
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_redraw">
<description>
Forces a redraw of the entire stage. Applications should never use this
function, but queue a redraw using clutter_actor_queue_redraw().

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_bspline_get_origin">
<description>
Gets the origin of the bezier.

Since: 0.4

</description>
<parameters>
<parameter name="bs">
<parameter_description>   a #ClutterBehaviourBspline
</parameter_description>
</parameter>
<parameter name="knot">
<parameter_description> a #ClutterKnot where to store the origin of the bezier
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_set_motion_events_frequency">
<description>
Sets the motion events frequency. Setting this to a non-zero value
will override the default setting, so it should be rarely used.

Motion events are delivered from the default backend to the stage
and are used to generate the enter/leave events pair. This might lead
to a performance penalty due to the way the actors are identified.
Using this function is possible to reduce the frequency of the motion
events delivery to the stage.

Since: 0.6

</description>
<parameters>
<parameter name="frequency">
<parameter_description> the number of motion events per second, or 0 for the
default value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_get_color">
<description>
Retrieves the stage color.

</description>
<parameters>
<parameter name="stage">
<parameter_description> A #ClutterStage
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_move_anchor_point">
<description>
Sets an anchor point for the @actor, and adjusts the actor postion so
that the relative position of the actor toward its parent remains the
same.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="anchor_x">
<parameter_description> X coordinate of the anchor point
</parameter_description>
</parameter>
<parameter name="anchor_y">
<parameter_description> Y coordinate of the anchor point
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_iter_next">
<description>
Updates the @iter to point at the next position in the model.
The model implementation should take into account the presence of
a filter function.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
</parameters>
<return> The passed iterator, updated to point at the next
row in the model.

Since: 0.6
</return>
</function>

<function name="clutter_model_filter_row">
<description>
Checks whether @row should be filtered or not using the
filtering function set on @model.

This function should be used only by subclasses of #ClutterModel.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> the row to filter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the row should be displayed,
%FALSE otherwise

Since: 0.6
</return>
</function>

<function name="clutter_x11_texture_pixmap_new">
<description>

</description>
<parameters>
</parameters>
<return> A new #ClutterX11TexturePixmap

Since: 0.8
</return>
</function>

<function name="clutter_value_get_fixed">
<description>
Gets the fixed point value stored inside @value.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue initialized to #CLUTTER_TYPE_FIXED
</parameter_description>
</parameter>
</parameters>
<return> the value inside the passed #GValue

Since: 0.8
</return>
</function>

<function name="clutter_get_script_id">
<description>
Retrieves the Clutter script id, if any.


</description>
<parameters>
<parameter name="gobject">
<parameter_description> a #GObject
</parameter_description>
</parameter>
</parameters>
<return> the script id, or %NULL if @object was not defined inside
a UI definition file. The returned string is owned by the object and
should never be modified or freed.

Since: 0.6
</return>
</function>

<function name="clutter_actor_get_rotation">
<description>
Retrieves the angle and center of rotation on the given axis,
set using clutter_actor_set_angle().

The coordinates of the center returned by this function depend on
the axis passed.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> the axis of rotation
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return value for the X coordinate of the center of rotation
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return value for the Y coordinate of the center of rotation
</parameter_description>
</parameter>
<parameter name="z">
<parameter_description> return value for the Z coordinate of the center of rotation
</parameter_description>
</parameter>
</parameters>
<return> the angle of rotation.

Since: 0.6
</return>
</function>

<function name="clutter_model_set_filter">
<description>
Filters the @model using the given filtering function.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #ClutterModelFilterFunc, or #NULL
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @func, or #NULL
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> destroy notifier of @user_data, or #NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_queue_relayout">
<description>
Indicates that the actor&apos;s size request or other layout-affecting
properties may have changed. This function is used inside #ClutterActor
subclass implementations, not by applications directly.

Queueing a new layout automatically queues a redraw as well.

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_scale_set_bounds">
<description>
Sets the bounds used by scale behaviour.

Since: 0.6

</description>
<parameters>
<parameter name="scale">
<parameter_description> a #ClutterBehaviourScale
</parameter_description>
</parameter>
<parameter name="x_scale_start">
<parameter_description> initial scale factor on the X axis
</parameter_description>
</parameter>
<parameter name="y_scale_start">
<parameter_description> initial scale factor on the Y axis
</parameter_description>
</parameter>
<parameter name="x_scale_end">
<parameter_description> final scale factor on the X axis
</parameter_description>
</parameter>
<parameter name="y_scale_end">
<parameter_description> final scale factor on the Y axis
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_threads_add_frame_source">
<description>
Simple wrapper around clutter_threads_add_frame_source_full().


</description>
<parameters>
<parameter name="interval">
<parameter_description> the time between calls to the function, in milliseconds
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

Since: 0.8
</return>
</function>

<function name="ClutterScript">
<description>
The path of the currently parsed file. If ClutterScript:filename-set
is %FALSE then the value of this property is undefined.

Since: 0.6

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_label_get_color">
<description>
Retrieves the color of @label.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #ClutterLabel
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_allocation_geometry">
<description>
Gets the layout box an actor has been assigned.  The allocation can
only be assumed valid inside a paint() method; anywhere else, it
may be out-of-date.

An allocation does not incorporate the actor&apos;s scale or anchor point;
those transformations do not affect layout, only rendering.

The returned rectangle is in pixels.

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="geom">
<parameter_description> allocation geometry in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_x">
<description>
Retrieves the X coordinate of a #ClutterActor.

This function tries to &quot;do what you mean&quot;, by returning the
correct value depending on the actor&apos;s state.

If the actor has a valid allocation, this function will return
the X coordinate of the origin of the allocation box.

If the actor has any fixed coordinate set using clutter_actor_set_x(),
clutter_actor_set_position() or clutter_actor_set_geometry(), this
function will return that coordinate.

If both the allocation and a fixed position are missing, this function
will return 0.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the X coordinate, in pixels, ignoring any
transformation (i.e. scaling, rotation)
</return>
</function>

<function name="clutter_actor_get_y">
<description>
Retrieves the Y coordinate of a #ClutterActor.

This function tries to &quot;do what you mean&quot;, by returning the
correct value depending on the actor&apos;s state.

If the actor has a valid allocation, this function will return
the Y coordinate of the origin of the allocation box.

If the actor has any fixed coordinate set using clutter_actor_set_y(),
clutter_actor_set_position() or clutter_actor_set_geometry(), this
function will return that coordinate.

If both the allocation and a fixed position are missing, this function
will return 0.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the Y coordinate, in pixels, ignoring any
transformation (i.e. scaling, rotation)
</return>
</function>

<function name="clutter_entry_get_layout">
<description>
Gets the #PangoLayout used to display the entry.
The layout is useful to e.g. convert text positions to
pixel positions.
The returned layout is owned by the entry so need not be
freed by the caller.


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
</parameters>
<return> the #PangoLayout for this entry

Since: 0.4
</return>
</function>

<function name="clutter_main_quit">
<description>
Terminates the Clutter mainloop.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_actor_apply_transform_to_point">
<description>
Transforms @point in coordinates relative to the actor
into screen-relative coordinates with the current actor
transformation (i.e. scale, rotation, etc)

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="point">
<parameter_description> A point as #ClutterVertex
</parameter_description>
</parameter>
<parameter name="vertex">
<parameter_description> The translated #ClutterVertex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_iter_set">
<description>
Sets the value of one or more cells in the row referenced by @iter. The
variable argument list should contain integer column numbers, each column
column number followed by the value to be set. The  list is terminated by a
-1.

For example, to set column 0 with type %G_TYPE_STRING, use:
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
clutter_model_iter_set (iter, 0, &quot;foo&quot;, -1);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;

Since: 0.6

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of column/return location pairs, terminated by -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_from_hls">
<description>
Converts a color expressed in HLS (hue, luminance and saturation)
values into a #ClutterColor.

</description>
<parameters>
<parameter name="dest">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
<parameter name="hue">
<parameter_description> hue value (0 .. 255)
</parameter_description>
</parameter>
<parameter name="luminance">
<parameter_description> luminance value (0 .. 255)
</parameter_description>
</parameter>
<parameter name="saturation">
<parameter_description> saturation value (0 .. 255)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_name">
<description>
Sets the given name to @self. The name can be used to identify
a #ClutterActor.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> Textual tag to apply to actor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_scriptable_set_custom_property">
<description>
Overrides the common properties setting. The underlying virtual
function should be used when implementing custom properties.

Since: 0.6

</description>
<parameters>
<parameter name="scriptable">
<parameter_description> a #ClutterScriptable
</parameter_description>
</parameter>
<parameter name="script">
<parameter_description> the #ClutterScript creating the scriptable instance
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the property
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value of the property
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_scale">
<description>
Retrieves an actors scale in floating point.

Since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="scale_x">
<parameter_description> Location to store horizonal float scale factor, or %NULL.
</parameter_description>
</parameter>
<parameter name="scale_y">
<parameter_description> Location to store vertical float scale factor, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_get_stage">
<description>
Retrieves the source #ClutterStage the event originated for, or
NULL if the event has no stage.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterStage

Since: 0.8
</return>
</function>

<function name="clutter_behaviour_bspline_truncate">
<description>
Truncates the bezier spline at the control point; if the control point at
offset is not one of the on-curve points, the bspline will be
truncated at the nearest preceeding on-curve point.

Since: 0.4

</description>
<parameters>
<parameter name="bs">
<parameter_description>      a #ClutterBehaviourBspline
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description>  offset of control where the bspline should be truncated  
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_label_set_text">
<description>
Sets @text as the text to be displayed by @label.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #ClutterLabel
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to be displayed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_depthu">
<description>
Retrieves the depth of @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the depth of the actor, in #ClutterUnit&amp;lt;!-- --&amp;gt;s

Since: 0.6
</return>
</function>

<function name="clutter_stage_event">
<description>
This function is used to emit an event on the main stage.

You should rarely need to use this function, except for
synthetised events.


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> the return value from the signal emission

Since: 0.4
</return>
</function>

<function name="clutter_effect_depth">
<description>
Simple effect for changing the depth of a single #ClutterActor.


</description>
<parameters>
<parameter name="template_">
<parameter_description> A #ClutterEffectTemplate
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> A #ClutterActor to apply the effect to.
</parameter_description>
</parameter>
<parameter name="depth_end">
<parameter_description> Final depth value to apply to actor
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> A #ClutterEffectCompleteFunc to call on effect
completion or %NULL
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> Data to pass to supplied  #ClutterEffectCompleteFunc
or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterTimeline for the effect. Will be unrefed by
the effect when completed.

Since: 0.6
</return>
</function>

<function name="clutter_model_set_sort">
<description>
Sorts @model using the given sorting function.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> the column to sort on
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #ClutterModelSortFunc, or #NULL
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @func, or #NULL
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> destroy notifier of @user_data, or #NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_effect_template_construct">
<description>
Constructs a #ClutterEffectTemplate, to be used with the effects API.

This function can only be called once after the creation of @template_
and is only useful for language bindings.

Since: 0.6

</description>
<parameters>
<parameter name="template_">
<parameter_description> a #ClutterEffectTemplate
</parameter_description>
</parameter>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="alpha_func">
<parameter_description> an alpha function to use for the template
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to be passed to the alpha function, or %NULL
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to be called when disposing the alpha function&apos;s use
data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_texture_set_max_tile_waste">
<description>
Sets the maximum number of pixels in either axis that can be wasted
for an individual texture slice. If -1 is specified then the
texture is forced not to be sliced and the texture creation will
fail if the hardware can&apos;t create a texture large enough.

The value is only used when first creating a texture so changing it
after the texture data has been set has no effect.

Since: 0.8

</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterTexture
</parameter_description>
</parameter>
<parameter name="max_tile_waste">
<parameter_description> Maximum amount of waste in pixels or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_tani">
<description>
Very fast fixed point implementation of tan function.

ClutterAngle is an integer such that 1024 represents
full circle.


</description>
<parameters>
<parameter name="angle">
<parameter_description> a #ClutterAngle
</parameter_description>
</parameter>
</parameters>
<return> #ClutterFixed sine value.

Since: 0.3
</return>
</function>

<function name="ClutterMedia">
<description>
The ::error signal is emitted each time an error occurred.

Since: 0.2

</description>
<parameters>
<parameter name="media">
<parameter_description> the #ClutterMedia instance that received the signal
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> the #GError
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_get_int">
<description>
Gets the integer value stored inside a #JsonNode


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode of type %JSON_NODE_VALUE
</parameter_description>
</parameter>
</parameters>
<return> an integer value.
</return>
</function>

<function name="clutter_entry_set_color">
<description>
Sets the color of @entry.

Since: 0.4

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_ellipse_set_center">
<description>
Sets the center of the elliptical path to the point represented by knot.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinace of centre
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinace of centre
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_powx">
<description>
Calculates x to y power. (Note, if x is a constant it will be faster to
calculate the power as clutter_pow2x (CLUTTER_FIXED_MUL(y, log2 (x)))


</description>
<parameters>
<parameter name="x">
<parameter_description> base
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> #ClutterFixed exponent
</parameter_description>
</parameter>
</parameters>
<return> x in y power.

Since: 0.4
</return>
</function>

<function name="clutter_x11_get_stage_window">
<description>
Gets the stages X Window. 


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> An XID for the stage window.

Since: 0.4
</return>
</function>

<function name="clutter_entry_get_alignment">
<description>
Return value: The entry&apos;s #PangoAlignment

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
</parameters>
<return> The entry&apos;s #PangoAlignment

Since 0.4
</return>
</function>

<function name="clutter_stage_queue_redraw">
<description>
Queues a redraw for the passed stage.

&amp;lt;note&amp;gt;Applications should call clutter_actor_queue_redraw() and not
this function.&amp;lt;/note&amp;gt;

Since: 0.8

</description>
<parameters>
<parameter name="stage">
<parameter_description> the #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="CLUTTER_ALPHA_SINE_DEC">
<description>
Convenience symbol for clutter_sine_dec_func().

Since: 0.2

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_param_spec_fixed">
<description>
Creates a #GParamSpec for properties using #ClutterFixed values


</description>
<parameters>
<parameter name="name">
<parameter_description> name of the property
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> short name
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description (can be translatable)
</parameter_description>
</parameter>
<parameter name="minimum">
<parameter_description> lower boundary
</parameter_description>
</parameter>
<parameter name="maximum">
<parameter_description> higher boundary
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default value
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the param spec
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GParamSpec

Since: 0.8
</return>
</function>

<function name="clutter_group_lower">
<description>
Lowers @actor to @sibling level in the depth ordering.

Deprecated: 0.6: Use clutter_container_lower_child() instead

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterGroup
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_rotate_get_axis">
<description>
Retrieves the #ClutterRotateAxis used by the rotate behaviour.


</description>
<parameters>
<parameter name="rotate">
<parameter_description> a #ClutterBehaviourRotate
</parameter_description>
</parameter>
</parameters>
<return> the rotation axis

Since: 0.4
</return>
</function>

<function name="clutter_glx_texture_pixmap_new">
<description>

</description>
<parameters>
</parameters>
<return> A new #ClutterGLXTexturePixmap

Since: 0.8
</return>
</function>

<function name="clutter_actor_move_anchor_pointu">
<description>
Sets an anchor point for the actor, and adjusts the actor postion so that
the relative position of the actor toward its parent remains the same.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="anchor_x">
<parameter_description> X coordinate of the anchor point
</parameter_description>
</parameter>
<parameter name="anchor_y">
<parameter_description> Y coordinate of the anchor point
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_ellipse_set_tiltx">
<description>
Sets the angle at which the ellipse should be tilted around it&apos;s center.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="angle_tilt_x">
<parameter_description> tilt of the elipse in degrees, as #ClutterFixed, around the center in X axis
</parameter_description>
</parameter>
<parameter name="angle_tilt_y">
<parameter_description> tilt of the elipse in degrees, as #ClutterFixed, around the center in Y axis
</parameter_description>
</parameter>
<parameter name="angle_tilt_z">
<parameter_description> tilt of the elipse in degrees, as #ClutterFixed, around the center in Z axis
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_rectangle_new_with_color">
<description>
Creates a new #ClutterActor with a rectangular shape
and of the given @color.


</description>
<parameters>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return> a new #ClutterActor
</return>
</function>

<function name="clutter_win32_set_stage_foreign">
<description>
Target the #ClutterStage to use an existing external window handle.


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="hwnd">
<parameter_description> an existing window handle
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if foreign window is valid

Since: 0.8
</return>
</function>

<function name="clutter_label_get_line_wrap_mode">
<description>
Return value: %TRUE if the lines of the label are automatically wrapped.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #ClutterLabel
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the lines of the label are automatically wrapped.

Since: 0.2
</return>
</function>

<function name="clutter_container_remove">
<description>
Removes a %NULL terminated list of #ClutterActor&amp;lt;!-- --&amp;gt;s from
@container. Each actor should be unparented, so if you want to keep it
around you must hold a reference to it yourself, using g_object_ref().
Each time an actor is removed, the &quot;actor-removed&quot; signal is
emitted by @container.

Since: 0.4

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="first_actor">
<parameter_description> first #ClutterActor to remove
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a %NULL-terminated list of actors to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_set_use_mipmapped_text">
<description>
Sets whether subsequent text rendering operations will use
mipmapped textures or not. Using mipmapped textures will improve
the quality for scaled down text but will use more texture memory.

Since: 0.8

</description>
<parameters>
<parameter name="value">
<parameter_description> %TRUE to enable mipmapping or %FALSE to disable.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_entry_set_visibility">
<description>
Sets whether the contents of the entry are visible or not. When visibility
is set to %FALSE, characters are displayed as the invisible char, and will
also appear that way when the text in the entry widget is copied elsewhere.

The default invisible char is the asterisk &apos;*&apos;, but it can be changed with
clutter_entry_set_invisible_char().

Since: 0.4

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
<parameter name="visible">
<parameter_description> %TRUE if the contents of the entry are displayed as plaintext.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_script_ensure_objects">
<description>
Ensure that every object defined inside @script is correctly
constructed. You should rarely need to use this function.

Since: 0.6

</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_set_object">
<description>
Sets @objects inside @node. The reference count of @object is increased.

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_clip">
<description>
Gets the clip area for @self, in pixels.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="xoff">
<parameter_description> return location for the X offset of the clip rectangle, or %NULL
</parameter_description>
</parameter>
<parameter name="yoff">
<parameter_description> return location for the Y offset of the clip rectangle, or %NULL
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for the width of the clip rectangle, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for the height of the clip rectangle, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_rotate_set_center">
<description>
Sets the center of rotation. The coordinates are relative to the plane
normal to the rotation axis set with clutter_behaviour_rotate_set_axis().

Since: 0.4

</description>
<parameters>
<parameter name="rotate">
<parameter_description> a #ClutterBehaviourRotate
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X axis center of rotation
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y axis center of rotation
</parameter_description>
</parameter>
<parameter name="z">
<parameter_description> Z axis center of rotation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_rotate_new">
<description>
Creates a new #ClutterBehaviourRotate. This behaviour will rotate actors
bound to it on @axis, following @direction, between @angle_start and
@angle_end. Angles &amp;gt;= 360 degrees will be clamped to the canonical interval
&amp;lt;0, 360), if angle_start == angle_end, the behaviour will carry out a
single rotation of 360 degrees.


</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha, or %NULL
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> the rotation axis
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> the rotation direction
</parameter_description>
</parameter>
<parameter name="angle_start">
<parameter_description> the starting angle in degrees, between 0 and 360.
</parameter_description>
</parameter>
<parameter name="angle_end">
<parameter_description> the final angle in degrees, between 0 and 360.
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterBehaviourRotate.

Since: 0.4
</return>
</function>

<function name="clutter_behaviour_path_append_knot">
<description>
Appends a #ClutterKnot to the path

Since: 0.2

</description>
<parameters>
<parameter name="pathb">
<parameter_description> a #ClutterBehvaiourPath
</parameter_description>
</parameter>
<parameter name="knot">
<parameter_description>  a #ClutterKnot to append.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_label_get_layout">
<description>
Gets the #PangoLayout used to display the label.
The layout is useful to e.g. convert text positions to
pixel positions.
The returned layout is owned by the label so need not be
freed by the caller.


</description>
<parameters>
<parameter name="label">
<parameter_description> a #ClutterLabel
</parameter_description>
</parameter>
</parameters>
<return> the #PangoLayout for this label

Since: 0.2
</return>
</function>

<function name="clutter_actor_set_parent">
<description>
Sets the parent of @self to @parent.  The opposite function is
clutter_actor_unparent().

This function should not be used by applications, but by custom
&apos;composite&apos; actor subclasses.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> A new #ClutterActor parent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="CLUTTER_ALPHA_SMOOTHSTEP_DEC">
<description>
Convenience symbol for clutter_smoothstep_dec_func().

Since: 0.4

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_win32_get_stage_window">
<description>
Gets the stage&apos;s window handle


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> An HWND for the stage window.

Since: 0.8
</return>
</function>

<function name="clutter_behaviour_is_applied">
<description>
Check if @behave applied to  @actor.


</description>
<parameters>
<parameter name="behave">
<parameter_description> a #ClutterBehaviour
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> TRUE if actor has behaviour. FALSE otherwise.

Since: 0.4
</return>
</function>

<function name="clutter_label_get_attributes">
<description>
Gets the attribute list that was set on the label using
clutter_label_set_attributes(), if any.


</description>
<parameters>
<parameter name="label">
<parameter_description> a #ClutterLabel
</parameter_description>
</parameter>
</parameters>
<return> the attribute list, or %NULL if none was set.

Since: 0.2
</return>
</function>

<function name="clutter_x11_remove_filter">
<description>
Removes the given filter function.

Since: 0.6

</description>
<parameters>
<parameter name="func">
<parameter_description> a filter function
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to be passed to the filter function, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_add_marker_at_frame">
<description>
Adds a named marker at @frame_num. Markers are unique string identifiers
for a specific frame. Once @timeline reaches @frame_num, it will emit
a ::marker-reached signal for each marker attached to that frame.

A marker can be removed with clutter_timeline_remove_marker(). The
timeline can be advanced to a marker using
clutter_timeline_advance_to_marker().

Since: 0.8

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="marker_name">
<parameter_description> the unique name for this marker
</parameter_description>
</parameter>
<parameter name="frame_num">
<parameter_description> the marker&apos;s frame
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_allocate">
<description>
Called by the parent of an actor to assign the actor its size.
Should never be called by applications (except when implementing
a container or layout manager).

Actors can know from their allocation box whether they have moved
with respect to their parent actor. The absolute_origin_changed
parameter additionally indicates whether the parent has moved with
respect to the stage, for example because a grandparent&apos;s origin
has moved.

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="box">
<parameter_description> new allocation of the actor, in parent-relative coordinates
</parameter_description>
</parameter>
<parameter name="absolute_origin_changed">
<parameter_description> whether the position of the parent has
changed in stage coordinates
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_array_get_length">
<description>
Retrieves the length of a #JsonArray


</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
</parameters>
<return> the length of the array
</return>
</function>

<function name="clutter_label_set_alignment">
<description>
Sets text alignment of the label.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #ClutterLabel
</parameter_description>
</parameter>
<parameter name="alignment">
<parameter_description> A #PangoAlignment
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_path_insert_knot">
<description>
Inserts a #ClutterKnot in the path at specified position. Values greater
than total number of knots will append the knot at the end of path.

Since: 0.2

</description>
<parameters>
<parameter name="pathb">
<parameter_description> a #ClutterBehvaiourPath
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> position in path to insert knot.
</parameter_description>
</parameter>
<parameter name="knot">
<parameter_description>  a #ClutterKnot to append.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_bspline_append_knot">
<description>
Appends a #ClutterKnot control point to the bezier spline bs. Note, that
since a bezier is defined by 4 control points, the point gets stored in
a temporary chache, and only when there are enough control points to
create a new bezier curve will the bspline extended.

Since: 0.4

</description>
<parameters>
<parameter name="bs">
<parameter_description>      a #ClutterBehaviourBspline
</parameter_description>
</parameter>
<parameter name="knot">
<parameter_description>    a #ClutterKnot control point to append.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_scale_get_bounds">
<description>
Retrieves the bounds used by scale behaviour.

Since: 0.4

</description>
<parameters>
<parameter name="scale">
<parameter_description> a #ClutterBehaviourScale
</parameter_description>
</parameter>
<parameter name="x_scale_start">
<parameter_description> return location for the initial scale factor on the X
axis, or %NULL
</parameter_description>
</parameter>
<parameter name="y_scale_start">
<parameter_description> return location for the initial scale factor on the Y
axis, or %NULL
</parameter_description>
</parameter>
<parameter name="x_scale_end">
<parameter_description> return location for the final scale factor on the X axis,
or %NULL
</parameter_description>
</parameter>
<parameter name="y_scale_end">
<parameter_description> return location for the final scale factor on the Y axis,
or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_box_get_from_vertices">
<description>
Calculates the bounding box represented by the four vertices; for details
of the vertex array see clutter_actor_get_abs_allocation_vertices().

Since: 0.6

</description>
<parameters>
<parameter name="vtx">
<parameter_description> array of four #ClutterVertex
</parameter_description>
</parameter>
<parameter name="box">
<parameter_description> return location for a #ClutterActorBox
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_get_n_frames">
<description>
Request the total number of frames for the #ClutterTimeline.


</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> Number of frames for this #ClutterTimeline.
</return>
</function>

<function name="clutter_keysym_to_unicode">
<description>
Convert from a Clutter key symbol to the corresponding ISO10646 (Unicode)
character.


</description>
<parameters>
<parameter name="keyval">
<parameter_description> a clutter key symbol 
</parameter_description>
</parameter>
</parameters>
<return> the corresponding unicode character, or 0 if there
is no corresponding character.
</return>
</function>

<function name="clutter_x11_trap_x_errors">
<description>
Traps every X error until clutter_x11_untrap_x_errors() is called.

Since: 0.6

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_threads_add_idle_full">
<description>
Adds a function to be called whenever there are no higher priority
events pending.  If the function returns %FALSE it is automatically
removed from the list of event sources and will not be called again.

This variant of g_idle_add_full() calls @function with the Clutter lock
held. It can be thought of a MT-safe version for Clutter actors for the
following use case, where you have to worry about idle_callback()
running in thread A and accessing @self after it has been finalized
in thread B:

&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
static gboolean
idle_callback (gpointer data)
{
// clutter_threads_enter(); would be needed for g_idle_add()

SomeActor *self = data;
/&amp;lt;!-- --&amp;gt;* do stuff with self *&amp;lt;!-- --&amp;gt;/

self-&amp;gt;idle_id = 0;

// clutter_threads_leave(); would be needed for g_idle_add()
return FALSE;
}
static void
some_actor_do_stuff_later (SomeActor *self)
{
self-&amp;gt;idle_id = clutter_threads_add_idle (idle_callback, self)
// using g_idle_add() here would require thread protection in the callback
}

static void
some_actor_finalize (GObject *object)
{
SomeActor *self = SOME_ACTOR (object);
if (self-&amp;gt;idle_id)
g_source_remove (self-&amp;gt;idle_id);
G_OBJECT_CLASS (parent_class)-&amp;gt;finalize (object);
}
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;


</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the timeout source. Typically this will be in the
range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> functio to call when the idle source is removed
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

Since: 0.4
</return>
</function>

<function name="clutter_container_get_children">
<description>
Retrieves all the children of @container.


</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
</parameters>
<return> a list of #ClutterActor&amp;lt;!-- --&amp;gt;s. Use g_list_free()
on the returned list when done.

Since: 0.4
</return>
</function>

<function name="clutter_actor_get_heightu">
<description>
Retrieves the height of a #ClutterActor, in #ClutterUnit&amp;lt;!-- --&amp;gt;s.

This function tries to &quot;do what you mean&quot;, by returning the correct
value depending on the actor&apos;s state.

If the actor has a valid allocation, this function will return the
height of the allocation box.

If the actor does not have a valid allocation, this function will
return the actor&apos;s natural height request.

If you care whether you get the height request or the allocation,
you should probably call a different function like
clutter_actor_get_allocation_coords() to retrieve the allocation
or clutter_actor_get_preferred_height() to retrieve the
preferred height.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the height of the actor, in #ClutterUnit&amp;lt;!-- --&amp;gt;s

since: 0.6
</return>
</function>

<function name="json_object_has_member">
<description>
Checks whether @object has a member named @member_name.


</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of a JSON object member
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the JSON object has the requested member
</return>
</function>

<function name="clutter_model_get_sorting_column">
<description>
Retrieves the number of column used for sorting the @model.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
</parameters>
<return> a column number, or -1 if the model is not sorted

Since: 0.6
</return>
</function>

<function name="clutter_media_get_buffer_percent">
<description>
Retrieves the amount of the stream that is buffered.


</description>
<parameters>
<parameter name="media">
<parameter_description> A #ClutterMedia object
</parameter_description>
</parameter>
</parameters>
<return> percentage value
</return>
</function>

<function name="clutter_color_to_hls">
<description>
Converts @src to the HLS format. Returned HLS values are from interval
0 .. 255.

</description>
<parameters>
<parameter name="src">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="hue">
<parameter_description> return location for the hue value or %NULL
</parameter_description>
</parameter>
<parameter name="luminance">
<parameter_description> return location for the luminance value or %NULL
</parameter_description>
</parameter>
<parameter name="saturation">
<parameter_description> return location for the saturation value or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="JsonParser">
<description>
The ::error signal is emitted each time a #JsonParser encounters
an error in a JSON stream.

</description>
<parameters>
<parameter name="parser">
<parameter_description> the parser instance that received the signal
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a pointer to the #GError
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_gid">
<description>
Retrieves the unique id for @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> Globally unique value for this object instance.

Since: 0.6
</return>
</function>

<function name="clutter_score_rewind">
<description>
Rewinds a #ClutterScore to its initial state.

Since: 0.6

</description>
<parameters>
<parameter name="score">
<parameter_description> A #ClutterScore
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_media_set_filename">
<description>
Sets the filename of the media source.

</description>
<parameters>
<parameter name="media">
<parameter_description> A #ClutterMedia object
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> A filename to media file.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="CLUTTER_ALPHA_SQUARE">
<description>
Convenience symbol for clutter_square_func().

Since: 0.4

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_get_actor_by_gid">
<description>
Retrieves the #ClutterActor with @id.


</description>
<parameters>
<parameter name="id">
<parameter_description> a #ClutterActor ID.
</parameter_description>
</parameter>
</parameters>
<return> the actor with the passed id or %NULL. The returned
actor does not have its reference count increased.

Since: 0.6
</return>
</function>

<function name="clutter_event_get_coords">
<description>
Retrieves the coordinates of @event and puts them into @x and @y.

Since: 0.4

</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_entry_insert_unichar">
<description>
Insert a character to the right of the current position of the cursor,
and updates the position of the cursor.

Since: 0.4

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
<parameter name="wc">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_lower_bottom">
<description>
Lowers @self to the bottom.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_score_new">
<description>
Creates a new #ClutterScore. A #ClutterScore is an object that can
hold multiple #ClutterTimeline&amp;lt;!-- --&amp;gt;s in a sequential order.


</description>
<parameters>
</parameters>
<return> the newly created #ClutterScore. Use g_object_unref()
when done.

Since: 0.6
</return>
</function>

<function name="clutter_timeline_set_n_frames">
<description>
Sets the total number of frames for @timeline

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="n_frames">
<parameter_description> the number of frames
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_sqrti">
<description>
Very fast fixed point implementation of square root for integers.

This function is at least 6x faster than clib sqrt() on x86, and (this is
not a typo!) about 500x faster on ARM without FPU. It&apos;s error is &amp;lt; 5%
for arguments &amp;lt; #CLUTTER_SQRTI_ARG_5_PERCENT and &amp;lt; 10% for arguments &amp;lt;
#CLUTTER_SQRTI_ARG_10_PERCENT. The maximum argument that can be passed to
this function is CLUTTER_SQRTI_ARG_MAX.


</description>
<parameters>
<parameter name="x">
<parameter_description> integer value
</parameter_description>
</parameter>
</parameters>
<return> integer square root.


Since: 0.2
</return>
</function>

<function name="json_object_ref">
<description>
Increase by one the reference count of a #JsonObject.


</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
</parameters>
<return> the passed #JsonObject, with the reference count
increased by one.
</return>
</function>

<function name="clutter_child_meta_get_actor">
<description>
Retrieves the actor wrapped by @data


</description>
<parameters>
<parameter name="data">
<parameter_description> a #ClutterChildMeta
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterActor

Since: 0.8
</return>
</function>

<function name="clutter_timeline_get_speed">
<description>
Gets the frames per second played by @timeline


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> the number of frames per second.
</return>
</function>

<function name="clutter_sqrtx">
<description>
A fixed point implementation of squre root


</description>
<parameters>
<parameter name="x">
<parameter_description> a #ClutterFixed
</parameter_description>
</parameter>
</parameters>
<return> #ClutterFixed square root.

Since: 0.2
</return>
</function>

<function name="clutter_container_child_get">
<description>
Gets @container specific properties of an actor.

In general, a copy is made of the property contents and the caller is
responsible for freeing the memory in the appropriate manner for the type, for
instance by calling g_free() or g_object_unref(). 

Since: 0.8

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor that is a child of @container.
</parameter_description>
</parameter>
<parameter name="first_prop">
<parameter_description> name of the first property to be set.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> value for the first property, followed optionally by more name/value
pairs terminated with NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_rotate_set_axis">
<description>
Sets the axis used by the rotate behaviour.

Since: 0.4

</description>
<parameters>
<parameter name="rotate">
<parameter_description> a #ClutterBehaviourRotate
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> a #ClutterRotateAxis
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="ClutterStage">
<description>
The ::activate signal is emitted when the stage loses key focus
from the underlying window system.

Since: 0.6

</description>
<parameters>
<parameter name="stage">
<parameter_description> the stage which was deactivated
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="SECTION">
<description>
#ClutterMedia is an interface  for controlling playback of media data.

</description>
<parameters>
<parameter name="short_description">
<parameter_description> An interface for controlling playback of media data.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_smoothstep_dec_func">
<description>
Convenience alpha function for a downward smoothstep curve. You can use
this function as the alpha function for clutter_alpha_set_func().


</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="dummy">
<parameter_description> unused
</parameter_description>
</parameter>
</parameters>
<return> an alpha value

Since: 0.4
</return>
</function>

<function name="clutter_score_start">
<description>
Starts the score.

Since: 0.6

</description>
<parameters>
<parameter name="score">
<parameter_description> A #ClutterScore
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_rectangle_get_border_width">
<description>
Gets the width (in pixels) of the border used by @rectangle


</description>
<parameters>
<parameter name="rectangle">
<parameter_description> a #ClutterRectangle
</parameter_description>
</parameter>
</parameters>
<return> the border&apos;s width

Since: 0.2
</return>
</function>

<function name="clutter_smoothstep_inc_func">
<description>
Convenience alpha function for a smoothstep curve. You can use this
function as the alpha function for clutter_alpha_set_func().


</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="dummy">
<parameter_description> unused
</parameter_description>
</parameter>
</parameters>
<return> an alpha value

Since: 0.4
</return>
</function>

<function name="clutter_actor_lower">
<description>
Puts @self below @above.
Both actors must have the same parent.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="above">
<parameter_description> A #ClutterActor to lower below
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_anchor_point">
<description>
Gets the current anchor point of the @actor in pixels.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="anchor_x">
<parameter_description> return location for the X coordinate of the anchor point
</parameter_description>
</parameter>
<parameter name="anchor_y">
<parameter_description> return location for the y coordinate of the anchor point
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_rotate_set_direction">
<description>
Sets the rotation direction used by the rotate behaviour.

Since: 0.4

</description>
<parameters>
<parameter name="rotate">
<parameter_description> a #ClutterBehaviourRotate
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> the rotation direction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_get_string">
<description>
Gets the string value stored inside a #JsonNode


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode of type %JSON_NODE_VALUE
</parameter_description>
</parameter>
</parameters>
<return> a string value.
</return>
</function>

<function name="clutter_color_copy">
<description>
Makes a copy of the color structure.  The result must be
freed using clutter_color_free().


</description>
<parameters>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return> an allocated copy of @color.

Since: 0.2
</return>
</function>

<function name="clutter_x11_texture_pixmap_update_area">
<description>
Performs the actual binding of texture to the current content of
the pixmap. Can be called to update the texture if the pixmap
content has changed.

Since: 0.8

</description>
<parameters>
<parameter name="texture">
<parameter_description> The texture whose content shall be updated.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the X coordinate of the area to update
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the Y coordinate of the area to update
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the area to update
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the area to update
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_generator_set_root">
<description>
Sets @node as the root of the JSON data stream to be serialized by
the #JsonGenerator.

</description>
<parameters>
<parameter name="generator">
<parameter_description> a #JsonGenerator
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_group_add_many_valist">
<description>
Similar to clutter_group_add_many() but using a va_list.  Use this
function inside bindings.

@Deprecated: 0.4: This function is obsolete, use
clutter_container_add_valist() instead.

</description>
<parameters>
<parameter name="group">
<parameter_description> a #ClutterGroup
</parameter_description>
</parameter>
<parameter name="first_actor">
<parameter_description> the #ClutterActor actor to add to the group
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> the actors to be added
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_label_new">
<description>
Creates a new, empty #ClutterLabel.


</description>
<parameters>
</parameters>
<return> the newly created #ClutterLabel
</return>
</function>

<function name="clutter_event_put">
<description>
Puts a copy of the event on the back of the event queue. The event will have
the #CLUTTER_EVENT_FLAG_SYNTHETIC flag set. If the source is set event
signals will be emitted for this source and capture/bubbling for it&apos;s
ancestors. If the source is not set it will be generated by picking or use
the actor that currently has keyboard focus.

Since: 0.6

</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_egl_display">
<description>
Gets the current EGLDisplay.


</description>
<parameters>
</parameters>
<return> an EGLDisplay

Since: 0.4
</return>
</function>

<function name="clutter_actor_get_fixed_position_set">
<description>
Checks whether an actor has a fixed position set (and will thus be
unaffected by any layout manager).


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the fixed position is set on the actor

Since: 0.8
</return>
</function>

<function name="clutter_entry_get_visible_cursor">
<description>
Return value: whether the input cursor is visible

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
</parameters>
<return> whether the input cursor is visible

Since: 0.4
</return>
</function>

<function name="clutter_model_remove">
<description>
Removes the row at the given position from the model.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> position of row to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_get_pointer_grab">
<description>
Queries the current pointer grab of clutter.


</description>
<parameters>
</parameters>
<return> the actor currently holding the pointer grab, or NULL if there is no grab.

Since: 0.6
</return>
</function>

<function name="clutter_behaviour_ellipse_set_angle_end">
<description>
Sets the angle at which movement ends; angles &amp;gt;= 360 degress get clamped
to the canonical interval &amp;lt;0, 360).

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="angle_end">
<parameter_description> angle at which movement ends in degrees, between 0 and 360.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_array_sized_new">
<description>
Creates a new #JsonArray with @n_elements slots already allocated.


</description>
<parameters>
<parameter name="n_elements">
<parameter_description> number of slots to pre-allocate
</parameter_description>
</parameter>
</parameters>
<return> the newly created #JsonArray
</return>
</function>

<function name="clutter_model_get_first_iter">
<description>
Retrieves a #ClutterModelIter representing the first row in @model.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
</parameters>
<return> A new #ClutterModelIter. Call g_object_unref() when
done using it

Since: 0.6
</return>
</function>

<function name="ClutterModel">
<description>
The ::filter-changed signal is emitted when a new filter has been applied

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> the #ClutterModel on which the signal is emitted   
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="ClutterBehaviourPath">
<description>
This signal is emitted each time a node defined inside the path
is reached.

Since: 0.2

</description>
<parameters>
<parameter name="pathb">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
<parameter name="knot">
<parameter_description> the #ClutterKnot reached
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_entry_insert_text">
<description>
Insert text at a specifc position.

A value of 0 indicates  that the text will be inserted before the first
character in the entry&apos;s text, and a value of -1 indicates that the text
will be inserted after the last character in the entry&apos;s text.

Since: 0.4

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to insert
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position at which to insert the text.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_grab_pointer">
<description>
Grabs pointer events, after the grab is done all pointer related events
(press, motion, release, enter, leave and scroll) are delivered to this
actor directly. The source set in the event will be the actor that would
have received the event if the pointer grab was not in effect.

Since: 0.6

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_depthu">
<description>
Sets the Z co-ordinate of @self to @depth in #ClutterUnit&amp;lt;!-- --&amp;gt;s, the
units of which are dependant on the perspective setup.

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="depth">
<parameter_description> Z co-ordinate, in #ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_fog">
<description>
Sets the GL fog settings used to create the depth cueing effect
on the @stage.

If the actors are all near the view point you will need a higher @density
and a smaller interval between @z_near and @z_far. On the other hand, if
actors are placed far away from the view point you will need a lower
@density but a bigger interval between @z_near and @z_far.

Since: 0.6

</description>
<parameters>
<parameter name="stage">
<parameter_description> the #ClutterStage
</parameter_description>
</parameter>
<parameter name="density">
<parameter_description> density of the intensity dampening
</parameter_description>
</parameter>
<parameter name="z_near">
<parameter_description> starting point of the depth cueing
</parameter_description>
</parameter>
<parameter name="z_far">
<parameter_description> ending point of the depth cueing
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_free">
<description>
Frees a color structure created with clutter_color_copy().

Since: 0.2

</description>
<parameters>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_texture_set_area_from_rgb_data">
<description>
Updates a sub-region of the pixel data in a #ClutterTexture.


</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterTexture
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> Image data in RGB type colorspace.
</parameter_description>
</parameter>
<parameter name="has_alpha">
<parameter_description> Set to TRUE if image data has an alpha channel.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate of upper left corner of region to update.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate of upper left corner of region to update.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width in pixels of region to update.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height in pixels of region to update.
</parameter_description>
</parameter>
<parameter name="rowstride">
<parameter_description> Distance in bytes between row starts on source buffer.
</parameter_description>
</parameter>
<parameter name="bpp">
<parameter_description> bytes per pixel ( Currently only 4 supported )
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #ClutterTextureFlags
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on failure.

Since 0.6.
</return>
</function>

<function name="clutter_entry_handle_key_event">
<description>
This function will handle a #ClutterKeyEvent, like those returned in a
key-press/release-event, and will translate it for the @entry. This includes
non-alphanumeric keys, such as the arrows keys, which will move the
input cursor. You should use this function inside a handler for the
ClutterStage::key-press-event or ClutterStage::key-release-event.

Since: 0.4

Deprecated: 0.8: The key events will automatically be handled when
giving the key focus to an entry using clutter_stage_set_key_focus().

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
<parameter name="kev">
<parameter_description> a #ClutterKeyEvent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_generator_new">
<description>
Creates a new #JsonGenerator. You can use this object to generate a
JSON data stream starting from a data object model composed by
#JsonNode&amp;lt;!-- --&amp;gt;s.


</description>
<parameters>
</parameters>
<return> the newly created #JsonGenerator instance
</return>
</function>

<function name="clutter_shader_set_is_enabled">
<description>
Enables a shader. This function will attempt to compile and link
the shader, if it isn&apos;t already.

When @enabled is %FALSE the default state of the GL pipeline will be
used instead.

Since: 0.6

</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader
</parameter_description>
</parameter>
<parameter name="enabled">
<parameter_description> The new state of the shader.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_scale_newx">
<description>
A fixed point implementation of clutter_behaviour_scale_new()


</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="x_scale_start">
<parameter_description> initial scale factor on the X axis
</parameter_description>
</parameter>
<parameter name="y_scale_start">
<parameter_description> initial scale factor on the Y axis
</parameter_description>
</parameter>
<parameter name="x_scale_end">
<parameter_description> final scale factor on the X axis
</parameter_description>
</parameter>
<parameter name="y_scale_end">
<parameter_description> final scale factor on the Y axis
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterBehaviourScale

Since: 0.2
</return>
</function>

<function name="clutter_glx_texture_pixmap_using_extension">
<description>

</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterGLXTexturePixmap
</parameter_description>
</parameter>
</parameters>
<return> A boolean indicating if the texture is using the  
GLX_EXT_texture_from_pixmap OpenGL extension or falling back to
slower software mechanism.

Since: 0.8
</return>
</function>

<function name="clutter_alpha_set_func">
<description>
Sets the #ClutterAlphaFunc function used to compute
the alpha value at each frame of the #ClutterTimeline
bound to @alpha.

Since: 0.2

</description>
<parameters>
<parameter name="alpha">
<parameter_description> A #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> A #ClutterAlphaAlphaFunc
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to be passed to the alpha function, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> notify function used when disposing the alpha function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_remove_clip">
<description>
Removes clip area from @self.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_width">
<description>
Retrieves the width of a #ClutterActor.

This function tries to &quot;do what you mean&quot;, by returning the correct
value depending on the actor&apos;s state.

If the actor has a valid allocation, this function will return the
width of the allocation box.

If the actor does not have a valid allocation, this function will
return the actor&apos;s natural width request.

If you care whether you get the width request or the allocation,
you should probably call a different function like
clutter_actor_get_allocation_coords() to retrieve the allocation
or clutter_actor_get_preferred_width() to retrieve the preferred
width.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the width of the actor, in pixels
</return>
</function>

<function name="clutter_behaviour_depth_set_bounds">
<description>
Sets the boundaries of the @behaviour.

Since: 0.6

</description>
<parameters>
<parameter name="behaviour">
<parameter_description> a #ClutterBehaviourDepth
</parameter_description>
</parameter>
<parameter name="depth_start">
<parameter_description> initial value of the depth
</parameter_description>
</parameter>
<parameter name="depth_end">
<parameter_description> final value of the depth
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_path_remove_knot">
<description>
Removes a #ClutterKnot in the path at specified offset.

Since: 0.2

</description>
<parameters>
<parameter name="pathb">
<parameter_description> a #ClutterBehvaiourPath
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> position in path to remove knot.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_alpha_get_timeline">
<description>
Gets the #ClutterTimeline bound to @alpha.


</description>
<parameters>
<parameter name="alpha">
<parameter_description> A #ClutterAlpha
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterTimeline instance

Since: 0.2
</return>
</function>

<function name="clutter_behaviour_rotate_get_center">
<description>
Retrieves the center of rotation set using
clutter_behaviour_rotate_set_center().

Since: 0.4

</description>
<parameters>
<parameter name="rotate">
<parameter_description> a #ClutterBehaviourRotate
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X center of rotation
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y center of rotation
</parameter_description>
</parameter>
<parameter name="z">
<parameter_description> return location for the Z center of rotation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_get_progressx">
<description>
Fixed point version of clutter_timeline_get_progress().


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> the position of the timeline as a fixed point value

Since: 0.6
</return>
</function>

<function name="clutter_script_load_from_file">
<description>
Loads the definitions from @filename into @script and merges with
the currently loaded ones, if any.


</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> the full path to the definition file
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> on error, zero is returned and @error is set
accordingly. On success, the merge id for the UI definitions is
returned. You can use the merge id with clutter_script_unmerge().

Since: 0.6
</return>
</function>

<function name="clutter_model_prepend">
<description>
Creates and prepends a new row to the #ClutterModel, setting the row
values upon creation. For example, to prepend a new row where column 0
is type %G_TYPE_INT and column 1 is of type %G_TYPE_STRING:

&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
ClutterModel *model;
model = clutter_model_default_new (2,
G_TYPE_INT,    &quot;Score&quot;,
G_TYPE_STRING, &quot;Team&quot;);
clutter_model_prepend (model, 0, 42, 1, &quot;Team #1&quot;, -1);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> pairs of column number and value, terminated with -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_untrap_x_errors">
<description>
Removes the X error trap and returns the current status.


</description>
<parameters>
</parameters>
<return> the trapped error code, or 0 for success

Since: 0.4
</return>
</function>

<function name="clutter_threads_add_idle">
<description>
Simple wrapper around clutter_threads_add_idle_full()


</description>
<parameters>
<parameter name="func">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

Since: 0.4
</return>
</function>

<function name="clutter_actor_get_allocation_box">
<description>
Gets the layout box an actor has been assigned. The allocation can
only be assumed valid inside a paint() method; anywhere else, it
may be out-of-date.

An allocation does not incorporate the actor&apos;s scale or anchor point;
those transformations do not affect layout, only rendering.

&amp;lt;note&amp;gt;Do not call any of the clutter_actor_get_allocation_*() family
of functions inside the implementation of the get_preferred_width()
or get_preferred_height() virtual functions.&amp;lt;/note&amp;gt;

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="box">
<parameter_description> the function fills this in with the actor&apos;s allocation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_label_new_full">
<description>
Creates a new #ClutterLabel displaying @text with @color 
using @font_name.


</description>
<parameters>
<parameter name="font_name">
<parameter_description> the name (and size) of the font to be used
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to be displayed
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> #ClutterColor for text
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterLabel
</return>
</function>

<function name="clutter_threads_add_frame_source_full">
<description>
Sets a function to be called at regular intervals holding the Clutter lock,
with the given priority.  The function is called repeatedly until it
Return value: the ID (greater than 0) of the event source.

</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the frame source. Typically this will be in the
range between #G_PRIORITY_DEFAULT and #G_PRIORITY_HIGH.
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> the time between calls to the function, in milliseconds
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to call when the timeout source is removed
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

Since: 0.8
</return>
</function>

<function name="clutter_event_type">
<description>
Retrieves the type of the event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterEventType
</return>
</function>

<function name="json_array_ref">
<description>
Increase by one the reference count of a #JsonArray.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
</parameters>
<return> the passed #JsonArray, with the reference count
increased by one.
</return>
</function>

<function name="clutter_media_get_position">
<description>
Retrieves the position of @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> A #ClutterMedia object
</parameter_description>
</parameter>
</parameters>
<return> The playback position.
</return>
</function>

<function name="clutter_behaviour_ellipse_set_angle_startx">
<description>
Sets the angle at which movement starts; angles &amp;gt;= 360 degress get clamped
to the canonical interval &amp;lt;0, 360).

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="angle_start">
<parameter_description> An angle, as #ClutterFixed, at which movement starts, in
degrees, between 0 and 360.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_shader_get_vertex_source">
<description>
Query the current GLSL vertex source set on @shader.


</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader
</parameter_description>
</parameter>
</parameters>
<return> the source of the vertex shader for this
ClutterShader object or %NULL. The returned string is owned by the
shader object and should never be modified or freed

Since: 0.6
</return>
</function>

<function name="clutter_timeline_rewind">
<description>
Rewinds #ClutterTimeline to the first frame if its direction is
CLUTTER_TIMELINE_FORWARD and the last frame if it is
CLUTTER_TIMELINE_BACKWARD.

</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_script_new">
<description>
Creates a new #ClutterScript instance. #ClutterScript can be used
to load objects definitions for scenegraph elements, like actors,
or behavioural elements, like behaviours and timelines. The
definitions must be encoded using the JavaScript Object Notation (JSON)
language.


</description>
<parameters>
</parameters>
<return> the newly created #ClutterScript instance. Use
g_object_unref() when done.

Since: 0.6
</return>
</function>

<function name="clutter_model_get_n_rows">
<description>
Retrieves the number of rows inside @model.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
</parameters>
<return> The length of the @model. If there is a filter set, then
the length of the filtered @model is returned.

Since: 0.6
</return>
</function>

<function name="clutter_behaviour_bspline_set_origin">
<description>
Sets the origin of the bezier to the point represented by knot. (Initially
the origin of a bspline is given by the position of the first control point
of the first bezier curve.)

Since: 0.4

</description>
<parameters>
<parameter name="bs">
<parameter_description>   a #ClutterBehaviourBspline
</parameter_description>
</parameter>
<parameter name="knot">
<parameter_description> a #ClutterKnot origin for the bezier
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_clipu">
<description>
Unit-based variant of clutter_actor_get_clip().

Gets the clip area for @self, in #ClutterUnit&amp;lt;!-- --&amp;gt;s.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="xoff">
<parameter_description> return location for the X offset of the clip rectangle, or %NULL
</parameter_description>
</parameter>
<parameter name="yoff">
<parameter_description> return location for the Y offset of the clip rectangle, or %NULL
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for the width of the clip rectangle, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for the height of the clip rectangle, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_ellipse_get_angle_startx">
<description>
Gets the angle at which movements starts.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
</parameters>
<return> angle, as #ClutterFixed, in degrees.

Since: 0.6
</return>
</function>

<function name="clutter_container_class_list_child_properties">
<description>
Return value: an array of #GParamSpec&amp;lt;!-- --&amp;gt;s which should be freed

</description>
<parameters>
<parameter name="klass">
<parameter_description> a #GObjectClass implementing the #ClutterContainer interface.
</parameter_description>
</parameter>
<parameter name="n_properties">
<parameter_description> return location for length of returned array.
</parameter_description>
</parameter>
</parameters>
<return> an array of #GParamSpec&amp;lt;!-- --&amp;gt;s which should be freed
after use.

Since: 0.8
</return>
</function>

<function name="clutter_actor_get_geometry">
<description>
Gets the size and position of an actor relative to its parent
actor. This is the same as calling clutter_actor_get_position() and
clutter_actor_get_size(). It tries to &quot;do what you mean&quot; and get the
requested size and position if the actor&apos;s allocation is invalid.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="geometry">
<parameter_description> A location to store actors #ClutterGeometry
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="ClutterActor">
<description>
The ::unrealize signal is emitted each time an actor is being
unrealized.

Since: 0.8

</description>
<parameters>
<parameter name="actor">
<parameter_description> the #ClutterActor that received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_ellipse_set_width">
<description>
Sets the width of the elliptical path.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the ellipse
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_yu">
<description>
Retrieves the Y coordinate of a #ClutterActor, in #ClutterUnit&amp;lt;!-- --&amp;gt;s.

This function tries to &quot;do what you mean&quot;, by returning the
correct value depending on the actor&apos;s state.

If the actor has a valid allocation, this function will return
the Y coordinate of the origin of the allocation box.

If the actor has any fixed coordinate set using clutter_actor_set_y(),
clutter_actor_set_position() or clutter_actor_set_geometry(), this
function will return that coordinate.

If both the allocation and a fixed position are missing, this function
will return 0.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the Y coordinate, in #ClutterUnit&amp;lt;!-- --&amp;gt;s, ignoring
any transformation (i.e. scaling, rotation)

Since: 0.6
</return>
</function>

<function name="clutter_stage_get_key_focus">
<description>
Retrieves the actor that is currently under key focus.


</description>
<parameters>
<parameter name="stage">
<parameter_description> the #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> the actor with key focus, or the stage

Since: 0.6
</return>
</function>

<function name="clutter_get_motion_events_frequency">
<description>
Retrieves the number of motion events per second that are delivered
to the stage.

See clutter_set_motion_events_frequency().


</description>
<parameters>
</parameters>
<return> the number of motion events per second

Since: 0.6
</return>
</function>

<function name="clutter_sine_half_func">
<description>
Convenience alpha function for a sine wave over interval [0, pi].
You can use this function as the alpha function for
clutter_alpha_set_func().


</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="dummy">
<parameter_description> unused argument
</parameter_description>
</parameter>
</parameters>
<return> an alpha value.

Since: 0.4
</return>
</function>

<function name="clutter_shader_compile">
<description>
Compiles and links GLSL sources set for vertex and fragment shaders for
a #ClutterShader. If the compilation fails and a #GError return location is
provided the error will contain the errors from the compiler, if any.


</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> returns TRUE if the shader was succesfully compiled.

Since: 0.8
</return>
</function>

<function name="clutter_backend_set_resolution">
<description>
Sets the resolution for font handling on the screen. This is a
scale factor between points specified in a #PangoFontDescription
and cairo units. The default value is 96, meaning that a 10 point
font will be 13 units high. (10 * 96. / 72. = 13.3).

Applications should never need to call this function.

Since: 0.4

</description>
<parameters>
<parameter name="backend">
<parameter_description> a #ClutterBackend
</parameter_description>
</parameter>
<parameter name="dpi">
<parameter_description> the resolution in &quot;dots per inch&quot; (Physical inches aren&apos;t
actually involved; the terminology is conventional).
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_container_raise_child">
<description>
Raises @actor to @sibling level, in the depth ordering.

Since: 0.6

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the actor to raise
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> the sibling to raise to, or %NULL to raise to the top
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_widthu">
<description>
Retrieves the width of a #ClutterActor, in #ClutterUnit&amp;lt;!-- --&amp;gt;s.

This function tries to &quot;do what you mean&quot;, by returning the correct
value depending on the actor&apos;s state.

If the actor has a valid allocation, this function will return the
width of the allocation box.

If the actor does not have a valid allocation, this function will
return the actor&apos;s natural width request.

If you care whether you get the width request or the allocation,
you should probably call a different function like
clutter_actor_get_allocation_coords() to retrieve the allocation
or clutter_actor_get_preferred_width() to retrieve the preferred
width.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the width of the actor, in #ClutterUnit&amp;lt;!-- --&amp;gt;s

since: 0.6
</return>
</function>

<function name="json_node_take_array">
<description>
Sets @array into @node without increasing the #JsonArray reference count.

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_effect_scale">
<description>
Simple effect for scaling a single #ClutterActor.


</description>
<parameters>
<parameter name="template_">
<parameter_description> A #ClutterEffectTemplate
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> A #ClutterActor to apply the effect to.
</parameter_description>
</parameter>
<parameter name="x_scale_end">
<parameter_description> Final X axis scale factor to apply to actor
</parameter_description>
</parameter>
<parameter name="y_scale_end">
<parameter_description> Final Y axis scale factor to apply to actor
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> A #ClutterEffectCompleteFunc to call on effect
completion or NULL
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> Data to pass to supplied  #ClutterEffectCompleteFunc
or NULL
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterTimeline for the effect. Will be unreferenced by
the effect when completed.

Since: 0.6
</return>
</function>

<function name="clutter_alpha_set_closure">
<description>
Sets the #GClosure used to compute
the alpha value at each frame of the #ClutterTimeline
bound to @alpha.

Since: 0.8

</description>
<parameters>
<parameter name="alpha">
<parameter_description> A #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="closure">
<parameter_description> A #GClosure
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_texture_get_base_size">
<description>
Gets the size in pixels of the untransformed underlying texture pixbuf data.


</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterTexture
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description>   Pointer to gint to be populated with width value if non NULL.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description>  Pointer to gint to be populated with height value if non NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_bspline_join">
<description>
Joins a copy of bezier spline bs2 onto the end of bezier spline bs1; bs2 is
not modified.

Since: 0.4

</description>
<parameters>
<parameter name="bs1">
<parameter_description>      a #ClutterBehaviourBspline
</parameter_description>
</parameter>
<parameter name="bs2">
<parameter_description>      a #ClutterBehaviourBspline
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_backend_get_resolution">
<description>
Gets the resolution for font handling on the screen; see
clutter_backend_set_resolution() for full details.


</description>
<parameters>
<parameter name="backend">
<parameter_description> a #ClutterBackend
</parameter_description>
</parameter>
</parameters>
<return> the current resolution, or -1 if no resolution
has been set.

Since: 0.4
</return>
</function>

<function name="json_array_add_element">
<description>
Appends @node inside @array. The array will take ownership of the
#JsonNode.

</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_perspectivex">
<description>
Set the stage perspective. This is the fixed point version of 
clutter_stage_set_perspective().

</description>
<parameters>
<parameter name="stage">
<parameter_description> A #ClutterStage
</parameter_description>
</parameter>
<parameter name="perspective">
<parameter_description> A #ClutterPerspective
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_get_nth_actor">
<description>
Gets an actor the behaviour was applied to referenced by index num.


</description>
<parameters>
<parameter name="behave">
<parameter_description> a #ClutterBehaviour
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of an actor this behaviour is applied too. 
</parameter_description>
</parameter>
</parameters>
<return> A Clutter actor or NULL if @index_ is invalid.

Since: 0.2
</return>
</function>

<function name="ClutterBehaviourRotate">
<description>
The z center of rotation.

Since: 0.4

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_model_iter_get_valist">
<description>
See clutter_model_iter_get(). This version takes a va_list for language
bindings.

Since: 0.6

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> a list of column/return location pairs, terminated by -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_width">
<description>
Forces a width request on an actor, causing the actor&apos;s
normal width and height (if any) to be ignored. This function
sets both the minimum and natural size request of the actor.

since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Requested new width for the actor, in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_get_column_name">
<description>
Retrieves the name of the @column


</description>
<parameters>
<parameter name="model">
<parameter_description> #ClutterModel
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> the column number
</parameter_description>
</parameter>
</parameters>
<return> the name of the column. The model holds the returned
string, and it should not be modified or freed

Since: 0.6
</return>
</function>

<function name="clutter_do_event">
<description>
Processes an event. This function should never be called by applications.

Since: 0.4

</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_set_array">
<description>
Sets @array inside @node and increases the #JsonArray reference count

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_score_get_loop">
<description>
Gets whether @score is looping


</description>
<parameters>
<parameter name="score">
<parameter_description> a #ClutterScore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the score is looping

Since: 0.6
</return>
</function>

<function name="clutter_backend_get_double_click_time">
<description>
Gets the maximum time between two button press events, as set
by clutter_backend_set_double_click_time().


</description>
<parameters>
<parameter name="backend">
<parameter_description> a #ClutterBackend
</parameter_description>
</parameter>
</parameters>
<return> a time in milliseconds

Since: 0.4
</return>
</function>

<function name="clutter_actor_get_sizeu">
<description>
This function tries to &quot;do what you mean&quot; and return
the size an actor will have. If the actor has a valid
allocation, the allocation will be returned; otherwise,
the actors natural size request will be returned.

If you care whether you get the request vs. the allocation, you
should probably call a different function like
clutter_actor_get_allocation_coords() or
clutter_actor_get_preferred_width().

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for the width, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for the height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_key_event_unicode">
<description>
Retrieves the unicode value for the key that caused @keyev.


</description>
<parameters>
<parameter name="keyev">
<parameter_description> A #ClutterKeyEvent
</parameter_description>
</parameter>
</parameters>
<return> The unicode value representing the key
</return>
</function>

<function name="clutter_container_find_child_by_name">
<description>
Finds a child actor of a container by its name. Search recurses
into any child container.


</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="child_name">
<parameter_description> the name of the requested child.
</parameter_description>
</parameter>
</parameters>
<return> The child actor with the requested name, or %NULL if no
actor with that name was found.

Since: 0.6
</return>
</function>

<function name="clutter_sine_dec_func">
<description>
Convenience alpha function for a sine wave over interval [pi / 2, pi].
You can use this function as the alpha function for
clutter_alpha_set_func().


</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="dummy">
<parameter_description> unused argument
</parameter_description>
</parameter>
</parameters>
<return> an alpha value.

Since: 0.4
</return>
</function>

<function name="clutter_timeline_clone">
<description>
Create a new #ClutterTimeline instance which has property values
matching that of supplied timeline. The cloned timeline will not
be started and will not be positioned to the current position of
@timeline: you will have to start it with clutter_timeline_start().


</description>
<parameters>
<parameter name="timeline">
<parameter_description> #ClutterTimeline to duplicate.
</parameter_description>
</parameter>
</parameters>
<return> a new #ClutterTimeline, cloned from @timeline

Since 0.4
</return>
</function>

<function name="clutter_stage_manager_get_default_stage">
<description>
Return value: the default stage. The returned object is owned by

</description>
<parameters>
<parameter name="stage_manager">
<parameter_description> a #ClutterStageManager
</parameter_description>
</parameter>
</parameters>
<return> the default stage. The returned object is owned by
Clutter and you should never reference or unreference it

Since: 0.8
</return>
</function>

<function name="clutter_actor_set_position">
<description>
Sets the actor&apos;s fixed position in pixels relative to any parent
actor.

If a layout manager is in use, this position will override the
layout manager and force a fixed position.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> New left position of actor in pixels.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> New top position of actor in pixels.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_move_anchor_point_from_gravity">
<description>
Sets an anchor point on the actor based on the given gravity, adjusting the
actor postion so that its relative position within its parent remains
unchanged.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="gravity">
<parameter_description> #ClutterGravity.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_entry_new_with_text">
<description>
Creates a new #ClutterEntry displaying @text using @font_name.


</description>
<parameters>
<parameter name="font_name">
<parameter_description> the name (and size) of the font to be used
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to be displayed
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterEntry

Since: 0.4
</return>
</function>

<function name="clutter_stage_read_pixels">
<description>
Makes a screenshot of the stage in RGBA 8bit data, returns a
linear buffer with @width*4 as rowstride.
Gets a pixel based representation of the current rendered stage.


</description>
<parameters>
<parameter name="stage">
<parameter_description> A #ClutterStage
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate of the first pixel that is read from stage
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate of the first pixel that is read from stage
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width dimention of pixels to be read, or -1 for the
entire stage width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height dimention of pixels to be read, or -1 for the
entire stage height
</parameter_description>
</parameter>
</parameters>
<return> a pointer to newly allocated memory with the buffer
that should be free with g_free, or NULL if the read back failed.
</return>
</function>

<function name="clutter_behaviour_bspline_clear">
<description>
Empties a bspline.

Since: 0.4

</description>
<parameters>
<parameter name="bs">
<parameter_description>      a #ClutterBehaviourBspline
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_list_markers">
<description>
Retrieves the list of markers at @frame_num. If @frame_num is a
negative integer, all the markers attached to @timeline will be
returned.


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="frame_num">
<parameter_description> the frame number to check, or -1
</parameter_description>
</parameter>
<parameter name="n_markers">
<parameter_description> the number of markers returned
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated, %NULL terminated string array
containing the names of the markers. Use g_strfreev() when
done.

Since: 0.8
</return>
</function>

<function name="clutter_actor_set_anchor_point_from_gravity">
<description>
Sets an anchor point on the actor, based on the given gravity (this is a
convenience function wrapping clutter_actor_set_anchor_point()).

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="gravity">
<parameter_description> #ClutterGravity.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_position">
<description>
This function tries to &quot;do what you mean&quot; and tell you where the
actor is, prior to any transformations. Retrieves the fixed
position of an actor in pixels, if one has been set; otherwise, if
the allocation is valid, returns the actor&apos;s allocated position;
otherwise, returns 0,0.

The returned position is in pixels.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_set_value">
<description>
Sets @value inside @node. The passed #GValue is copied into the #JsonNode

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the #GValue to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_advance_to_marker">
<description>
Advances @timeline to the frame of the given @marker_name.

Since: 0.8

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="marker_name">
<parameter_description> the name of the marker
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_shadex">
<description>
Fixed point version of clutter_color_shade().

Shades @src by the factor of @shade and saves the modified
color into @dest.

Since: 0.2

</description>
<parameters>
<parameter name="src">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> return location for the shaded color
</parameter_description>
</parameter>
<parameter name="shade">
<parameter_description> #ClutterFixed the shade factor to apply
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_texture_new_from_file">
<description>
Creates a new ClutterTexture actor to display the image contained a
file. If the image failed to load then NULL is returned and @error
is set.


</description>
<parameters>
<parameter name="filename">
<parameter_description> The name of an image file to load.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return locatoin for an error.
</parameter_description>
</parameter>
</parameters>
<return> A newly created #ClutterTexture object or NULL on
error.

Since: 0.8
</return>
</function>

<function name="clutter_texture_get_filter_quality">
<description>
Gets the filter quality used when scaling a texture.


</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterTexture
</parameter_description>
</parameter>
</parameters>
<return> The filter quality value.

Since: 0.8
</return>
</function>

<function name="clutter_stage_get_perspective">
<description>
Retrieves the stage perspective.

Since: 0.4

</description>
<parameters>
<parameter name="stage">
<parameter_description> A #ClutterStage
</parameter_description>
</parameter>
<parameter name="fovy">
<parameter_description> return location for the field of view, in degrees, or %NULL
</parameter_description>
</parameter>
<parameter name="aspect">
<parameter_description> return location for the aspect ratio, or %NULL
</parameter_description>
</parameter>
<parameter name="z_near">
<parameter_description> return location for the distance of the viewer from the
near clipping plane, or %NULL
</parameter_description>
</parameter>
<parameter name="z_far">
<parameter_description> return location for the distance of the viewer from the
far clipping plane, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_handle_event">
<description>
This function processes a single X event; it can be used to hook
into external X event retrieval (for example that done by GDK).


</description>
<parameters>
<parameter name="xevent">
<parameter_description> pointer to XEvent structure
</parameter_description>
</parameter>
</parameters>
<return> #ClutterX11FilterReturn indicating what the caller
should do with the original event.

Since:  0.8
</return>
</function>

<function name="clutter_get_default_frame_rate">
<description>
Retrieves the default frame rate used when creating #ClutterTimeline&amp;lt;!--
--&amp;gt;s.

This value is also used to compute the default frequency of motion
events.


</description>
<parameters>
</parameters>
<return> the default frame rate

Since: 0.6
</return>
</function>

<function name="clutter_actor_set_xu">
<description>
Sets the actor&apos;s X coordinate, relative to its parent.
Overrides any layout manager and forces a fixed position for
the actor.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the actor&apos;s position on the X axis, in #ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_prependv">
<description>
Creates and prepends a new row to the #ClutterModel, setting the row
values for the given @columns upon creation.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="n_columns">
<parameter_description> the number of columns and values to set
</parameter_description>
</parameter>
<parameter name="columns">
<parameter_description> a vector containing the columns to set
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a vector containing the values for the cells
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_alpha_get_alpha">
<description>
Query the current alpha value.


</description>
<parameters>
<parameter name="alpha">
<parameter_description> A #ClutterAlpha
</parameter_description>
</parameter>
</parameters>
<return> The current alpha value for the alpha

Since: 0.2
</return>
</function>

<function name="json_object_get_member">
<description>
Retrieves the #JsonNode containing the value of @member_name inside
a #JsonObject.


</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of the JSON object member to access
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the node for the requested object
member, or %NULL
</return>
</function>

<function name="clutter_color_equal">
<description>
Compares two #ClutterColor&amp;lt;!-- --&amp;gt;s and checks if they are the same.


</description>
<parameters>
<parameter name="a">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the two colors are the same.

Since: 0.2
</return>
</function>

<function name="CLUTTER_ALPHA_SMOOTHSTEP_INC">
<description>
Convenience symbol for clutter_smoothstep_inc_func().

Since: 0.4

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_entry_delete_text">
<description>
Deletes a sequence of characters. The characters that are deleted are
those characters at positions from @start_pos up to, but not including,
@end_pos. If @end_pos is negative, then the characters deleted will be
those characters from @start_pos to the end of the text.

Since: 0.4

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
<parameter name="start_pos">
<parameter_description> the starting position.
</parameter_description>
</parameter>
<parameter name="end_pos">
<parameter_description> the end position.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_get_resolution">
<description>
Retrieves the resolution (in DPI) of the stage from the default
backend.


</description>
<parameters>
<parameter name="stage">
<parameter_description> the #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> the resolution of the stage

Since: 0.6
</return>
</function>

<function name="clutter_x11_get_stage_from_window">
<description>
Gets the stage for a particular X window.  


</description>
<parameters>
<parameter name="win">
<parameter_description> an X Window ID
</parameter_description>
</parameter>
</parameters>
<return> The stage or NULL if a stage does not exist for the window.

Since: 0.8
</return>
</function>

<function name="clutter_timeline_has_marker">
<description>
Checks whether @timeline has a marker set with the given name.


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="marker_name">
<parameter_description> the name of the marker
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the marker was found

Since: 0.8
</return>
</function>

<function name="clutter_actor_reparent">
<description>
This function resets the parent actor of @self.  It is
logically equivalent to calling clutter_actor_unparent()
and clutter_actor_set_parent().

Since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="new_parent">
<parameter_description> the new #ClutterActor parent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_scriptable_parse_custom_node">
<description>
Parses the passed JSON node. The implementation must set the type
of the passed #GValue pointer using g_value_init().


</description>
<parameters>
<parameter name="scriptable">
<parameter_description> a #ClutterScriptable
</parameter_description>
</parameter>
<parameter name="script">
<parameter_description> the #ClutterScript creating the scriptable instance
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the generic value to be set
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the node
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> the JSON node to be parsed
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the node was successfully parsed, %FALSE otherwise.

Since: 0.6
</return>
</function>

<function name="clutter_behaviour_actors_foreach">
<description>
Calls @func for every actor driven by @behave.

Since: 0.2

</description>
<parameters>
<parameter name="behave">
<parameter_description> a #ClutterBehaviour
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a function called for each actor
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> optional data to be passed to the function, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_entry_get_font_name">
<description>
Retrieves the font used by @entry.


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
</parameters>
<return> a string containing the font name, in a format
understandable by pango_font_description_from_string().  The
string is owned by #ClutterEntry and should not be modified
or freed.

Since: 0.4
</return>
</function>

<function name="clutter_model_get_iter_at_row">
<description>
Retrieves a #ClutterModelIter representing the row at the given index.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> position of the row to retrieve
</parameter_description>
</parameter>
</parameters>
<return> A new #ClutterModelIter, or %NULL if @row was out of bounds.
When done using the iterator object, call g_object_unref() to deallocate
its resources

Since: 0.6
</return>
</function>

<function name="clutter_event_copy">
<description>
Copies @event.


</description>
<parameters>
<parameter name="event">
<parameter_description> A #ClutterEvent.
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated #ClutterEvent
</return>
</function>

<function name="json_object_new">
<description>
Creates a new #JsonObject, an JSON object type representation.


</description>
<parameters>
</parameters>
<return> the newly created #JsonObject
</return>
</function>

<function name="clutter_model_get_last_iter">
<description>
Retrieves a #ClutterModelIter representing the last row in @model.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
</parameters>
<return> A new #ClutterModelIter. Call g_object_unref() when
done using it

Since: 0.6
</return>
</function>

<function name="clutter_container_remove_actor">
<description>
Removes @actor from @container. The actor should be unparented, so
if you want to keep it around you must hold a reference to it
yourself, using g_object_ref(). When the actor has been removed,
the &quot;actor-removed&quot; signal is emitted by @container.

Since: 0.4

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_rotationu">
<description>
Retrieves the angle and center of rotation on the given axis,
set using clutter_actor_set_rotation().

This function is the units based variant of clutter_actor_get_rotation().


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> the axis of rotation
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return value for the X coordinate of the center of rotation,
in #ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return value for the Y coordinate of the center of rotation,
in #ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
<parameter name="z">
<parameter_description> return value for the Z coordinate of the center of rotation,
in #ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
</parameters>
<return> the angle of rotation

Since: 0.8
</return>
</function>

<function name="clutter_model_iter_copy">
<description>
Copies the passed iterator.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
</parameters>
<return> a copy of the iterator, or %NULL

Since: 0.8
</return>
</function>

<function name="clutter_get_motion_events_enabled">
<description>
Gets whether the per-actor motion events are enabled.


</description>
<parameters>
</parameters>
<return> %TRUE if the motion events are enabled

Since: 0.6
</return>
</function>

<function name="clutter_timeline_set_duration">
<description>
Sets the duration of the timeline, in milliseconds. The speed
of the timeline depends on the ClutterTimeline:fps setting.

Since: 0.6

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="msecs">
<parameter_description> duration of the timeline in milliseconds
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_get_source">
<description>
Retrieves the source #ClutterActor the event originated from, or
NULL if the event has no source.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterActor

Since: 0.6
</return>
</function>

<function name="clutter_x11_get_default_display">
<description>
Retrieves the pointer to the default display.


</description>
<parameters>
</parameters>
<return> the default display

Since: 0.6
</return>
</function>

<function name="clutter_timeline_get_progress">
<description>
The position of the timeline in a [0, 1] interval.


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> the position of the timeline.

Since: 0.6
</return>
</function>

<function name="clutter_color_to_pixel">
<description>
Converts @src into a packed 32 bit integer, containing
all the four 8 bit channels used by #ClutterColor.


</description>
<parameters>
<parameter name="src">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return> a packed color
</return>
</function>

<function name="clutter_backend_get_double_click_distance">
<description>
Retrieves the distance used to verify a double click event


</description>
<parameters>
<parameter name="backend">
<parameter_description> a #ClutterBackend
</parameter_description>
</parameter>
</parameters>
<return> a distance, in pixels.

Since: 0.4
</return>
</function>

<function name="clutter_model_iter_get_model">
<description>
Retrieves a pointer to the #ClutterModel that this iter is part of.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a #ClutterModel.

Since: 0.6
</return>
</function>

<function name="clutter_entry_set_invisible_char">
<description>
Sets the character to use in place of the actual text when
clutter_entry_set_visibility() has been called to set text visibility
to %FALSE. i.e. this is the character used in &quot;password mode&quot; to show the
user how many characters have been typed. The default invisible char is an
asterisk (&apos;*&apos;). If you set the invisible char to 0, then the user will get
no feedback at all; there will be no text on the screen as they type.

Since: 0.4

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
<parameter name="wc">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_script_get_objects">
<description>
Retrieves a list of objects for the given names. After @script, object
names/return location pairs should be listed, with a %NULL pointer
ending the list, like:

&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
GObject *my_label, *a_button, *main_timeline;

clutter_script_get_objects (script,
&quot;my-label&quot;, &amp;amp;my_label,
&quot;a-button&quot;, &amp;amp;a_button,
&quot;main-timeline&quot;, &amp;amp;main_timeline,
NULL);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;

Note: This function does not increment the reference count of the
returned objects.


</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="first_name">
<parameter_description> the name of the first object to retrieve
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> return location for a #GObject, then additional names, ending
with %NULL
</parameter_description>
</parameter>
</parameters>
<return> the number of objects returned.

Since: 0.6
</return>
</function>

<function name="clutter_container_child_set">
<description>
Sets container specific properties on the child of a container.

Since: 0.8

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor that is a child of @container.
</parameter_description>
</parameter>
<parameter name="first_prop">
<parameter_description> name of the first property to be set.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> value for the first property, followed optionally by more name/value
pairs terminated with NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_get_default_screen">
<description>
Gets the number of the default X Screen object.


</description>
<parameters>
</parameters>
<return> the number of the default screen

Since: 0.6
</return>
</function>

<function name="clutter_atan2i">
<description>
Calculates the arctangent of @y / @x but uses the sign of both
arguments to return the angle in right quadrant.


</description>
<parameters>
<parameter name="y">
<parameter_description> Numerator of tangent
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> Denominator of tangent
</parameter_description>
</parameter>
</parameters>
<return> The arctangent of @y / @x
</return>
</function>

<function name="clutter_timeline_stop">
<description>
Stops the #ClutterTimeline and moves to frame 0

</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_rectangle_set_color">
<description>
Sets the color of @rectangle.

</description>
<parameters>
<parameter name="rectangle">
<parameter_description> a #ClutterRectangle
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_clear_glyph_cache">
<description>
Clears the internal cache of glyphs used by the Pango
renderer. This will free up some memory and GL texture
resources. The cache will be automatically refilled as more text is
drawn.

Since: 0.8

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_texture_get_max_tile_waste">
<description>
Gets the maximum waste that will be used when creating a texture or
-1 if slicing is disabled.


</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterTexture
</parameter_description>
</parameter>
</parameters>
<return> The maximum waste or -1 if the texture waste is
unlimited.

Since: 0.8
</return>
</function>

<function name="json_object_remove_member">
<description>
Removes @member_name from @object, freeing its allocated resources.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of the member to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_entry_new_full">
<description>
Creates a new #ClutterEntry displaying @text with @color
using @font_name.


</description>
<parameters>
<parameter name="font_name">
<parameter_description> the name (and size) of the font to be used
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to be displayed
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> #ClutterColor for text
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterEntry

Since: 0.4
</return>
</function>

<function name="clutter_actor_get_transformed_size">
<description>
Gets the absolute size of an actor taking into account
any scaling factors

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for the width, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for the height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_param_spec_unit">
<description>
Creates a #GParamSpec for properties using #ClutterUnit&amp;lt;!-- --&amp;gt;s.


</description>
<parameters>
<parameter name="name">
<parameter_description> name of the property
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> short name
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description (can be translatable)
</parameter_description>
</parameter>
<parameter name="minimum">
<parameter_description> lower boundary
</parameter_description>
</parameter>
<parameter name="maximum">
<parameter_description> higher boundary
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default value
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the param spec
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GParamSpec

Since: 0.8
</return>
</function>

<function name="clutter_threads_set_lock_functions">
<description>
Allows the application to replace the standard method that
Clutter uses to protect its data structures. Normally, Clutter
creates a single #GMutex that is locked by clutter_threads_enter(),
and released by clutter_threads_leave(); using this function an
application provides, instead, a function @enter_fn that is
called by clutter_threads_enter() and a function @leave_fn that is
called by clutter_threads_leave().

The functions must provide at least same locking functionality
as the default implementation, but can also do extra application
specific processing.

As an example, consider an application that has its own recursive
lock that when held, holds the Clutter lock as well. When Clutter
unlocks the Clutter lock when entering a recursive main loop, the
application must temporarily release its lock as well.

Most threaded Clutter apps won&apos;t need to use this method.

This method must be called before clutter_threads_init(), and cannot
be called multiple times.

Since: 0.4

</description>
<parameters>
<parameter name="enter_fn">
<parameter_description> function called when aquiring the Clutter main lock
</parameter_description>
</parameter>
<parameter name="leave_fn">
<parameter_description> function called when releasing the Clutter main lock
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_events_pending">
<description>
Checks if events are pending in the event queue.


</description>
<parameters>
</parameters>
<return> TRUE if there are pending events, FALSE otherwise.

Since: 0.4
</return>
</function>

<function name="clutter_main_level">
<description>
Retrieves the depth of the Clutter mainloop.


</description>
<parameters>
</parameters>
<return> The level of the mainloop.
</return>
</function>

<function name="clutter_rectangle_get_color">
<description>
Retrieves the color of @rectangle.

</description>
<parameters>
<parameter name="rectangle">
<parameter_description> a #ClutterRectangle
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_ellipse_set_angle_start">
<description>
Sets the angle at which movement starts; angles &amp;gt;= 360 degress get clamped
to the canonical interval &amp;lt;0, 360).

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="angle_start">
<parameter_description> angle at which movement starts in degrees, between 0 and 360.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_media_set_volume">
<description>
Sets the playback volume of @media to @volume.

</description>
<parameters>
<parameter name="media">
<parameter_description> A #ClutterMedia object
</parameter_description>
</parameter>
<parameter name="volume">
<parameter_description> The volume as a double between 0.0 and 1.0
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_entry_get_text">
<description>
Retrieves the text displayed by @entry.


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
</parameters>
<return> the text of the entry.  The returned string is
owned by #ClutterEntry and should not be modified or freed.

Since: 0.4
</return>
</function>

<function name="clutter_group_remove_all">
<description>
Removes all children actors from the #ClutterGroup.

</description>
<parameters>
<parameter name="group">
<parameter_description> A #ClutterGroup
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_container_add_valist">
<description>
Alternative va_list version of clutter_container_add().

Since: 0.4

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="first_actor">
<parameter_description> the first #ClutterActor to add
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> list of actors to add, followed by %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_destroy">
<description>
Destroys an actor.  When an actor is destroyed, it will break any
references it holds to other objects.  If the actor is inside a
container, the actor will be removed.

When you destroy a container, its children will be destroyed as well.

Note: you cannot destroy the #ClutterStage returned by
clutter_stage_get_default().

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="ClutterGroup">
<description>
The ::remove signal is emitted each time an actor has been removed
from the group

@Deprecated: 0.4: This signal is deprecated, you should connect
to the ClutterContainer::actor-removed signal instead

</description>
<parameters>
<parameter name="group">
<parameter_description> the #ClutterGroup that received the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the actor added to the group
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_add_marker_at_time">
<description>
Time-based variant of clutter_timeline_add_marker_at_frame().

Adds a named marker at @msecs.

Since: 0.8

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="marker_name">
<parameter_description> the unique name for this marker
</parameter_description>
</parameter>
<parameter name="msecs">
<parameter_description> position of the marker in milliseconds
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_object_get_size">
<description>
Retrieves the number of members of a #JsonObject.


</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
</parameters>
<return> the number of members
</return>
</function>

<function name="clutter_actor_get_height">
<description>
Retrieves the height of a #ClutterActor.

This function tries to &quot;do what you mean&quot;, by returning the correct
value depending on the actor&apos;s state.

If the actor has a valid allocation, this function will return the
height of the allocation box.

If the actor does not have a valid allocation, this function will
return the actor&apos;s natural height request.

If you care whether you get the height request or the allocation,
you should probably call a different function like
clutter_actor_get_allocation_coords() to retrieve the allocation
or clutter_actor_get_preferred_height() to retrieve the
preferred height.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the height of the actor, in pixels
</return>
</function>

<function name="CLUTTER_ALPHA_SINE">
<description>
Convenience symbol for clutter_sine_func().

Since: 0.2

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_container_child_set_property">
<description>
Sets a container-specific property on a child of @container.

Since: 0.8

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #ClutterActor that is a child of @container.
</parameter_description>
</parameter>
<parameter name="property">
<parameter_description> the name of the property to set.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_get_perspectivex">
<description>
Retrieves the stage perspective. This is the fixed point version of 
clutter_stage_get_perspective().

</description>
<parameters>
<parameter name="stage">
<parameter_description> A #ClutterStage
</parameter_description>
</parameter>
<parameter name="perspective">
<parameter_description> return location for a #ClutterPerspective
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_threads_init">
<description>
Initialises the Clutter threading mechanism, so that Clutter API can be
called by multiple threads, using clutter_threads_enter() and
clutter_threads_leave() to mark the critical sections.

You must call g_thread_init() before this function.

This function must be called before clutter_init().

Since: 0.4

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="ClutterAlpha">
<description>
The alpha value as computed by the alpha function.

Since: 0.2

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_actor_paint">
<description>
Renders the actor to display.

This function should not be called directly by applications.
Call clutter_actor_queue_redraw() to queue paints, instead.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_xu">
<description>
Retrieves the X coordinate of a #ClutterActor, in #ClutterUnit&amp;lt;!-- --&amp;gt;s.

This function tries to &quot;do what you mean&quot;, by returning the
correct value depending on the actor&apos;s state.

If the actor has a valid allocation, this function will return
the X coordinate of the origin of the allocation box.

If the actor has any fixed coordinate set using clutter_actor_set_x(),
clutter_actor_set_position() or clutter_actor_set_geometry(), this
function will return that coordinate.

If both the allocation and a fixed position are missing, this function
will return 0.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the X coordinate, in #ClutterUnit&amp;lt;!-- --&amp;gt;s, ignoring
any transformation (i.e. scaling, rotation)

Since: 0.6
</return>
</function>

<function name="clutter_color_from_pixel">
<description>
Converts @pixel from the packed representation of a four 8 bit channel
color to a #ClutterColor.

</description>
<parameters>
<parameter name="dest">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
<parameter name="pixel">
<parameter_description> a 32 bit packed integer containing a color
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_realize">
<description>
Creates any underlying graphics resources needed by the actor to be
displayed.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_color">
<description>
Set the stage color.

</description>
<parameters>
<parameter name="stage">
<parameter_description> A #ClutterStage
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> A #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_shader_release">
<description>
Frees up any GL context resources held by the shader.

Since: 0.6

</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_label_get_text">
<description>
Retrieves the text displayed by @label


</description>
<parameters>
<parameter name="label">
<parameter_description> a #ClutterLabel
</parameter_description>
</parameter>
</parameters>
<return> the text of the label.  The returned string is
owned by #ClutterLabel and should not be modified or freed.
</return>
</function>

<function name="clutter_actor_move_by">
<description>
Moves an actor by the specified distance relative to its current
position in pixels. This function modifies the fixed position of an
actor and thus removes it from any layout management. Another way
to move an actor is with an anchor point, see
clutter_actor_set_anchor_point().

Since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="dx">
<parameter_description> Distance to move Actor on X axis.
</parameter_description>
</parameter>
<parameter name="dy">
<parameter_description> Distance to move Actor on Y axis.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_media_set_playing">
<description>
Starts or stops @media playing.

</description>
<parameters>
<parameter name="media">
<parameter_description> A #ClutterMedia object
</parameter_description>
</parameter>
<parameter name="playing">
<parameter_description> TRUE to start playing, FALSE to stop.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_set_default_frame_rate">
<description>
Sets the default frame rate to be used when creating #ClutterTimeline&amp;lt;!--
--&amp;gt;s

Since: 0.6

</description>
<parameters>
<parameter name="frames_per_sec">
<parameter_description> the new default frame rate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_stage">
<description>
Retrieves the #ClutterStage where @actor is contained.


</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the stage containing the actor, or %NULL

Since: 0.8
</return>
</function>

<function name="clutter_group_raise">
<description>
Raises @actor to @sibling level in the depth ordering.

Deprecated: 0.6: Use clutter_container_raise_child() instead.

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterGroup
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_set_alpha">
<description>
Binds @alpha to a #ClutterBehaviour.  The #ClutterAlpha object
is what makes a behaviour work: for each tick of the timeline
used by #ClutterAlpha a new value of the alpha parameter is
computed by the alpha function; the value should be used by
the #ClutterBehaviour to update one or more properties of the
actors to which the behaviour applies.

Since: 0.2

</description>
<parameters>
<parameter name="behave">
<parameter_description> a #ClutterBehaviour
</parameter_description>
</parameter>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha or %NULL to unset a previously set alpha
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_get_object">
<description>
Retrieves the #JsonObject stored inside a #JsonNode


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return> the #JsonObject
</return>
</function>

<function name="clutter_stage_get_user_resizable">
<description>
Retrieves the value set with clutter_stage_set_user_resizable().


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the stage is resizable by the user.

Since: 0.4
</return>
</function>

<function name="clutter_label_set_line_wrap">
<description>
Toggles line wrapping within the #ClutterLabel widget.  %TRUE makes
it break lines if text exceeds the widget&apos;s size.  %FALSE lets the
text get cut off by the edge of the widget if it exceeds the widget
size.

Since: 0.2

</description>
<parameters>
<parameter name="label">
<parameter_description> a #ClutterLabel
</parameter_description>
</parameter>
<parameter name="wrap">
<parameter_description> the setting
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_entry_new">
<description>
Creates a new, empty #ClutterEntry.


</description>
<parameters>
</parameters>
<return> the newly created #ClutterEntry
</return>
</function>

<function name="clutter_get_debug_enabled">
<description>
Check if clutter has debugging turned on.


</description>
<parameters>
</parameters>
<return> TRUE if debugging is turned on, FALSE otherwise.
</return>
</function>

<function name="clutter_behaviour_ellipse_set_angle_tiltx">
<description>
Sets the angle at which the ellipse should be tilted around it&apos;s center.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> a #ClutterRoateAxis
</parameter_description>
</parameter>
<parameter name="angle_tilt">
<parameter_description> tilt, as #ClutterFixed, of the elipse around the center in the given
axis in degrees.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_rotate_get_direction">
<description>
Retrieves the #ClutterRotateDirection used by the rotate behaviour.


</description>
<parameters>
<parameter name="rotate">
<parameter_description> a #ClutterBehaviourRotate
</parameter_description>
</parameter>
</parameters>
<return> the rotation direction

Since: 0.4
</return>
</function>

<function name="clutter_score_remove_all">
<description>
Removes all the timelines inside @score.

Since: 0.6

</description>
<parameters>
<parameter name="score">
<parameter_description> a #ClutterScore
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_ellipse_set_direction">
<description>
Sets the rotation direction used by the ellipse behaviour.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> the rotation direction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="CLUTTER_ALPHA_RAMP_INC">
<description>
Convenience symbol for clutter_ramp_inc_func().

Since: 0.2

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_ungrab_keyboard">
<description>
Removes an existing grab of the keyboard.

Since: 0.6

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_ellipse_get_height">
<description>
Gets the height of the elliptical path.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
</parameters>
<return> the height of the path

Since: 0.4
</return>
</function>

<function name="clutter_model_set_sorting_column">
<description>
Sets the model to sort by @column. If @column is a negative value
the sorting column will be unset.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> the column of the @model to sort, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_transformed_sizeu">
<description>
Gets the absolute size of an actor in #ClutterUnits&amp;lt;!-- --&amp;gt;s, taking
into account the scaling factors.

&amp;lt;note&amp;gt;When the actor (or one of its ancestors) is rotated around the
X or Y axis, it no longer appears as on the stage as a rectangle, but
as a generic quadrangle; in that case this function returns the size
of the smallest rectangle that encapsulates the entire quad. Please
note that in this case no assumptions can be made about the relative
position of this envelope to the absolute position of the actor, as
returned by clutter_actor_get_transformed_position(); if you need this
information, you need to use clutter_actor_get_abs_allocation_vertices()
to get the coords of the actual quadrangle.&amp;lt;/note&amp;gt;

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for the width, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for the height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_ungrab_pointer">
<description>
Removes an existing grab of the pointer.

Since: 0.6

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_path_append_knots">
<description>
Adds a NULL-terminated list of knots to a path.  This function is
equivalent to calling clutter_behaviour_path_append_knot() for each
member of the list.

Since: 0.2

</description>
<parameters>
<parameter name="pathb">
<parameter_description> a #ClutterBehvaiourPath
</parameter_description>
</parameter>
<parameter name="first_knot">
<parameter_description> the #ClutterKnot knot to add to the path
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> additional knots to add to the path
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_rotate_set_bounds">
<description>
Sets the initial and final angles of a rotation behaviour; angles &amp;gt;= 360
degrees get clamped to the canonical interval &amp;lt;0, 360).

Since: 0.4

</description>
<parameters>
<parameter name="rotate">
<parameter_description> a #ClutterBehaviourRotate
</parameter_description>
</parameter>
<parameter name="angle_start">
<parameter_description> initial angle in degrees, between 0 and 360.
</parameter_description>
</parameter>
<parameter name="angle_end">
<parameter_description> final angle in degrees, between 0 and 360.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_scale_new">
<description>
Creates a new  #ClutterBehaviourScale instance.


</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="x_scale_start">
<parameter_description> initial scale factor on the X axis
</parameter_description>
</parameter>
<parameter name="y_scale_start">
<parameter_description> initial scale factor on the Y axis
</parameter_description>
</parameter>
<parameter name="x_scale_end">
<parameter_description> final scale factor on the X axis
</parameter_description>
</parameter>
<parameter name="y_scale_end">
<parameter_description> final scale factor on the Y axis
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterBehaviourScale

Since: 0.2
</return>
</function>

<function name="clutter_behaviour_ellipse_get_angle_start">
<description>
Gets the angle at which movements starts.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
</parameters>
<return> angle in degrees

Since: 0.6
</return>
</function>

<function name="clutter_texture_get_cogl_texture">
<description>
Return value: COGL texture handle

</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterTexture
</parameter_description>
</parameter>
</parameters>
<return> COGL texture handle
</return>
</function>

<function name="json_object_unref">
<description>
Decreases by one the reference count of a #JsonObject. If the
reference count reaches zero, the object is destroyed and all
its allocated resources are freed.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_effect_path">
<description>
Simple effect for moving a single #ClutterActor along a path.


</description>
<parameters>
<parameter name="template_">
<parameter_description> A #ClutterEffectTemplate
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> A #ClutterActor to apply the effect to.
</parameter_description>
</parameter>
<parameter name="knots">
<parameter_description> An array of #ClutterKnots representing path for the actor
</parameter_description>
</parameter>
<parameter name="n_knots">
<parameter_description> Number of #ClutterKnots in passed array.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> A #ClutterEffectCompleteFunc to call on effect
completion or %NULL
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> Data to pass to supplied  #ClutterEffectCompleteFunc
or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterTimeline for the effect. Will be unreferenced by
the effect when completed.

Since: 0.6
</return>
</function>

<function name="clutter_actor_get_opacity">
<description>
Retrieves the opacity value of an actor, as set by
clutter_actor_set_opacity().

For retrieving the absolute opacity of the actor inside a paint
virtual function, see clutter_actor_get_paint_opacity().


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the opacity of the actor
</return>
</function>

<function name="clutter_actor_get_depth">
<description>
Retrieves the depth of @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the depth of the actor
</return>
</function>

<function name="ClutterBehaviourBspline">
<description>
This signal is emitted at the end of each frame.

Since: 0.2

</description>
<parameters>
<parameter name="pathb">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
<parameter name="knot">
<parameter_description> the #ClutterKnot reached
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_anchor_point">
<description>
Sets an anchor point for the @actor. The anchor point is a point in the
coordinate space of an actor to which the actor position within its
parent is relative; the default is (0, 0), i.e. the top-left corner of
the actor.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="anchor_x">
<parameter_description> X coordinate of the anchor point
</parameter_description>
</parameter>
<parameter name="anchor_y">
<parameter_description> Y coordinate of the anchor point
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_media_get_can_seek">
<description>
Retrieves whether @media is seekable or not.


</description>
<parameters>
<parameter name="media">
<parameter_description> A #ClutterMedia object
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @media can seek, %FALSE otherwise.
</return>
</function>

<function name="clutter_actor_get_name">
<description>
Retrieves the name of @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the name of the actor, or %NULL. The returned string is
owned by the actor and should not be modified or freed.
</return>
</function>

<function name="clutter_actor_set_widthu">
<description>
Forces a width request on an actor, causing the actor&apos;s
normal width and height (if any) to be ignored. This function
sets both the minimum and natural size request of the actor.

since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Requested new width for the actor, in #ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_label_set_use_markup">
<description>
Sets whether the text of the label contains markup in &amp;lt;link
linkend=&quot;PangoMarkupFormat&quot;&amp;gt;Pango&apos;s text markup
language&amp;lt;/link&amp;gt;.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #ClutterLabel
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE if the label&apos;s text should be parsed for markup.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_entry_delete_chars">
<description>
Characters are removed from before the current postion of the cursor.

Since: 0.4

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the number of characters to remove.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_set_names">
<description>
Assigns a name to the columns of a #ClutterModel.

This function is meant primarily for #GObjects that inherit from
#ClutterModel, and should only be used when contructing a #ClutterModel.
It will not work after the initial creation of the #ClutterModel.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="n_columns">
<parameter_description> the number of column names
</parameter_description>
</parameter>
<parameter name="names">
<parameter_description> an array of strings
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_get_root_window">
<description>
Retrieves the root window.


</description>
<parameters>
</parameters>
<return> the id of the root window

Since: 0.6
</return>
</function>

<function name="clutter_child_meta_get_container">
<description>
Retrieves the container using @data


</description>
<parameters>
<parameter name="data">
<parameter_description> a #ClutterChildMeta
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterContainer

Since: 0.8
</return>
</function>

<function name="clutter_actor_event">
<description>
This function is used to emit an event on the main stage.
You should rarely need to use this function, except for
synthetising events.


</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
<parameter name="capture">
<parameter_description> TRUE if event in in capture phase, FALSE otherwise.
</parameter_description>
</parameter>
</parameters>
<return> the return value from the signal emission: %TRUE
if the actor handled the event, or %FALSE if the event was
not handled

Since: 0.6
</return>
</function>

<function name="clutter_get_use_mipmapped_text">
<description>
Gets whether mipmapped textures are used in text operations.
See clutter_set_use_mipmapped_text().


</description>
<parameters>
</parameters>
<return> %TRUE if text operations should use mipmapped
textures

Since: 0.8
</return>
</function>

<function name="clutter_stage_hide_cursor">
<description>
Makes the cursor invisible on the stage window

Since: 0.4

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_object_get_members">
<description>
Retrieves all the names of the members of a #JsonObject. You can
obtain the value for each member using json_object_get_member().


</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
</parameters>
<return> a #GList of member names. The content of the list
is owned by the #JsonObject and should never be modified or
freed. When you have finished using the returned list, use
g_list_free() to free the resources it has allocated.
</return>
</function>

<function name="clutter_model_insert">
<description>
Inserts a new row to the #ClutterModel at @row, setting the row
values upon creation. For example, to insert a new row at index 100,
where column 0 is type %G_TYPE_INT and column 1 is of type
%G_TYPE_STRING:

&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
ClutterModel *model;
model = clutter_model_default_new (2,
G_TYPE_INT,    &quot;Score&quot;,
G_TYPE_STRING, &quot;Team&quot;);
clutter_model_insert (model, 3, 0, 42, 1, &quot;Team #1&quot;, -1);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> the position to insert the new row
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> pairs of column number and value, terminated with -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="CLUTTER_ALPHA_EXP_DEC">
<description>
Convenience symbold for clutter_exp_dec_func().

Since: 0.4

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_color_shade">
<description>
Shades @src by the factor of @shade and saves the modified
color into @dest.

</description>
<parameters>
<parameter name="src">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> return location for the shaded color
</parameter_description>
</parameter>
<parameter name="shade">
<parameter_description> the shade factor to apply
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_container_lower_child">
<description>
Lowers @actor to @sibling level, in the depth ordering.

Since: 0.6

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the actor to raise
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> the sibling to lower to, or %NULL to lower to the bottom
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="CLUTTER_ACTOR_IS_MAPPED">
<description>
Evaluates to %TRUE if the %CLUTTER_ACTOR_MAPPED flag is set.

Since: 0.2

</description>
<parameters>
<parameter name="e">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_ellipse_get_center">
<description>
Gets the center of the elliptical path path.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> location to store the x coordinace of the center, or NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> location to store the y coordinace of the center, or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_entry_get_color">
<description>
Retrieves the color of @entry.

Since: 0.4

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_label_set_line_wrap_mode">
<description>
If line wrapping is on (see clutter_label_set_line_wrap()) this controls how
the line wrapping is done. The default is %PANGO_WRAP_WORD which means
wrap on word boundaries.

Since: 0.2

</description>
<parameters>
<parameter name="label">
<parameter_description> a #ClutterLabel
</parameter_description>
</parameter>
<parameter name="wrap_mode">
<parameter_description> the line wrapping mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="ClutterScore">
<description>
The ::paused signal is emitted each time a #ClutterScore
is paused.

Since: 0.6

</description>
<parameters>
<parameter name="score">
<parameter_description> the score which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_get_title">
<description>
Gets the stage title.


</description>
<parameters>
<parameter name="stage">
<parameter_description> A #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> pointer to the title string for the stage. The
returned string is owned by the actor and should not
be modified or freed.

Since: 0.4
</return>
</function>

<function name="clutter_entry_set_alignment">
<description>
Sets text alignment of the entry.

Since: 0.4

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
<parameter name="alignment">
<parameter_description> A #PangoAlignment
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_append">
<description>
Creates and appends a new row to the #ClutterModel, setting the
row values upon creation. For example, to append a new row where
column 0 is type %G_TYPE_INT and column 1 is of type %G_TYPE_STRING:

&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
ClutterModel *model;
model = clutter_model_default_new (2,
G_TYPE_INT,    &quot;Score&quot;,
G_TYPE_STRING, &quot;Team&quot;);
clutter_model_append (model, 0, 42, 1, &quot;Team #1&quot;, -1);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> pairs of column number and value, terminated with -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="CLUTTER_ACTOR_IS_VISIBLE">
<description>
Evaluates to %TRUE if the actor is both realized and mapped.

Since: 0.2

</description>
<parameters>
<parameter name="e">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_util_next_p2">
<description>
Calculates the nearest power of two, greater than or equal to @a.


</description>
<parameters>
<parameter name="a">
<parameter_description> Value to get the next power
</parameter_description>
</parameter>
</parameters>
<return> The nearest power of two, greater or equal to @a.
</return>
</function>

<function name="json_parser_new">
<description>
Creates a new #JsonParser instance. You can use the #JsonParser to
load a JSON stream from either a file or a buffer and then walk the
hierarchy using the data types API.


</description>
<parameters>
</parameters>
<return> the newly created #JsonParser. Use g_object_unref()
to release all the memory it allocates.
</return>
</function>

<function name="clutter_label_get_line_wrap">
<description>
Return value: %TRUE if the lines of the label are automatically wrapped.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #ClutterLabel
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the lines of the label are automatically wrapped.

Since: 0.2
</return>
</function>

<function name="cogl_util_next_p2">
<description>
Calculates the next power greater than @a.


</description>
<parameters>
<parameter name="a">
<parameter_description> Value to get the next power
</parameter_description>
</parameter>
</parameters>
<return> The next power after @a.
</return>
</function>

<function name="clutter_actor_get_size">
<description>
This function tries to &quot;do what you mean&quot; and return
the size an actor will have. If the actor has a valid
allocation, the allocation will be returned; otherwise,
the actors natural size request will be returned.

If you care whether you get the request vs. the allocation, you
should probably call a different function like
clutter_actor_get_allocation_coords() or
clutter_actor_get_preferred_width().

Since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for the width, or %NULL.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for the height, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_ellipse_get_angle_endx">
<description>
Gets the angle at which movements ends.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
</parameters>
<return> angle, as #ClutterFixed, in degrees

Since: 0.4
</return>
</function>

<function name="clutter_group_get_nth_child">
<description>
Gets a groups child held at @index_ in stack.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterGroup
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the position of the requested actor.
</parameter_description>
</parameter>
</parameters>
<return> A Clutter actor or NULL if @index_ is invalid.

Since: 0.2
</return>
</function>

<function name="clutter_model_resort">
<description>
Force a resort on the @model. This function should only be
used by subclasses of #ClutterModel.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_title">
<description>
Sets the stage title.

Since 0.4

</description>
<parameters>
<parameter name="stage">
<parameter_description> A #ClutterStage
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> A utf8 string for the stage windows title.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_iter_get_value">
<description>
Sets an initializes @value to that at @column. When done with @value, 
g_value_unset() needs to be called to free any allocated memory.

Since: 0.6

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> column number to retrieve the value from
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> an empty #GValue to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_media_get_volume">
<description>
Retrieves the playback volume of @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> A #ClutterMedia object
</parameter_description>
</parameter>
</parameters>
<return> The playback volume between 0.0 and 1.0
</return>
</function>

<function name="json_node_type_name">
<description>
Retrieves the user readable name of the data type contained by @node.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return> a string containing the name of the type. The returned string
is owned by the node and should never be modified or freed
</return>
</function>

<function name="clutter_rectangle_set_border_color">
<description>
Sets the color of the border used by @rectangle using @color

</description>
<parameters>
<parameter name="rectangle">
<parameter_description> a #ClutterRectangle
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color of the border
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_shader_new">
<description>
Create a new #ClutterShader instance.


</description>
<parameters>
</parameters>
<return> a new #ClutterShader.

Since: 0.6
</return>
</function>

<function name="clutter_media_get_uri">
<description>
Retrieves the URI from @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> A #ClutterMedia object
</parameter_description>
</parameter>
</parameters>
<return> The URI as a string.
</return>
</function>

<function name="clutter_actor_queue_redraw">
<description>
Queues up a redraw of an actor and any children. The redraw occurs
once the main loop becomes idle (after the current batch of events
has been processed, roughly).

Applications rarely need to call this, as redraws are handled
automatically by modification functions.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_threads_add_timeout">
<description>
Simple wrapper around clutter_threads_add_timeout_full().


</description>
<parameters>
<parameter name="interval">
<parameter_description> the time between calls to the function, in milliseconds
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

Since: 0.4
</return>
</function>

<function name="clutter_actor_set_anchor_pointu">
<description>
Sets an anchor point for @self. The anchor point is a point in the
coordinate space of an actor to which the actor position within its
parent is relative; the default is (0, 0), i.e. the top-left corner
of the actor.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="anchor_x">
<parameter_description> X coordinate of the anchor point, in #ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
<parameter name="anchor_y">
<parameter_description> Y coordinate of the anchor point, in #ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_frame_source_add_full">
<description>
Sets a function to be called at regular intervals with the given
priority.  The function is called repeatedly until it returns
%FALSE, at which point the timeout is automatically destroyed and
the function will not be called again.  The @notify function is
called when the timeout is destroyed.  The first call to the
function will be at the end of the first @interval.

This function is similar to g_timeout_add_full() except that it
will try to compensate for delays. For example, if @func takes half
the interval time to execute then the function will be called again
half the interval time after it finished. In contrast
g_timeout_add_full() would not fire until a full interval after the
function completes so the delay between calls would be @interval *
1.5. This function does not however try to invoke the function
multiple times to catch up missing frames if @func takes more than
@interval ms to execute.


</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the frame source. Typically this will be in the
range between #G_PRIORITY_DEFAULT and #G_PRIORITY_HIGH.
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> the time between calls to the function, in milliseconds
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to call when the timeout source is removed
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

Since: 0.8
</return>
</function>

<function name="clutter_texture_set_from_rgb_data">
<description>
Sets #ClutterTexture image data.

Note: This function is likely to change in future versions.


</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterTexture
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> Image data in RGBA type colorspace.
</parameter_description>
</parameter>
<parameter name="has_alpha">
<parameter_description> Set to TRUE if image data has an alpha channel.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width in pixels of image data.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height in pixels of image data
</parameter_description>
</parameter>
<parameter name="rowstride">
<parameter_description> Distance in bytes between row starts.
</parameter_description>
</parameter>
<parameter name="bpp">
<parameter_description> bytes per pixel ( Currently only 4 supported )
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #ClutterTextureFlags
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on failure.

Since: 0.4.
</return>
</function>

<function name="clutter_container_add">
<description>
Adds a list of #ClutterActor&amp;lt;!-- --&amp;gt;s to @container. Each time and
actor is added, the &quot;actor-added&quot; signal is emitted. Each actor should
be parented to @container, which takes a reference on the actor. You
cannot add a #ClutterActor to more than one #ClutterContainer.

Since: 0.4

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="first_actor">
<parameter_description> the first #ClutterActor to add
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> %NULL terminated list of actors to add
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_use_fog">
<description>
Sets whether the depth cueing effect on the stage should be enabled
or not.

Depth cueing is a 3D effect that makes actors farther away from the
viewing point less opaque, by fading them with the stage color.

The parameters of the GL fog used can be changed using the
clutter_stage_set_fog() function.

Since: 0.6

</description>
<parameters>
<parameter name="stage">
<parameter_description> the #ClutterStage
</parameter_description>
</parameter>
<parameter name="fog">
<parameter_description> %TRUE for enabling the depth cueing effect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_dup_object">
<description>
Retrieves the #JsonObject inside @node. The reference count of
the returned object is increased.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return> the #JsonObject
</return>
</function>

<function name="clutter_behaviour_ellipse_get_angle_tiltx">
<description>
Gets the tilt of the ellipse around the center in the given axis.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> a #ClutterRotateAxis
</parameter_description>
</parameter>
</parameters>
<return> angle, as #ClutterFixed, in degrees

Since: 0.4
</return>
</function>

<function name="clutter_entry_get_cursor_position">
<description>
Gets the position, in characters, of the cursor in @entry.


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
</parameters>
<return> the position of the cursor.

Since: 0.6
</return>
</function>

<function name="clutter_label_get_use_markup">
<description>
Return value: %TRUE if the label&apos;s text will be parsed for markup.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #ClutterLabel
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the label&apos;s text will be parsed for markup.
</return>
</function>

<function name="clutter_actor_is_scaled">
<description>
Checks whether the actor is scaled in either dimension.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor is scaled.

Since: 0.6
</return>
</function>

<function name="clutter_event_new">
<description>
Creates a new #ClutterEvent of the specified type.


</description>
<parameters>
<parameter name="type">
<parameter_description> The type of event.
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated #ClutterEvent.
</return>
</function>

<function name="ClutterStageManager">
<description>
The ::stage-removed signal is emitted each time a #ClutterStage
has been removed from the stage manager.

Since: 0.8

</description>
<parameters>
<parameter name="stage_manager">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
<parameter name="stage">
<parameter_description> the removed stage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_rotationx">
<description>
Retrieves the angle and center of rotation on the given axis,
set using clutter_actor_set_rotation().

This function is the fixed point variant of clutter_actor_get_rotation().


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> the axis of rotation
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return value for the X coordinate of the center of rotation
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return value for the Y coordinate of the center of rotation
</parameter_description>
</parameter>
<parameter name="z">
<parameter_description> return value for the Z coordinate of the center of rotation
</parameter_description>
</parameter>
</parameters>
<return> the angle of rotation as a fixed point value.

Since: 0.6
</return>
</function>

<function name="clutter_score_list_timelines">
<description>
Retrieves a list of all the #ClutterTimelines managed by @score.


</description>
<parameters>
<parameter name="score">
<parameter_description> a #ClutterScore
</parameter_description>
</parameter>
</parameters>
<return> a #GSList containing all the timelines in the score.
This function does not increase the reference count of the
returned timelines. Use g_slist_free() on the returned list to
deallocate its resources.

Since: 0.6
</return>
</function>

<function name="clutter_button_event_button">
<description>
Retrieve the button number of the event.


</description>
<parameters>
<parameter name="buttev">
<parameter_description> a #ClutterButtonEvent
</parameter_description>
</parameter>
</parameters>
<return> the button number.

Since: 0.4
</return>
</function>

<function name="clutter_behaviour_bspline_append_knots">
<description>
Appends a bezier spline defined by the last control point of bezier spline
bs and the array of #ClutterKnot control points to the orginal bezier spline
bs.

Since: 0.6

</description>
<parameters>
<parameter name="bs">
<parameter_description> a #ClutterBehaviourBspline
</parameter_description>
</parameter>
<parameter name="first_knot">
<parameter_description> first #ClutterKnot
</parameter_description>
</parameter>
<parameter name="VarArgs">
<parameter_description> a NULL-terminated array of #ClutterKnot control points.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_texture_pixmap_new_with_pixmap">
<description>

</description>
<parameters>
<parameter name="pixmap">
<parameter_description> the X Pixmap to which this texture should be bound
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the X pixmap
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the X pixmap
</parameter_description>
</parameter>
<parameter name="depth">
<parameter_description> the depth of the X pixmap
</parameter_description>
</parameter>
</parameters>
<return> A new #ClutterX11TexturePixmap bound to the given X Pixmap

Since 0.8
</return>
</function>

<function name="clutter_behaviour_ellipse_get_angle_tilt">
<description>
Gets the tilt of the ellipse around the center in the given axis.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> a #ClutterRotateAxis
</parameter_description>
</parameter>
</parameters>
<return> angle in degrees.

Since: 0.4
</return>
</function>

<function name="clutter_stage_manager_set_default_stage">
<description>
Sets @stage as the default stage.

Since: 0.8

</description>
<parameters>
<parameter name="stage_manager">
<parameter_description> a #ClutterStageManager
</parameter_description>
</parameter>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_set_delay">
<description>
Sets the delay, in milliseconds, before @timeline should start.

Since: 0.4

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="msecs">
<parameter_description> delay in milliseconds
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_pause">
<description>
Pauses the #ClutterTimeline on current frame

</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_effect_move">
<description>
Simple effect for moving a single #ClutterActor along to a
destination point.


</description>
<parameters>
<parameter name="template_">
<parameter_description> A #ClutterEffectTemplate
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> A #ClutterActor to apply the effect to.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate of the destination
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate of the destination
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> A #ClutterEffectCompleteFunc to call on effect
completion or %NULL
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> Data to pass to supplied  #ClutterEffectCompleteFunc
or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterTimeline for the effect. Will be unreferenced by
the effect when completed.

Since: 0.6
</return>
</function>

<function name="clutter_model_iter_prev">
<description>
Sets the @iter to point at the previous position in the model.
The model implementation should take into account the presence of
a filter function.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
</parameters>
<return> The passed iterator, updated to point at the previous
row in the model.

Since: 0.6
</return>
</function>

<function name="clutter_actor_set_height">
<description>
Forces a height request on an actor, causing the actor&apos;s
normal width and height (if any) to be ignored. This function
sets both the minimum and natural size request of the actor.

since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Requested new height for the actor, in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_unfullscreen">
<description>
Asks to toggle off the fullscreen state for the stage window. Note that
you shouldn&apos;t assume the window is definitely not full screen afterward,
because other entities (e.g. the user or window manager) could fullscreen
it again, and not all window managers honor requests to unfullscreen
windows.

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_manager_get_default">
<description>
Return value: the default stage manager instance. The returned object

</description>
<parameters>
</parameters>
<return> the default stage manager instance. The returned object
is owned by Clutter and you should not reference or unreference it.

Since: 0.8
</return>
</function>

<function name="json_parser_get_current_line">
<description>
Retrieves the line currently parsed, starting from 1.


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #JsonParser
</parameter_description>
</parameter>
</parameters>
<return> the currently parsed line.
</return>
</function>

<function name="clutter_label_get_justify">
<description>
Retrieves whether the label should justify the text on both margins.


</description>
<parameters>
<parameter name="label">
<parameter_description> a #ClutterLabel
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the text should be justified

Since: 0.6
</return>
</function>

<function name="clutter_behaviour_ellipse_get_tiltx">
<description>
Gets the tilt of the ellipse around the center in Y axis.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="angle_tilt_x">
<parameter_description> location for tilt of the elipse, as #ClutterFixed, around the
center in X axis in degrees, or NULL.
</parameter_description>
</parameter>
<parameter name="angle_tilt_y">
<parameter_description> location for tilt of the elipse, as #ClutterFixed, around the
center in Y axis in degress, or NULL.
</parameter_description>
</parameter>
<parameter name="angle_tilt_z">
<parameter_description> location for tilt of the elipse, as #ClutterFixed, around the
center in Z axis in degrees, or NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_script_unmerge_objects">
<description>
Unmerges the objects identified by @merge_id.

Since: 0.6

</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="merge_id">
<parameter_description> merge id returned when loading a UI definition
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="CLUTTER_ALPHA_SINE_INC">
<description>
Convenience symbol for clutter_sine_inc_func().

Since: 0.2

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_model_iter_is_first">
<description>
Gets whether the current iterator is at the beginning of the model
to which it belongs.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if @iter is the first iter in the filtered model

Since: 0.6
</return>
</function>

<function name="clutter_entry_set_font_name">
<description>
Sets @font_name as the font used by @entry.

@font_name must be a string containing the font name and its
size, similarly to what you would feed to the
pango_font_description_from_string() function.

Since: 0.4

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
<parameter name="font_name">
<parameter_description> a font name and size, or %NULL for the default font
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_ramp_func">
<description>
Convenience alpha function for a full ramp function (increase for
half the time, decrease for the remaining half). You can use this
function as the alpha function for clutter_alpha_set_func().


</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="dummy">
<parameter_description> unused argument
</parameter_description>
</parameter>
</parameters>
<return> an alpha value.

Since: 0.2
</return>
</function>

<function name="clutter_actor_get_preferred_size">
<description>
Computes the preferred minimum and natural size of an actor, taking into
account the actor&apos;s geometry management (either height-for-width
or width-for-height).

The width and height used to compute the preferred height and preferred
width are the actor&apos;s natural ones.

If you need to control the height for the preferred width, or the width for
the preferred height, you should use clutter_actor_get_preferred_width()
and clutter_actor_get_preferred_height(), and check the actor&apos;s preferred
geometry management using the #ClutterActor:request-mode property.

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="min_width_p">
<parameter_description> return location for the minimum width, or %NULL
</parameter_description>
</parameter>
<parameter name="min_height_p">
<parameter_description> return location for the minimum height, or %NULL
</parameter_description>
</parameter>
<parameter name="natural_width_p">
<parameter_description> return location for the natural width, or %NULL
</parameter_description>
</parameter>
<parameter name="natural_height_p">
<parameter_description> return location for the natural height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_free">
<description>
Frees all resources used by @event.

</description>
<parameters>
<parameter name="event">
<parameter_description> A #ClutterEvent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_feature_get_all">
<description>
Return value: a logical OR of all the supported features.

</description>
<parameters>
</parameters>
<return> a logical OR of all the supported features.

Since: 0.1.1
</return>
</function>

<function name="json_parser_get_root">
<description>
Retrieves the top level node from the parsed JSON stream.


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #JsonParser
</parameter_description>
</parameter>
</parameters>
<return> the root #JsonNode . The returned node is owned by
the #JsonParser and should never be modified or freed.
</return>
</function>

<function name="clutter_backend_set_double_click_time">
<description>
Sets the maximum time between two button press events, used to
verify whether it&apos;s a double click event or not.

Since: 0.4

</description>
<parameters>
<parameter name="backend">
<parameter_description> a #ClutterBackend
</parameter_description>
</parameter>
<parameter name="msec">
<parameter_description> milliseconds between two button press events
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_script_load_from_data">
<description>
Loads the definitions from @data into @script and merges with
the currently loaded ones, if any.


</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a buffer containing the definitions
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of the buffer, or -1 if @data is a NUL-terminated
buffer
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> on error, zero is returned and @error is set
accordingly. On success, the merge id for the UI definitions is
returned. You can use the merge id with clutter_script_unmerge().

Since: 0.6
</return>
</function>

<function name="clutter_actor_set_clip">
<description>
Sets clip area in pixels for @self. The clip area is always computed
from the upper left corner of the actor, even if the anchor point is
set otherwise.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="xoff">
<parameter_description> X offset of the clip rectangle, in pixels
</parameter_description>
</parameter>
<parameter name="yoff">
<parameter_description> Y offset of the clip rectangle, in pixels
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of the clip rectangle, in pixels
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of the clip rectangle, in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_script_connect_signals">
<description>
Connects all the signals defined into a UI definition file to their
handlers.

This method is a simpler variation of clutter_script_connect_signals_full().
It uses #GModule&apos;s introspective features (by opening the module %NULL) 
to look at the application&apos;s symbol table. From here it tries to match
the signal handler names given in the interface description with
symbols in the application and connects the signals.

Note that this function will not work correctly if #GModule is not
supported on the platform.

Since: 0.6

</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to be passed to the signal handlers, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_show">
<description>
Flags an actor to be displayed. An actor that isn&apos;t shown will not
be rendered on the stage.

Actors are visible by default.

If this function is called on an actor without a parent, the
#ClutterActor:show-on-set-parent will be set to %TRUE as a side
effect.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_parent">
<description>
Retrieves the parent of @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> The #ClutterActor parent, or %NULL if no parent is set
</return>
</function>

<function name="clutter_stage_get_fog">
<description>
Retrieves the settings used by the GL fog to create the
depth cueing effect on the @stage.

Since: 0.6

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="density">
<parameter_description> return location for the intensity dampening
</parameter_description>
</parameter>
<parameter name="z_near">
<parameter_description> return location for the starting point of the depth cueing
</parameter_description>
</parameter>
<parameter name="z_far">
<parameter_description> return location for the ending point of the depth cueing
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="ClutterTexture">
<description>
The ::pixbuf-change signal is emitted each time the pixbuf
used by @texture changes.

</description>
<parameters>
<parameter name="texture">
<parameter_description> the texture which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_set_loop">
<description>
Sets whether @timeline should loop.

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="loop">
<parameter_description> %TRUE for enable looping
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_group_remove">
<description>
Removes a child #ClutterActor from the parent #ClutterGroup.

@Deprecated: 0.4: This function is obsolete, use
clutter_container_remove_actor() instead.

</description>
<parameters>
<parameter name="group">
<parameter_description> A #ClutterGroup
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_iter_set_value">
<description>
Sets the data in the cell specified by @iter and @column. The type of
@value must be convertable to the type of the column.

Since: 0.6

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> column number to retrieve the value from
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> new value for the cell
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_new">
<description>
Create a new  #ClutterTimeline instance.


</description>
<parameters>
<parameter name="n_frames">
<parameter_description> the number of frames
</parameter_description>
</parameter>
<parameter name="fps">
<parameter_description> the number of frames per second
</parameter_description>
</parameter>
</parameters>
<return> a new #ClutterTimeline
</return>
</function>

<function name="clutter_actor_is_rotated">
<description>
Checks whether any rotation is applied to the actor.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor is rotated.

Since: 0.6
</return>
</function>

<function name="clutter_x11_get_stage_visual">
<description>
Return value: The XVisualInfo for the stage.

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> The XVisualInfo for the stage.

Since: 0.4
</return>
</function>

<function name="clutter_scriptable_set_id">
<description>
Sets @id as the unique Clutter script it for this instance of
#ClutterScriptableIface.

This name can be used by user interface designer applications to
define a unique name for an object constructable using the UI
definition language parsed by #ClutterScript.

Since: 0.6

</description>
<parameters>
<parameter name="scriptable">
<parameter_description> a #ClutterScriptable
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the #ClutterScript id of the object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_ellipse_get_tilt">
<description>
Gets the tilt of the ellipse around the center in Y axis.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="angle_tilt_x">
<parameter_description> return location for tilt angle on the X axis, or %NULL.
</parameter_description>
</parameter>
<parameter name="angle_tilt_y">
<parameter_description> return location for tilt angle on the Y axis, or %NULL.
</parameter_description>
</parameter>
<parameter name="angle_tilt_z">
<parameter_description> return location for tilt angle on the Z axis, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_glx_texture_pixmap_new_with_pixmap">
<description>

</description>
<parameters>
<parameter name="pixmap">
<parameter_description> the X Pixmap to which this texture should be bound
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the X pixmap
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the X pixmap
</parameter_description>
</parameter>
<parameter name="depth">
<parameter_description> the depth of the X pixmap
</parameter_description>
</parameter>
</parameters>
<return> A new #ClutterGLXTexturePixmap bound to the given X Pixmap

Since: 0.8
</return>
</function>

<function name="clutter_effect_rotate">
<description>
Simple effect for rotating a single #ClutterActor.


</description>
<parameters>
<parameter name="template_">
<parameter_description> a #ClutterEffectTemplate
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor to apply the effect to.
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> axis of rotation
</parameter_description>
</parameter>
<parameter name="angle">
<parameter_description> final angle to apply to actor
</parameter_description>
</parameter>
<parameter name="center_x">
<parameter_description> position on X axis to rotate about.
</parameter_description>
</parameter>
<parameter name="center_y">
<parameter_description> position on Y axis to rotate about.
</parameter_description>
</parameter>
<parameter name="center_z">
<parameter_description> position on Z axis to rotate about.
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> a #ClutterRotateDirection for the rotation.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #ClutterEffectCompleteFunc to call on effect
completion or %NULL
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to pass to supplied @func or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterTimeline for the effect. Will be unreferenced by
the effect when completed.

Since: 0.6
</return>
</function>

<function name="clutter_timeline_new_for_duration">
<description>
Creates a new #ClutterTimeline with a duration of @msecs using
the value of the ClutterTimeline:fps property to compute the
equivalent number of frames.


</description>
<parameters>
<parameter name="msecs">
<parameter_description> Duration of the timeline in milliseconds
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterTimeline

Since: 0.6
</return>
</function>

<function name="clutter_model_iter_get_row">
<description>
Retrieves the position of the row that the @iter points to.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
</parameters>
<return> the position of the @iter in the model

Since: 0.6
</return>
</function>

<function name="clutter_effect_template_new_for_duration">
<description>
Creates a new #ClutterEffectTemplate, to be used with the effects API.

A #ClutterEffectTemplate binds a timeline and an alpha function and can
be used as a template for multiple calls of clutter_effect_fade(),
clutter_effect_move() and clutter_effect_scale().

This API is intended for simple animations involving a single actor;
for more complex animations, you should see #ClutterBehaviour and the
derived classes.

This function creates a #ClutterTimeline with a duration of @msecs
milliseconds and transfers ownership of the timeline object to the
returned #ClutterEffectTemplate.


</description>
<parameters>
<parameter name="msecs">
<parameter_description> the duration of the effects, in milliseconds
</parameter_description>
</parameter>
<parameter name="alpha_func">
<parameter_description> an alpha function to use for the template
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterEffectTemplate object

Since: 0.6
</return>
</function>

<function name="ClutterEffectTemplate">
<description>
Controls if effects should clone or reference the templated timeline

Since: 0.6

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_geometry">
<description>
Sets the actor&apos;s fixed position and forces its minimum and natural
size, in pixels. This means the untransformed actor will have the
given geometry. This is the same as calling clutter_actor_set_position()
and clutter_actor_set_size().

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="geometry">
<parameter_description> A #ClutterGeometry
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_get_timestamp">
<description>
Return value: Number of microseconds since clutter_init() was called.

</description>
<parameters>
</parameters>
<return> Number of microseconds since clutter_init() was called.
</return>
</function>

<function name="clutter_actor_get_allocation_coords">
<description>
Gets the layout box an actor has been assigned.  The allocation can
only be assumed valid inside a paint() method; anywhere else, it
may be out-of-date.

An allocation does not incorporate the actor&apos;s scale or anchor point;
those transformations do not affect layout, only rendering.

The returned coordinates are in pixels.

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="x1">
<parameter_description> x1 coord
</parameter_description>
</parameter>
<parameter name="y1">
<parameter_description> y1 coord
</parameter_description>
</parameter>
<parameter name="x2">
<parameter_description> x2 coord
</parameter_description>
</parameter>
<parameter name="y2">
<parameter_description> y2 coord
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_score_remove">
<description>
Removes the #ClutterTimeline with the given id inside @score. If
the timeline has other timelines attached to it, those are removed
as well.

Since: 0.6

</description>
<parameters>
<parameter name="score">
<parameter_description> a #ClutterScore
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the id of the timeline to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_ramp_dec_func">
<description>
Convenience alpha function for a monotonic decreasing ramp. You
can use this function as the alpha function for clutter_alpha_set_func().


</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="dummy">
<parameter_description> unused argument
</parameter_description>
</parameter>
</parameters>
<return> an alpha value.

Since: 0.2
</return>
</function>

<function name="clutter_behaviour_opacity_new">
<description>
Creates a new #ClutterBehaviourOpacity object, driven by @alpha
which controls the opacity property of every actor, making it
change in the interval between @opacity_start and @opacity_end.


</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha instance, or %NULL
</parameter_description>
</parameter>
<parameter name="opacity_start">
<parameter_description> minimum level of opacity
</parameter_description>
</parameter>
<parameter name="opacity_end">
<parameter_description> maximum level of opacity
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterBehaviourOpacity

Since: 0.2
</return>
</function>

<function name="json_node_get_parent">
<description>
Retrieves the parent #JsonNode of @node.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return> the parent node, or %NULL if @node is the root node
</return>
</function>

<function name="clutter_timeout_pool_remove">
<description>
Removes a timeout function with @id from the timeout pool. The id
is the same returned when adding a function to the timeout pool with
clutter_timeout_pool_add().

Since: 0.4

</description>
<parameters>
<parameter name="pool">
<parameter_description> a #ClutterTimeoutPool
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the id of the timeout to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_dup_array">
<description>
Retrieves the #JsonArray stored inside a #JsonNode and returns it
with its reference count increased by one.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return> the #JsonArray with its reference count increased.
</return>
</function>

<function name="clutter_texture_set_from_file">
<description>
Sets the #ClutterTexture image data from an image file. In case of
failure, %FALSE is returned and @error is set.


</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterTexture
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> The filename of the image in GLib file name encoding
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the image was successfully loaded and set

Since: 0.8
</return>
</function>

<function name="clutter_texture_new">
<description>
Creates a new empty #ClutterTexture object.


</description>
<parameters>
</parameters>
<return> A newly created #ClutterTexture object.
</return>
</function>

<function name="json_generator_to_file">
<description>
Creates a JSON data stream and puts it inside @filename, overwriting the
current file contents. This operation is atomic.


</description>
<parameters>
<parameter name="generator">
<parameter_description> a #JsonGenerator
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> path to the target file
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if saving was successful.
</return>
</function>

<function name="clutter_model_iter_set_valist">
<description>
See clutter_model_iter_set(); this version takes a va_list for language
bindings.

Since: 0.6

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of column/value pairs, terminiated by -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_rotate_newx">
<description>
Creates a new #ClutterBehaviourRotate. This is the fixed point version
of clutter_behaviour_rotate_new().


</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha or %NULL
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> the rotation axis
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> the rotation direction
</parameter_description>
</parameter>
<parameter name="angle_start">
<parameter_description> the starting angle, in fixed point notation in degrees,
between 0 and 360.
</parameter_description>
</parameter>
<parameter name="angle_end">
<parameter_description> the final angle, in fixed point notation in degrees, between 0
and 360.
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterBehaviourRotate.

Since: 0.4
</return>
</function>

<function name="clutter_texture_set_from_yuv_data">
<description>
Sets a #ClutterTexture from YUV image data. If an error occurred,
%FALSE is returned and @error is set.

This function is likely to change in future versions.


</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterTexture
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> Image data in YUV type colorspace.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width in pixels of image data.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height in pixels of image data
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #ClutterTextureFlags
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for a #GError, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the texture was successfully updated

Since 0.4.
</return>
</function>

<function name="clutter_stage_set_perspective">
<description>
Sets the stage perspective.

Since: 0.4

</description>
<parameters>
<parameter name="stage">
<parameter_description> A #ClutterStage
</parameter_description>
</parameter>
<parameter name="fovy">
<parameter_description> the field of view angle, in degrees, in the y direction
</parameter_description>
</parameter>
<parameter name="aspect">
<parameter_description> the aspect ratio that determines the field of view in the x
direction. The aspect ratio is the ratio of x (width) to y (height)
</parameter_description>
</parameter>
<parameter name="z_near">
<parameter_description> the distance from the viewer to the near clipping
plane (always positive)
</parameter_description>
</parameter>
<parameter name="z_far">
<parameter_description> the  distance from the viewer to the far clipping
plane (always positive)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_apply_relative_transform_to_point">
<description>
Transforms @point in coordinates relative to the actor into
ancestor-relative coordinates using the relevant transform
stack (i.e. scale, rotation, etc).

If @ancestor is %NULL the ancestor will be the #ClutterStage. In
this case, the coordinates returned will be the coordinates on
the stage before the projection is applied. This is different from
the behaviour of clutter_actor_apply_transform_to_point().

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="ancestor">
<parameter_description> A #ClutterActor ancestor, or %NULL to use the
default #ClutterStage
</parameter_description>
</parameter>
<parameter name="point">
<parameter_description> A point as #ClutterVertex
</parameter_description>
</parameter>
<parameter name="vertex">
<parameter_description> The translated #ClutterVertex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_threads_add_timeout_full">
<description>
Sets a function to be called at regular intervals holding the Clutter lock,
with the given priority.  The function is called repeatedly until it
Return value: the ID (greater than 0) of the event source.

</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the timeout source. Typically this will be in the
range between #G_PRIORITY_DEFAULT and #G_PRIORITY_HIGH.
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> the time between calls to the function, in milliseconds
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to call when the timeout source is removed
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

Since: 0.4
</return>
</function>

<function name="clutter_log2x">
<description>
Calculates base 2 logarithm.

This function is some 2.5 times faster on x86, and over 12 times faster on
fpu-less arm, than using libc log().


</description>
<parameters>
<parameter name="x">
<parameter_description> value to calculate base 2 logarithm from
</parameter_description>
</parameter>
</parameters>
<return> base 2 logarithm.

Since: 0.4
</return>
</function>

<function name="json_node_free">
<description>
Frees the resources allocated by @node.

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_threads_leave">
<description>
Unlocks the Clutter thread lock.

Since: 0.4

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_get_duration">
<description>
Retrieves the duration of a #ClutterTimeline in milliseconds.
See clutter_timeline_set_duration().


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> the duration of the timeline, in milliseconds.

Since: 0.6
</return>
</function>

<function name="clutter_entry_get_invisible_char">
<description>
Return value: a Unicode character

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
</parameters>
<return> a Unicode character

</return>
</function>

<function name="clutter_actor_has_clip">
<description>
Determines whether the actor has a clip area set or not.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor has a clip area set.

Since: 0.1.1
</return>
</function>

<function name="clutter_key_event_symbol">
<description>
Retrieves the value of the key that caused @keyev.


</description>
<parameters>
<parameter name="keyev">
<parameter_description> A #ClutterKeyEvent
</parameter_description>
</parameter>
</parameters>
<return> The keysym representing the key
</return>
</function>

<function name="clutter_timeline_get_delay">
<description>
Retrieves the delay set using clutter_timeline_set_delay().


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> the delay in milliseconds.

Since: 0.4
</return>
</function>

<function name="json_parser_load_from_file">
<description>
Loads a JSON stream from the content of @filename and parses it. See
json_parser_load_from_data().


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #JsonParser
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> the path for the file to parse
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file was successfully loaded and parsed.
In case of error, @error is set accordingly and %FALSE is returned
</return>
</function>

<function name="clutter_score_is_playing">
<description>
Query state of a #ClutterScore instance.


</description>
<parameters>
<parameter name="score">
<parameter_description> A #ClutterScore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if score is currently playing

Since: 0.6
</return>
</function>

<function name="clutter_rectangle_set_border_width">
<description>
Sets the width (in pixel) of the border used by @rectangle.
A @width of 0 will unset the border.

Since: 0.2

</description>
<parameters>
<parameter name="rectangle">
<parameter_description> a #ClutterRectangle
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the border
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_clone_texture_get_parent_texture">
<description>
Retrieves the parent #ClutterTexture used by @clone.


</description>
<parameters>
<parameter name="clone">
<parameter_description> a #ClutterCloneTexture
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterTexture actor, or %NULL

Since: 0.2
</return>
</function>

<function name="clutter_stage_show_cursor">
<description>
Shows the cursor on the stage window

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_should_pick_paint">
<description>
Utility call for subclasses overiding the pick method.

This function should never be called directly by applications.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor should paint its silhouette,
%FALSE otherwise
</return>
</function>

<function name="clutter_timeline_skip">
<description>
Advance timeline by requested number of frames.

</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="n_frames">
<parameter_description> Number of frames to skip
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_iter_get">
<description>
Gets the value of one or more cells in the row referenced by @iter. The
variable argument list should contain integer column numbers, each column
column number followed by a place to store the value being retrieved. The
list is terminated by a -1.

For example, to get a value from column 0 with type %G_TYPE_STRING use:
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
clutter_model_iter_get (iter, 0, &amp;place_string_here, -1);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;

where place_string_here is a gchar* to be filled with the string. If
appropriate, the returned values have to be freed or unreferenced.

Since: 0.6

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of column/return location pairs, terminated by -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_opacity">
<description>
Sets the actor&apos;s opacity, with zero being completely transparent and
255 (0xff) being fully opaque.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="opacity">
<parameter_description> New opacity value for the actor.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_script_connect_signals_full">
<description>
Connects all the signals defined into a UI definition file to their
handlers.

This function is similar to clutter_script_connect_signals() but it
does not require GModule to be supported. It is mainly targeted at
interpreted languages for controlling the signal connection.

Since: 0.6

</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> signal connection function
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to be passed to the signal handlers, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_label_set_attributes">
<description>
Sets a #PangoAttrList; the attributes in the list are applied to the
label text. The attributes set with this function will be ignored
if the &quot;use_markup&quot; property
is %TRUE.

Since: 0.2

</description>
<parameters>
<parameter name="label">
<parameter_description> a #ClutterLabel
</parameter_description>
</parameter>
<parameter name="attrs">
<parameter_description> a #PangoAttrList
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_texture_pixmap_set_pixmap">
<description>
Sets the X Pixmap to which the texture should be bound.

Since: 0.8

</description>
<parameters>
<parameter name="texture">
<parameter_description> the texture to bind
</parameter_description>
</parameter>
<parameter name="pixmap">
<parameter_description> the X Pixmap to which the texture should be bound
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the Pixmap width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the Pixmap height
</parameter_description>
</parameter>
<parameter name="depth">
<parameter_description> the Pixmap depth, in number of bits
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="JsonGenerator">
<description>
Number of spaces to be used to indent when pretty printing.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_transformed_position">
<description>
Gets the absolute position of an actor, in pixels, relative
to the stage.

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_advance">
<description>
Advance timeline to requested frame number

</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="frame_num">
<parameter_description> Frame number to advance to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_bspline_split">
<description>
Splits a bezier spline into two at the control point at offset; if the
control point at offset is not one of the on-curve bezier points, the
bspline will be split at the nearest on-curve point before the offset.
The original bspline is shortened appropriately.


</description>
<parameters>
<parameter name="bs">
<parameter_description> a #ClutterBehaviourBspline
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> an offset of the control point at which to split the spline.
</parameter_description>
</parameter>
</parameters>
<return> new ClutterBehaviourBspline.

Since: 0.4
</return>
</function>

<function name="json_generator_to_data">
<description>
Generates a JSON data stream from @generator and returns it as a
buffer.


</description>
<parameters>
<parameter name="generator">
<parameter_description> a #JsonGenerator
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> return location for the length of the returned buffer, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated buffer holding a JSON data stream. Use
g_free() to free the allocated resources.
</return>
</function>

<function name="clutter_actor_set_shader">
<description>
Sets the #ClutterShader to be used when rendering @self.
If @shader is %NULL it will unset any currently set shader
for the actor.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="shader">
<parameter_description> a #ClutterShader or %NULL to unset the shader.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the shader was successfully applied

Since: 0.6
</return>
</function>

<function name="clutter_actor_set_depth">
<description>
Sets the Z co-ordinate of @self to @depth. The Units of which are dependant
on the perspective setup.

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="depth">
<parameter_description> Z co-ord
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_grab_keyboard">
<description>
Grabs keyboard events, after the grab is done keyboard events (&quot;key-press-event&quot;
and &quot;key-release-event&quot;) are delivered to this actor directly. The source
set in the event will be the actor that would have received the event if the
keyboard grab was not in effect.

Since: 0.6

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_init">
<description>
It will initialise everything needed to operate with Clutter and
parses some standard command line options. @argc and @argv are
adjusted accordingly so your own code will never see those standard
arguments.


</description>
<parameters>
<parameter name="argc">
<parameter_description> The number of arguments in @argv
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> A pointer to an array of arguments.
</parameter_description>
</parameter>
</parameters>
<return> 1 on success, &amp;lt; 0 on failure.
</return>
</function>

<function name="clutter_media_get_playing">
<description>
Retrieves the playing status of @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> A #ClutterMedia object
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if playing, %FALSE if stopped.
</return>
</function>

<function name="clutter_timeline_set_speed">
<description>
Set the speed in frames per second of the timeline.

</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="fps">
<parameter_description> New speed of timeline as frames per second
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="ClutterBehaviourEllipse">
<description>
The direction of the rotation.

Since: 0.4

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_clone_texture_new">
<description>
Creates an efficient &apos;clone&apos; of a pre-existing texture with which it 
shares the underlying pixbuf data.

You can use clutter_clone_texture_set_parent_texture() to change the
cloned texture.


</description>
<parameters>
<parameter name="texture">
<parameter_description> a #ClutterTexture, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterCloneTexture
</return>
</function>

<function name="clutter_color_subtract">
<description>
Subtracts @src2 from @src1 and saves the resulting
color inside @dest. This function assumes that the components
of @src1 are greater than the components of @src2; the result is,
otherwise, undefined.

The alpha channel of @dest is set as the minimum value
between the alpha channels of @src1 and @src2.

</description>
<parameters>
<parameter name="src1">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="src2">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> return location for the result
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_effect_template_new">
<description>
Creates a new #ClutterEffectTemplate, to be used with the effects API.

A #ClutterEffectTemplate binds a timeline and an alpha function and can
be used as a template for multiple calls of clutter_effect_fade(),
clutter_effect_move() and clutter_effect_scale().

This API is intended for simple animations involving a single actor;
for more complex animations, you should see #ClutterBehaviour and the
derived classes.


</description>
<parameters>
<parameter name="timeline">
<parameter_description>  A #ClutterTimeline for the template (will be cloned)
</parameter_description>
</parameter>
<parameter name="alpha_func">
<parameter_description> An alpha func to use for the template.
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterEffectTemplate

Since: 0.4
</return>
</function>

<function name="ClutterShader">
<description>
Whether the shader is currently used in the GL rendering pipeline.

Since: 0.6

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_color_to_string">
<description>
Return value: a newly-allocated text string

</description>
<parameters>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated text string

Since: 0.2
</return>
</function>

<function name="clutter_actor_show_all">
<description>
Calls clutter_actor_show() on all children of an actor (if any).

Since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_new">
<description>
Creates a new, non-default stage. A non-default stage is a new
top-level actor which can be used as another container. It works
exactly like the default stage, but while clutter_stage_get_default()
will always return the same instance, you will have to keep a pointer
to any #ClutterStage returned by clutter_stage_create().

The ability to support multiple stages depends on the current
backend. Use clutter_feature_available() and
%CLUTTER_FEATURE_STAGE_MULTIPLE to check at runtime whether a
backend supports multiple stages.


</description>
<parameters>
</parameters>
<return> a new stage, or %NULL if the default backend does
not support multiple stages. Use clutter_actor_destroy() to
programmatically close the returned stage.

Since: 0.8
</return>
</function>

<function name="ClutterRectangle">
<description>
Whether the #ClutterRectangle should be displayed with a border.

Since: 0.2

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_rectangle_get_border_color">
<description>
Gets the color of the border used by @rectangle and places
it into @color.

Since: 0.2

</description>
<parameters>
<parameter name="rectangle">
<parameter_description> a #ClutterRectangle
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_bspline_new">
<description>
Creates a new bezier spline behaviour. You can use this behaviour to drive
actors along the bezier spline, described by the @knots control points.

Bspline is defined by 3n + 1 points, n &amp;gt;=1; any trailing points passed
into this function are stored internally and used during any subsequent
clutter_behaviour_bspline_append_* operations.


</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha, or %NULL
</parameter_description>
</parameter>
<parameter name="knots">
<parameter_description> a list of #ClutterKnots representing individual control points
</parameter_description>
</parameter>
<parameter name="n_knots">
<parameter_description> the number of control points
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterBehaviour

Since: 0.4
</return>
</function>

<function name="clutter_actor_transform_stage_point">
<description>
This function translates screen coordinates (@x, @y) to
coordinates relative to the actor. For example, it can be used to translate
screen events from global screen coordinates into actor-local coordinates.

The conversion can fail, notably if the transform stack results in the
actor being projected on the screen as a mere line.

The conversion should not be expected to be pixel-perfect due to the
nature of the operation. In general the error grows when the skewing
of the actor rectangle on screen increases.

Note: This function is fairly computationally intensive.

Note: This function only works when the allocation is up-to-date, i.e. inside of paint()


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x screen coordinate of the point to unproject, in #ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y screen coordinate of the point to unproject, in #ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
<parameter name="x_out">
<parameter_description> return location for the unprojected x coordinance, in
#ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
<parameter name="y_out">
<parameter_description> return location for the unprojected y coordinance, in
#ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if conversion was successful.

Since: 0.6
</return>
</function>

<function name="clutter_actor_get_transformed_positionu">
<description>
Gets the absolute position of an actor, in #ClutterUnit&amp;lt;!-- --&amp;gt;s,
relative to the stage.

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_container_get_child_meta">
<description>
Retrieves the #ClutterChildMeta which contains the data about the
@container specific state for @actor.


</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor that is a child of @container.
</parameter_description>
</parameter>
</parameters>
<return> the #ClutterChildMeta for the @actor child of @container
or %NULL if the specifiec actor does not exist or the container is not
configured to provide #ClutterChildMeta&amp;lt;!-- --&amp;gt;s

Since: 0.8
</return>
</function>

<function name="clutter_actor_set_positionu">
<description>
Sets the actor&apos;s position in #ClutterUnit&amp;lt;!-- --&amp;gt;s relative to any
parent actor.

If a layout manager is in use, this position will override the
layout manager and force a fixed position.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> New left position of actor in #ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> New top position of actor in #ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="ClutterTimeline">
<description>
The ::marker-reached signal is emitted each time a timeline
reaches a marker set with clutter_timeline_add_marker_at_frame()
or clutter_timeline_add_marker_at_time(). This signal is
detailed with the name of the marker as well, so it is
possible to connect a callback to the ::marker-reached signal
for a specific marker with:

&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
clutter_timeline_add_marker_at_frame (timeline, &quot;foo&quot;, 24);
clutter_timeline_add_marker_at_frame (timeline, &quot;bar&quot;, 48);

g_signal_connect (timeline, &quot;marker-reached&quot;,
G_CALLBACK (each_marker_reached), NULL);
g_signal_connect (timeline, &quot;marker-reached::foo&quot;,
G_CALLBACK (foo_marker_reached), NULL);
g_signal_connect (timeline, &quot;marker-reached::bar&quot;,
G_CALLBACK (bar_marker_reached), NULL);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;

In the example, the first callback will be invoked for both
the &quot;foo&quot; and &quot;bar&quot; marker, while the second and third callbacks
will be invoked for the &quot;foo&quot; or &quot;bar&quot; markers, respectively.

Since: 0.8

</description>
<parameters>
<parameter name="timeline">
<parameter_description> the #ClutterTimeline which received the signal
</parameter_description>
</parameter>
<parameter name="marker_name">
<parameter_description> the name of the marker reached
</parameter_description>
</parameter>
<parameter name="frame_num">
<parameter_description> the frame number
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_x">
<description>
Sets the actor&apos;s X coordinate, relative to its parent, in pixels.
Overrides any layout manager and forces a fixed position for
the actor.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the actor&apos;s position on the X axis
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_y">
<description>
Sets the actor&apos;s Y coordinate, relative to its parent, in pixels.
Overrides any layout manager and forces a fixed position for
the actor.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the actor&apos;s position on the Y axis
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_depth_new">
<description>
Creates a new #ClutterBehaviourDepth which can be used to control
the ClutterActor:depth property of a set of #ClutterActor&amp;lt;!-- --&amp;gt;s.


</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha or %NULL
</parameter_description>
</parameter>
<parameter name="depth_start">
<parameter_description> initial value of the depth
</parameter_description>
</parameter>
<parameter name="depth_end">
<parameter_description> final value of the depth
</parameter_description>
</parameter>
</parameters>
<return> the newly created behaviour

Since: 0.4
</return>
</function>

<function name="ClutterEntry">
<description>
The ::activate signal is emitted each time the entry is &apos;activated&apos;
by the user, normally by pressing the &apos;Enter&apos; key.

Since: 0.4

</description>
<parameters>
<parameter name="entry">
<parameter_description> the actor which received the event
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_get_n_columns">
<description>
Retrieves the number of columns inside @model.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
</parameters>
<return> the number of columns

Since: 0.6
</return>
</function>

<function name="json_node_get_array">
<description>
Retrieves the #JsonArray stored inside a #JsonNode


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return> the #JsonArray
</return>
</function>

<function name="clutter_model_iter_is_last">
<description>
Gets whether the iterator is at the end of the model to which it
belongs.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if @iter is the last iter in the filtered model.

Since: 0.6
</return>
</function>

<function name="clutter_label_set_color">
<description>
Sets the color of @label.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #ClutterLabel
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_scalex">
<description>
Fixed point version of clutter_actor_get_scale().

Retrieves the scale factors of an actor.

Since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="scale_x">
<parameter_description> Location to store horizonal scale factor, or  %NULL.
</parameter_description>
</parameter>
<parameter name="scale_y">
<parameter_description> Location to store vertical scale factor, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_set_string">
<description>
Sets @value as the string content of the @node, replacing any existing
content.

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode of type %JSON_NODE_VALUE
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a string value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_scalex">
<description>
Fixed point version of clutter_actor_set_scale().

Scales an actor with the given factors. The scaling is always
relative to the anchor point.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="scale_x">
<parameter_description> #ClutterFixed factor to scale actor by horizontally.
</parameter_description>
</parameter>
<parameter name="scale_y">
<parameter_description> #ClutterFixed factor to scale actor by vertically.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_add">
<description>
Adds @src2 to @src1 and saves the resulting color
inside @dest.

The alpha channel of @dest is as the maximum value
between the alpha channels of @src1 and @src2.

</description>
<parameters>
<parameter name="src1">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="src2">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> return location for the result
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_reactive">
<description>
Sets @actor as reactive. Reactive actors will receive events.

Since: 0.6

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="reactive">
<parameter_description> whether the actor should be reactive to events
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_set_display">
<description>
Sets the display connection clutter should use; must be called
before clutter_init().

Since: 0.8

</description>
<parameters>
<parameter name="xdpy">
<parameter_description> pointer to a X display connection.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_alpha_new_full">
<description>
Creates a new #ClutterAlpha instance and sets the timeline
and alpha function.


</description>
<parameters>
<parameter name="timeline">
<parameter_description> #ClutterTimeline timeline
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> #ClutterAlphaFunc alpha function
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to be passed to the alpha function
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> notify to be called when removing the alpha function
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterAlpha

Since: 0.2
</return>
</function>

<function name="clutter_stage_get_resolutionx">
<description>
Fixed point version of clutter_stage_get_resolution().


</description>
<parameters>
<parameter name="stage">
<parameter_description> the #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> the resolution of the stage

Since: 0.6
</return>
</function>

<function name="clutter_backend_set_double_click_distance">
<description>
Sets the maximum distance used to verify a double click event.

Since: 0.4

</description>
<parameters>
<parameter name="backend">
<parameter_description> a #ClutterBackend
</parameter_description>
</parameter>
<parameter name="distance">
<parameter_description> a distance, in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_set_boolean">
<description>
Sets @value as the boolean content of the @node, replacing any existing
content.

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode of type %JSON_NODE_VALUE
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a boolean value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_main">
<description>
Starts the Clutter mainloop.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_get_actors">
<description>
Retrieves all the actors to which @behave applies. It is not recommended
for derived classes to use this in there alpha notify method but use 
#clutter_behaviour_actors_foreach as it avoids alot of needless allocations.


</description>
<parameters>
<parameter name="behave">
<parameter_description> a #ClutterBehaviour
</parameter_description>
</parameter>
</parameters>
<return> a list of actors. You should free the returned list
with g_slist_free() when finished using it.

Since: 0.2
</return>
</function>

<function name="clutter_actor_get_reactive">
<description>
Checks whether @actor is marked as reactive.


</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor is reactive

Since: 0.6
</return>
</function>

<function name="clutter_color_lighten">
<description>
Lightens @src by a fixed amount, and saves the changed
color in @dest.

</description>
<parameters>
<parameter name="src">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> return location for the lighter color
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_get_double">
<description>
Gets the double value stored inside a #JsonNode


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode of type %JSON_NODE_VALUE
</parameter_description>
</parameter>
</parameters>
<return> a double value.
</return>
</function>

<function name="clutter_qdivx">
<description>

</description>
<parameters>
<parameter name="op1">
<parameter_description> #ClutterFixed
</parameter_description>
</parameter>
<parameter name="op2">
<parameter_description> #ClutterFixed
</parameter_description>
</parameter>
</parameters>
<return> #ClutterFixed.

Divides two fixed values using 64bit arithmetic; this provides
significantly better precission than the #CLUTTER_FIXED_DIV macro,
but at performance cost.

Since: 0.4
</return>
</function>

<function name="clutter_event_get_time">
<description>
Retrieves the time of the event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> the time of the event, or %CLUTTER_CURRENT_TIME

Since: 0.4
</return>
</function>

<function name="clutter_effect_template_get_timeline_clone">
<description>
Gets whether timelines should be cloned when creating a new
effect or just referenced.


</description>
<parameters>
<parameter name="template_">
<parameter_description>  A #ClutterEffectTemplate
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the templates timeline is to be cloned.

Since: 0.6
</return>
</function>

<function name="clutter_group_new">
<description>
Create a new  #ClutterGroup.


</description>
<parameters>
</parameters>
<return> the newly created #ClutterGroup actor
</return>
</function>

<function name="ClutterX11TexturePixmap">
<description>
The ::hide signal is emitted to ask the texture to update its
content from its source pixmap.

Since: 0.8

</description>
<parameters>
<parameter name="texture">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_path_clear">
<description>
Removes all knots from a path

Since: 0.2

</description>
<parameters>
<parameter name="pathb">
<parameter_description> a #ClutterBehvaiourPath
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_label_get_ellipsize">
<description>
Return value: #PangoEllipsizeMode

</description>
<parameters>
<parameter name="label">
<parameter_description> a #ClutterLabel
</parameter_description>
</parameter>
</parameters>
<return> #PangoEllipsizeMode

Since: 0.2
</return>
</function>

<function name="clutter_behaviour_ellipse_get_width">
<description>
Gets the width of the elliptical path.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
</parameters>
<return> the width of the path

Since: 0.4
</return>
</function>

<function name="clutter_atani">
<description>
Fast fixed-point version of the arctangent function.


</description>
<parameters>
<parameter name="x">
<parameter_description> The tangent to calculate the angle for
</parameter_description>
</parameter>
</parameters>
<return> The angle in radians represented as a #ClutterFixed
for which the tangent is @x.
</return>
</function>

<function name="clutter_get_show_fps">
<description>
Return value: %TRUE if Clutter should show the FPS.

</description>
<parameters>
</parameters>
<return> %TRUE if Clutter should show the FPS.

Since: 0.4
</return>
</function>

<function name="clutter_behaviour_opacity_get_bounds">
<description>
Gets the initial and final levels of the opacity applied by @behaviour
on each actor it controls.

Since: 0.6

</description>
<parameters>
<parameter name="behaviour">
<parameter_description> a #ClutterBehaviourOpacity
</parameter_description>
</parameter>
<parameter name="opacity_start">
<parameter_description> return location for the minimum level of opacity, or %NULL
</parameter_description>
</parameter>
<parameter name="opacity_end">
<parameter_description> return location for the maximum level of opacity, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="CLUTTER_ALPHA_RAMP_DEC">
<description>
Convenience symbol for clutter_ramp_dec_func().

Since: 0.2

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_threads_enter">
<description>
Locks the Clutter thread lock.

Since: 0.4

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_key_event_code">
<description>
Retrieves the keycode of the key that caused @keyev.


</description>
<parameters>
<parameter name="keyev">
<parameter_description> A #ClutterKeyEvent
</parameter_description>
</parameter>
</parameters>
<return> The keycode representing the key
</return>
</function>

<function name="clutter_label_get_font_name">
<description>
Retrieves the font used by @label.


</description>
<parameters>
<parameter name="label">
<parameter_description> a #ClutterLabel
</parameter_description>
</parameter>
</parameters>
<return> a string containing the font name, in a format
understandable by pango_font_description_from_string().  The
string is owned by @label and should not be modified
or freed.
</return>
</function>

<function name="clutter_container_remove_valist">
<description>
Alternative va_list version of clutter_container_remove().

Since: 0.4

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="first_actor">
<parameter_description> the first #ClutterActor to add
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> list of actors to remove, followed by %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_size">
<description>
Sets the actor&apos;s size request in pixels. This overrides any
&quot;normal&quot; size request the actor would have. For example
a text actor might normally request the size of the text;
this function would force a specific size instead.

If @width and/or @height are -1 the actor will use its
&quot;normal&quot; size request instead of overriding it, i.e.
you can &quot;unset&quot; the size with -1.

This function sets or unsets both the minimum and natural size.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> New width of actor in pixels, or -1
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> New height of actor in pixels, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_insert_value">
<description>
Sets the data in the cell specified by @iter and @column. The type of 
@value must be convertable to the type of the column. If the row does
not exist then it is created.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> position of the row to modify
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> column to modify
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> new value for the cell
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_shader_get_is_enabled">
<description>
Checks whether @shader is enabled.


</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the shader is enabled.

Since: 0.6
</return>
</function>

<function name="clutter_actor_hide_all">
<description>
Calls clutter_actor_hide() on all child actors (if any).

Since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_copy">
<description>
Copies @node. If the node contains complex data types then the reference
count of the objects is increased.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return> the copied #JsonNode
</return>
</function>

<function name="clutter_frame_source_add">
<description>
Simple wrapper around clutter_frame_source_add_full().


</description>
<parameters>
<parameter name="interval">
<parameter_description> the time between calls to the function, in milliseconds
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

Since: 0.8
</return>
</function>

<function name="clutter_pow2x">
<description>
Calculates 2 to x power.

This function is around 11 times faster on x86, and around 22 times faster
on fpu-less arm than libc pow(2, x).


</description>
<parameters>
<parameter name="x">
<parameter_description> exponent
</parameter_description>
</parameter>
</parameters>
<return> 2 in x power.

Since: 0.4
</return>
</function>

<function name="clutter_actor_get_abs_allocation_vertices">
<description>
Calculates the transformed screen coordinates of the four corners of
the actor; the returned vertices relate to the #ClutterActorBox
coordinates  as follows:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;v[0] contains (x1, y1)&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;v[1] contains (x2, y1)&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;v[2] contains (x1, y2)&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;v[3] contains (x2, y2)&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="verts">
<parameter_description> Pointer to a location of an array of 4 #ClutterVertex where to
store the result.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_entry_set_cursor_position">
<description>
Sets the position of the cursor. The @position must be less than or
equal to the number of characters in the entry. A value of -1 indicates
that the position should be set after the last character in the entry.
Note that this position is in characters, not in bytes.

Since: 0.6

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #ClutterEntry
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position of the cursor.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_knot_free">
<description>
Frees the memory of an allocated knot.

Since: 0.2

</description>
<parameters>
<parameter name="knot">
<parameter_description> a #ClutterKnot
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_rectangle_new">
<description>
Creates a new #ClutterActor with a rectangular shape.


</description>
<parameters>
</parameters>
<return> a new #ClutterActor
</return>
</function>

<function name="clutter_behaviour_bspline_adjust">
<description>
Change the coordinaces of control point at index to those represented by
the knot.

Since: 0.4

</description>
<parameters>
<parameter name="bs">
<parameter_description> a #ClutterBehaviourBspline
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> an index of control point to ajdust
</parameter_description>
</parameter>
<parameter name="knot">
<parameter_description> a #ClutterKnot with new coordinances for the control point.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_get_option_group">
<description>
Return value: a GOptionGroup for the commandline arguments

</description>
<parameters>
</parameters>
<return> a GOptionGroup for the commandline arguments
recognized by Clutter

Since: 0.2
</return>
</function>

<function name="clutter_script_get_type_from_name">
<description>
Looks up a type by name, using the virtual function that 
#ClutterScript has for that purpose. This function should
rarely be used.


</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="type_name">
<parameter_description> name of the type to look up
</parameter_description>
</parameter>
</parameters>
<return> the type for the requested type name, or
%G_TYPE_INVALID if not corresponding type was found.

Since: 0.6
</return>
</function>

<function name="clutter_event_get_state">
<description>
Retrieves the modifier state of the event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> the modifier state parameter, or 0

Since: 0.4
</return>
</function>

<function name="clutter_value_set_unit">
<description>
Sets @value to @units

Since: 0.8

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue initialized to #CLUTTER_TYPE_UNIT
</parameter_description>
</parameter>
<parameter name="units">
<parameter_description> the units to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_rotationu">
<description>
Sets the rotation angle of @self around the given axis.

This function is the units based variant of clutter_actor_set_rotation().

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> the axis of rotation
</parameter_description>
</parameter>
<parameter name="angle">
<parameter_description> the angle of rotation
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate of the rotation center, in #ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate of the rotation center, in #ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
<parameter name="z">
<parameter_description> Z coordinate of the rotation center, in #ClutterUnit&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_rotationx">
<description>
Sets the rotation angle of @self around the given axis.

This function is the fixed point variant of clutter_actor_set_rotation().

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> the axis of rotation
</parameter_description>
</parameter>
<parameter name="angle">
<parameter_description> the angle of rotation
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate of the rotation center
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate of the rotation center
</parameter_description>
</parameter>
<parameter name="z">
<parameter_description> Z coordinate of the rotation center
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_shader_set_fragment_source">
<description>
Sets the GLSL source code to be used by a #ClutterShader for the fragment
program.

Since: 0.6

</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> GLSL source code.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> length of source buffer (currently ignored)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_scale_get_boundsx">
<description>
Fixed point version of clutter_behaviour_scale_get_bounds().

Retrieves the bounds used by scale behaviour.

Since: 0.4

</description>
<parameters>
<parameter name="scale">
<parameter_description> a #ClutterBehaviourScale
</parameter_description>
</parameter>
<parameter name="x_scale_start">
<parameter_description> return location for the initial scale factor on the X
axis, or %NULL
</parameter_description>
</parameter>
<parameter name="y_scale_start">
<parameter_description> return location for the initial scale factor on the Y
axis, or %NULL
</parameter_description>
</parameter>
<parameter name="x_scale_end">
<parameter_description> return location for the final scale factor on the X axis,
or %NULL
</parameter_description>
</parameter>
<parameter name="y_scale_end">
<parameter_description> return location for the final scale factor on the Y axis,
or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_fullscreen">
<description>
Asks to place the stage window in the fullscreen state. Note that you
shouldn&apos;t assume the window is definitely full screen afterward, because
other entities (e.g. the user or window manager) could unfullscreen it
again, and not all window managers honor requests to fullscreen windows.

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_square_func">
<description>
Convenience alpha function for a square wave. You can use this
function as the alpha function for clutter_alpha_set_func().


</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="dummy">
<parameter_description> unused argument
</parameter_description>
</parameter>
</parameters>
<return> an alpha value

Since: 0.4
</return>
</function>

<function name="clutter_behaviour_ellipse_set_angle_tilt">
<description>
Sets the angle at which the ellipse should be tilted around it&apos;s center.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> a #ClutterRotateAxis
</parameter_description>
</parameter>
<parameter name="angle_tilt">
<parameter_description> tilt of the elipse around the center in the given axis in
degrees.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_get_value">
<description>
Retrieves a value from a #JsonNode and copies into @value. When done
using it, call g_value_unset() on the #GValue.

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> return location for an uninitialized value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_appendv">
<description>
Creates and appends a new row to the #ClutterModel, setting the row
values for the given @columns upon creation.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="n_columns">
<parameter_description> the number of columns and values
</parameter_description>
</parameter>
<parameter name="columns">
<parameter_description> a vector with the columns to set
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a vector with the values
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_anchor_pointu">
<description>
Gets the current anchor point of the @actor in #ClutterUnit&amp;lt;!-- --&amp;gt;s.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="anchor_x">
<parameter_description> return location for the X coordinace of the anchor point
</parameter_description>
</parameter>
<parameter name="anchor_y">
<parameter_description> return location for the X coordinace of the anchor point
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_preferred_width">
<description>
Computes the requested minimum and natural widths for an actor,
optionally depending on the specified height, or if they are
already computed, returns the cached values.

An actor may not get its request - depending on the layout
manager that&apos;s in effect.

A request should not incorporate the actor&apos;s scale or anchor point;
those transformations do not affect layout, only rendering.

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="for_height">
<parameter_description> available height when computing the preferred width,
or a negative value to indicate that no height is defined
</parameter_description>
</parameter>
<parameter name="min_width_p">
<parameter_description> return location for min width, or %NULL
</parameter_description>
</parameter>
<parameter name="natural_width_p">
<parameter_description> return location for min width, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_ensure_current">
<description>
This function essentially makes sure the right GL context is
current for the passed stage. It is not intended to
be used by applications.

Since: 0.8

</description>
<parameters>
<parameter name="stage">
<parameter_description> the #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="ClutterBehaviour">
<description>
The ::removed signal is emitted each time a behaviour is not applied
to an actor anymore.


</description>
<parameters>
<parameter name="behaviour">
<parameter_description> the #ClutterBehaviour that received the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the removed actor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_texture_new_from_actor">
<description>
Creates a new #ClutterTexture object with its source a prexisting
actor (and associated children). The textures content will contain
&apos;live&apos; redirected output of the actors scene.

Note this function is intented as a utility call for uniformly applying
shaders to groups and other potential visual effects. It requires that
the %CLUTTER_FEATURE_OFFSCREEN feature is supported by the current backend 
and the target system.

Some tips on usage:

&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;
&amp;lt;para&amp;gt;The source actor must be made visible (i.e by calling
#clutter_actor_show). The source actor does not however have to
have a parent.&amp;lt;/para&amp;gt;
&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;
&amp;lt;para&amp;gt;Avoid reparenting the source with the created texture.&amp;lt;/para&amp;gt;
&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;
&amp;lt;para&amp;gt;A group can be padded with a transparent rectangle as to
provide a border to contents for shader output (blurring text
for example).&amp;lt;/para&amp;gt;
&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;
&amp;lt;para&amp;gt;The texture will automatically resize to contain a further
transformed source. However, this involves overhead and can be
avoided by placing the source actor in a bounding group
sized large enough to contain any child tranformations.&amp;lt;/para&amp;gt;
&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;
&amp;lt;para&amp;gt;Uploading pixel data to the texture (e.g by using
clutter_actor_set_from_file()) will destroy the offscreen texture data
and end redirection.&amp;lt;/para&amp;gt;
&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;
&amp;lt;para&amp;gt;cogl_texture_get_data() with the handle returned by
clutter_texture_get_cogl_texture() can be used to read the
offscreen texture pixels into a pixbuf.&amp;lt;/para&amp;gt;
&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;


</description>
<parameters>
<parameter name="actor">
<parameter_description> A source #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> A newly created #ClutterTexture object, or %NULL on failure.

Since: 0.6
</return>
</function>

<function name="clutter_behaviour_get_alpha">
<description>
Retrieves the #ClutterAlpha object bound to @behave.


</description>
<parameters>
<parameter name="behave">
<parameter_description> a #ClutterBehaviour
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterAlpha object, or %NULL if no alpha
object has been bound to this behaviour.

Since: 0.2
</return>
</function>

<function name="CLUTTER_ALPHA_EXP_INC">
<description>
Convenience symbol for clutter_exp_inc_func()

Since: 0.4

</description>
<parameters>
</parameters>
<return></return>
</function>

</root>
