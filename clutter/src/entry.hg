/* Copyright (C) 2007 The cluttermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <cluttermm/actor.h>
#include <cluttermm/color.h>
#include <pangomm.h>
 
_DEFS(cluttermm,clutter)
_PINCLUDE(cluttermm/private/actor_p.h)


namespace Clutter
{

class Entry :
  public Actor
{
  _CLASS_GOBJECT(Entry, ClutterEntry, CLUTTER_ENTRY, Actor, ClutterActor)

protected:
  _CTOR_DEFAULT()
  _WRAP_CTOR(Entry(const Glib::ustring& font_name, const Glib::ustring& text), clutter_entry_new_with_text)
  _WRAP_CTOR(Entry(const Glib::ustring& font_name, const Glib::ustring& text, const Color& color), clutter_entry_new_full)

public:
  _WRAP_CREATE()
  _WRAP_CREATE(const Glib::ustring& font_name, const Glib::ustring& text);
  _WRAP_CREATE(const Glib::ustring& font_name, const Glib::ustring& text, const Color& color);

#m4 _CONVERSION(`ClutterActor*',`Glib::RefPtr<Entry>',`Glib::wrap((ClutterEntry*)$3)')

  _WRAP_METHOD(void set_text(const Glib::ustring& text), clutter_entry_set_text)
  _WRAP_METHOD(Glib::ustring get_text() const, clutter_entry_get_text)
  _WRAP_METHOD(void set_font_name(const Glib::ustring& font_name), clutter_entry_set_font_name)
  _WRAP_METHOD(Glib::ustring get_font_name() const, clutter_entry_get_font_name)

  _WRAP_METHOD_DOCS_ONLY(clutter_entry_get_color)
  Color get_color() const;
  _IGNORE(clutter_entry_get_color)
  _WRAP_METHOD(void set_color(const Color& color), clutter_entry_set_color)

  _WRAP_METHOD(Glib::RefPtr<Pango::Layout> get_layout(), clutter_entry_get_layout)
  _WRAP_METHOD(Glib::RefPtr<const Pango::Layout> get_layout() const, clutter_entry_get_layout, constversion)

  _WRAP_METHOD(Pango::Alignment get_alignment() const, clutter_entry_get_alignment)
  _WRAP_METHOD(void set_alignment(Pango::Alignment wrap_mode), clutter_entry_set_alignment)

  _WRAP_METHOD(int get_cursor_position() const, clutter_entry_get_cursor_position)
  _WRAP_METHOD(void set_cursor_position(int position), clutter_entry_set_cursor_position)

  _WRAP_METHOD(void insert(gunichar wc), clutter_entry_insert_unichar)
  _WRAP_METHOD(void insert(const Glib::ustring& text, gssize position), clutter_entry_insert_text)

  _WRAP_METHOD(void delete_chars(guint len), clutter_entry_delete_chars)
  _WRAP_METHOD(void delete_text(gssize start_pos, gssize end_pos), clutter_entry_delete_text)

  _WRAP_METHOD(void set_visible_cursor(bool visible), clutter_entry_set_visible_cursor)
  _WRAP_METHOD(bool get_visible_cursor() const, clutter_entry_get_visible_cursor)

  _WRAP_METHOD(void set_visibility(bool visible), clutter_entry_set_visibility)
  _WRAP_METHOD(bool get_visibility() const, clutter_entry_get_visibility)

  _WRAP_METHOD(void set_invisible_char(gunichar wc), clutter_entry_set_invisible_char)
  _WRAP_METHOD(gunichar get_invisible_char() const, clutter_entry_get_invisible_char)

  _WRAP_METHOD(int get_max_length() const, clutter_entry_get_max_length)
  _WRAP_METHOD(void set_max_length(int max_length), clutter_entry_set_max_length)

  _WRAP_METHOD(void handle_key_event(KeyEvent* kev), clutter_entry_handle_key_event)

#m4 _CONVERSION(`ClutterGeometry*', `const Geometry&', `Glib::wrap($3)')
#m4 _CONVERSION(`const Geometry&', `ClutterGeometry*', `const_cast<ClutterGeometry*>(($3).gobj())')
  _WRAP_SIGNAL(void text_changed(), "text_changed")
  _WRAP_SIGNAL(void cursor_event(const Geometry& geometry), "cursor_event")
  _WRAP_SIGNAL(void activate(), "activate")

  _WRAP_PROPERTY("alignment", Pango::Alignment)
  _WRAP_PROPERTY("color", Color)
  _WRAP_PROPERTY("cursor-visible", bool)
  _WRAP_PROPERTY("entry-padding", unsigned int)
  _WRAP_PROPERTY("font-name", Glib::ustring)
  _WRAP_PROPERTY("max-length", int)
  _WRAP_PROPERTY("position", int)
  _WRAP_PROPERTY("text", Glib::ustring)
  _WRAP_PROPERTY("text-visible", bool)
  _WRAP_PROPERTY("x-align", double)

protected:
  _WRAP_VFUNC(void paint_cursor(), paint_cursor)
};

} // namespace Clutter

//vim: ts=2,sw=2
