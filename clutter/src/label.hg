/* Copyright (C) 2007 The cluttermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <cluttermm/actor.h>
#include <cluttermm/color.h>
#include <pangomm.h>
 
_DEFS(cluttermm,clutter)
_PINCLUDE(cluttermm/private/actor_p.h)


namespace Clutter
{

class Label :
  public Actor
{
  _CLASS_GOBJECT(Label, ClutterLabel, CLUTTER_LABEL, Actor, ClutterActor)

protected:
  _CTOR_DEFAULT()
  _WRAP_CTOR(Label(const Glib::ustring& font_name, const Glib::ustring& text), clutter_label_new_with_text)
  _WRAP_CTOR(Label(const Glib::ustring& font_name, const Glib::ustring& text, const Color& color), clutter_label_new_full)

public:
  _WRAP_CREATE()
  _WRAP_CREATE(const Glib::ustring& font_name, const Glib::ustring& text);
  _WRAP_CREATE(const Glib::ustring& font_name, const Glib::ustring& text, const Color& color);

#m4 _CONVERSION(`ClutterActor*',`Glib::RefPtr<Label>',`Glib::wrap((ClutterLabel*)$3)')

  _WRAP_METHOD(void set_text(const Glib::ustring& text), clutter_label_set_text)
  _WRAP_METHOD(Glib::ustring get_text() const, clutter_label_get_text)
  _WRAP_METHOD(void set_font_name(const Glib::ustring& font_name), clutter_label_set_font_name)
  _WRAP_METHOD(Glib::ustring get_font_name() const, clutter_label_get_font_name)

  _WRAP_METHOD_DOCS_ONLY(clutter_label_get_color)
  Color get_color() const;
  _IGNORE(clutter_label_get_color)
  _WRAP_METHOD(void set_color(const Color& color), clutter_label_set_color)

  _WRAP_METHOD(Pango::EllipsizeMode get_ellipsize() const, clutter_label_get_ellipsize)
  _WRAP_METHOD(void set_ellipsize(Pango::EllipsizeMode wrap_mode), clutter_label_set_ellipsize)

  _WRAP_METHOD(bool get_line_wrap() const, clutter_label_get_line_wrap)
  _WRAP_METHOD(void set_line_wrap(bool wrap), clutter_label_set_line_wrap)

  _WRAP_METHOD(bool get_use_markup() const, clutter_label_get_use_markup)
  _WRAP_METHOD(void set_use_markup(bool wrap), clutter_label_set_use_markup)

  _WRAP_METHOD(Pango::WrapMode get_line_wrap_mode() const, clutter_label_get_line_wrap_mode)
  _WRAP_METHOD(void set_line_wrap_mode(Pango::WrapMode wrap_mode), clutter_label_set_line_wrap_mode)

  _WRAP_METHOD(Glib::RefPtr<Pango::Layout> get_layout(), clutter_label_get_layout)
  _WRAP_METHOD(Glib::RefPtr<const Pango::Layout> get_layout() const, clutter_label_get_layout, constversion)

  _WRAP_METHOD(Pango::AttrList get_attributes() const, clutter_label_get_attributes)

  // TODO: check if AttrList param should be const
  // Probably not. It is reference counted. murrayc.
  _WRAP_METHOD(void set_attributes(Pango::AttrList& attrs), clutter_label_set_attributes)

  _WRAP_METHOD(Pango::Alignment get_alignment() const, clutter_label_get_alignment)
  _WRAP_METHOD(void set_alignment(Pango::Alignment wrap_mode), clutter_label_set_alignment)

  _WRAP_METHOD(bool get_justify() const, clutter_label_get_justify)
  _WRAP_METHOD(void set_justify(bool justify), clutter_label_set_justify)

  _WRAP_PROPERTY("alignment", Pango::Alignment)
  _WRAP_PROPERTY("attributes", Pango::AttrList)
  _WRAP_PROPERTY("color", Color)
  _WRAP_PROPERTY("ellipsize", Pango::EllipsizeMode)
  _WRAP_PROPERTY("font-name", Glib::ustring)
  _WRAP_PROPERTY("justify", bool)
  _WRAP_PROPERTY("text", Glib::ustring)
  _WRAP_PROPERTY("use-markup", bool)
  _WRAP_PROPERTY("wrap", bool)
  _WRAP_PROPERTY("wrap-mode", Pango::WrapMode)
};

} // namespace Clutter

//vim: ts=2,sw=2
