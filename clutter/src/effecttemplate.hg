/* Copyright (C) 2007 The cluttermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <cluttermm/alpha.h>
#include <cluttermm/actor.h>

_DEFS(cluttermm,clutter)
_PINCLUDE(glibmm/private/object_p.h)


namespace Clutter
{

class EffectTemplate :
  public Glib::Object
{
  _CLASS_GOBJECT(EffectTemplate, ClutterEffectTemplate, CLUTTER_EFFECT_TEMPLATE, Glib::Object, GObject)

public:
  typedef sigc::slot<guint32, const Glib::RefPtr<Alpha>&> SlotAlphaFunc;
  typedef sigc::slot<void, const Glib::RefPtr<Actor>&> SlotEffectCompleteFunc;

protected:
  EffectTemplate(const Glib::RefPtr<Timeline>& timeline, const SlotAlphaFunc& alpha_func);
  EffectTemplate(guint msecs, const SlotAlphaFunc& alpha_func);
  _IGNORE(clutter_effect_template_new, clutter_effect_template_new_full, 
          clutter_effect_template_new_for_duration,
	  clutter_effect_template_construct)

public:
  _WRAP_CREATE(const Glib::RefPtr<Timeline>& timeline, const SlotAlphaFunc& alpha_func)
  _WRAP_CREATE(guint msecs, const SlotAlphaFunc& alpha_func)

  _WRAP_METHOD(void set_timeline_clone(bool setting), clutter_effect_template_set_timeline_clone)
  _WRAP_METHOD(bool get_timeline_clone() const, clutter_effect_template_get_timeline_clone)

  _WRAP_METHOD_DOCS_ONLY(clutter_effect_fade)
  Glib::RefPtr<Timeline> fade(const Glib::RefPtr<Actor>& actor, guint8 opacity_end, const SlotEffectCompleteFunc& func);

  _WRAP_METHOD_DOCS_ONLY(clutter_effect_depth)
  Glib::RefPtr<Timeline> depth(const Glib::RefPtr<Actor>& actor, int depth_end, const SlotEffectCompleteFunc& func);

  _WRAP_METHOD_DOCS_ONLY(clutter_effect_move)
  Glib::RefPtr<Timeline> move(const Glib::RefPtr<Actor>& actor, int x, int y, const SlotEffectCompleteFunc& func);

  // TODO: Use C++ container for knots
  _WRAP_METHOD_DOCS_ONLY(clutter_effect_path)
  Glib::RefPtr<Timeline> path(const Glib::RefPtr<Actor>& actor, const ClutterKnot* knots, guint n_knots, const SlotEffectCompleteFunc& func);

  _WRAP_METHOD_DOCS_ONLY(clutter_effect_scale)
  Glib::RefPtr<Timeline> scale(const Glib::RefPtr<Actor>& actor, double x_scale_end, double y_scale_end, const SlotEffectCompleteFunc& func);

  _WRAP_METHOD_DOCS_ONLY(clutter_effect_rotate)
  Glib::RefPtr<Timeline> rotate(const Glib::RefPtr<Actor>& actor, RotateAxis axis, double angle_end, int center_x, int center_y, int center_z, RotateDirection direction, const SlotEffectCompleteFunc& func);

  _WRAP_PROPERTY("timeline", Glib::RefPtr<Timeline>)
  _WRAP_PROPERTY("clone", bool)
};

} // namespace Clutter

//vim: ts=2,sw=2
