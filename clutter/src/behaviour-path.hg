/* Copyright (C) 2007 The cluttermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <cluttermm/behaviour.h>
#include <cluttermm/scriptable.h>
#include <cluttermm/alpha.h>
#include <cluttermm/types.h>
 
_DEFS(cluttermm,clutter)
_PINCLUDE(cluttermm/private/behaviour_p.h)


namespace Clutter
{

class BehaviourPath 
: public Behaviour, 
  public Scriptable
{
  _CLASS_GOBJECT(BehaviourPath, ClutterBehaviourPath, CLUTTER_BEHAVIOUR_PATH, Behaviour, ClutterBehaviour)
  _IMPLEMENTS_INTERFACE(Scriptable)

protected:
  // TODO: pass the knots as a C++ container
  _WRAP_CTOR(BehaviourPath(const Glib::RefPtr<Alpha>& alpha, const ClutterKnot* knots, guint n_knots), clutter_behaviour_path_new)

public:
  // TODO: pass the knots as a C++ container
  _WRAP_CREATE(const Glib::RefPtr<Alpha>& alpha, const ClutterKnot* knots, guint n_knots)

  _WRAP_METHOD(void append_knot(const Knot& knot), clutter_behaviour_path_append_knot)
  _WRAP_METHOD(void insert_knot(guint offset, const Knot& knot), clutter_behaviour_path_insert_knot)
  _WRAP_METHOD(void remove_knot(guint offset), clutter_behaviour_path_remove_knot)
  _WRAP_METHOD(void clear(), clutter_behaviour_path_clear)

  _WRAP_SIGNAL(void knot_reached(const Knot& knot), "knot_reached")

  _WRAP_PROPERTY("knot", Knot)

};

} // namespace Clutter
// vim:ts=2,sw=2
