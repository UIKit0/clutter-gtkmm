/* Copyright (C) 2007 The cluttermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <clutter/clutter-types.h>
#include <clutter/clutter-event.h>
#include <clutter/clutter-units.h>
#include <clutter/clutter-color.h>
#include <clutter/clutter-main.h>

_DEFS(cluttermm,clutter)

namespace Clutter
{

typedef ClutterEvent Event;
typedef ClutterButtonEvent ButtonEvent;
typedef ClutterKeyEvent KeyEvent;
typedef ClutterMotionEvent MotionEvent;
typedef ClutterScrollEvent ScrollEvent;
typedef ClutterCrossingEvent CrossingEvent;

//TODO: Maybe redefine these, to avoid including a C header in our C++ header:
typedef ClutterUnit Unit;
typedef ClutterFixed Fixed;
typedef ClutterAngle Angle;

_WRAP_GERROR(InitError, ClutterInitError, CLUTTER_INIT_ERROR, NO_GTYPE)

_WRAP_ENUM(RotateDirection, ClutterRotateDirection, NO_GTYPE)
_WRAP_ENUM(RotateAxis, ClutterRotateAxis, NO_GTYPE)
_WRAP_ENUM(Gravity, ClutterGravity, NO_GTYPE)
_WRAP_ENUM(RequestMode, ClutterRequestMode, NO_GTYPE)

class Knot
{
  _CLASS_BOXEDTYPE_STATIC(Knot, ClutterKnot)
public:
  Knot(int x, int y);

  _MEMBER_GET(x, x, int, int)
  _MEMBER_SET(x, x, int, int)
  _MEMBER_GET(y, y, int, int)
  _MEMBER_SET(y, y, int, int)

  bool operator==(const Knot& knot) const;
};

class Vertex
{
  _CLASS_BOXEDTYPE_STATIC(Vertex, ClutterVertex)
public:
  Vertex(Unit x, Unit y, Unit z);

  _MEMBER_GET(x, x, Unit, ClutterUnit)
  _MEMBER_SET(x, x, Unit, ClutterUnit)
  _MEMBER_GET(y, y, Unit, ClutterUnit)
  _MEMBER_SET(y, y, Unit, ClutterUnit)
  _MEMBER_GET(z, z, Unit, ClutterUnit)
  _MEMBER_SET(z, z, Unit, ClutterUnit)
};

class Geometry
{
  _CLASS_BOXEDTYPE_STATIC(Geometry, ClutterGeometry)
public:
  Geometry(int x, int y, unsigned int width, unsigned int height);

  _MEMBER_GET(x, x, int, gint)
  _MEMBER_SET(x, x, int, gint)
  _MEMBER_GET(y, y, int, gint)
  _MEMBER_SET(y, y, int, gint)
  _MEMBER_GET(width, width, unsigned int, guint)
  _MEMBER_SET(width, width, unsigned int, guint)
  _MEMBER_GET(height, height, unsigned int, guint)
  _MEMBER_SET(height, height, unsigned int, guint)
};

}

