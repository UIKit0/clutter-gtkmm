/* Copyright (C) 2007 The cluttermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <cluttermm/actor.h>
#include <cluttermm/types.h>
#include <gdkmm/pixbuf.h>
 
_DEFS(cluttermm,clutter)
_PINCLUDE(cluttermm/private/actor_p.h)


namespace Clutter
{

_WRAP_ENUM(TextureFlags, ClutterTextureFlags, NO_GTYPE)

/** Exception class for Clutter::Texture errors.
 */
_WRAP_GERROR(TextureError, ClutterTextureError, CLUTTER_TEXTURE_ERROR)

class Texture :
  public Actor
{
  _CLASS_GOBJECT(Texture, ClutterTexture, CLUTTER_TEXTURE, Actor, ClutterActor)

protected:
  _CTOR_DEFAULT()
  _WRAP_CTOR(Texture(const Glib::RefPtr<Gdk::Pixbuf>& pixbuf), clutter_texture_new_from_pixbuf)

public:
#m4 _CONVERSION(`ClutterActor*',`Glib::RefPtr<Texture>',`Glib::wrap((ClutterTexture*)$3)')

  _WRAP_CREATE()
  _WRAP_CREATE(const Glib::RefPtr<Gdk::Pixbuf>& pixbuf);

  _WRAP_METHOD(bool set_pixbuf(const Glib::RefPtr<Gdk::Pixbuf>& pixbuf), clutter_texture_set_pixbuf, errthrow)
  _WRAP_METHOD(Glib::RefPtr<Gdk::Pixbuf> get_pixbuf() const, clutter_texture_get_pixbuf)
  _WRAP_METHOD(void get_base_size(gint& width, gint& height) const, clutter_texture_get_base_size)
  _WRAP_METHOD(bool set_from_rgb_data(const guchar* data, bool has_alpha, int width, int height, int rowstride, int bpp, TextureFlags flags), clutter_texture_set_from_rgb_data, errthrow)
  _WRAP_METHOD(bool set_from_yuv_data(const guchar* data, int width, int height, TextureFlags flags), clutter_texture_set_from_yuv_data, errthrow)

  _WRAP_SIGNAL(void size_change(gint width, gint height), "size_change")
  _WRAP_SIGNAL(void pixbuf_change(), "pixbuf_change")

protected:
  _WRAP_METHOD(bool is_tiled() const, clutter_texture_is_tiled)
  _WRAP_METHOD(void get_n_tiles(gint& n_x_tiles, gint& n_y_tiles), clutter_texture_get_n_tiles)
  _WRAP_METHOD(void get_y_tile_detail(int y_index, int& pos, int& size, int& waste) const, clutter_texture_get_y_tile_detail)
  _WRAP_METHOD(void get_x_tile_detail(int x_index, int& pos, int& size, int& waste) const, clutter_texture_get_x_tile_detail)
  _WRAP_METHOD(bool has_generated_tiles() const, clutter_texture_has_generated_tiles)
  _WRAP_METHOD(void bind_tile(int index), clutter_texture_bind_tile)


};

} // namespace Clutter

//vim: ts=2,sw=2
