;; -*- scheme -*-
; object definitions ...
(define-object ClutterEmbed
  (in-module "Gtk")
  (parent "GtkContainer")
  (c-name "GtkClutterEmbed")
  (gtype-id "GTK_TYPE_CLUTTER_EMBED")
)

(define-object ClutterScrollable
  (in-module "Gtk")
  (c-name "GtkClutterScrollable")
  (gtype-id "GTK_TYPE_CLUTTER_SCROLLABLE")
)

(define-object ClutterViewport
  (in-module "Gtk")
  (parent "ClutterActor")
  (c-name "GtkClutterViewport")
  (gtype-id "GTK_TYPE_CLUTTER_VIEWPORT")
)

(define-object ClutterZoomable
  (in-module "Gtk")
  (c-name "GtkClutterZoomable")
  (gtype-id "GTK_TYPE_CLUTTER_ZOOMABLE")
)

;; Enumerations and flags ...

(define-enum GtkInitError
  (in-module "Clutter")
  (c-name "ClutterGtkInitError")
  (gtype-id "CLUTTER_TYPE_GTK_INIT_ERROR")
  (values
    '("last" "CLUTTER_INIT_ERROR_LAST")
    '("gtk" "CLUTTER_INIT_ERROR_GTK")
  )
)

(define-enum GtkTextureError
  (in-module "Clutter")
  (c-name "ClutterGtkTextureError")
  (gtype-id "CLUTTER_TYPE_GTK_TEXTURE_ERROR")
  (values
    '("invalid-stock-id" "CLUTTER_GTK_TEXTURE_INVALID_STOCK_ID")
    '("error-last" "CLUTTER_GTK_TEXTURE_ERROR_LAST")
  )
)


;; From clutter-gtk.h



;; From gtk-clutter-embed.h

(define-function gtk_clutter_embed_get_type
  (c-name "gtk_clutter_embed_get_type")
  (return-type "GType")
)

(define-function gtk_clutter_embed_new
  (c-name "gtk_clutter_embed_new")
  (is-constructor-of "GtkClutterEmbed")
  (return-type "GtkWidget*")
)

(define-method get_stage
  (of-object "GtkClutterEmbed")
  (c-name "gtk_clutter_embed_get_stage")
  (return-type "ClutterActor*")
)



;; From gtk-clutter-scrollable.h

(define-function gtk_clutter_scrollable_get_type
  (c-name "gtk_clutter_scrollable_get_type")
  (return-type "GType")
)

(define-method set_adjustments
  (of-object "GtkClutterScrollable")
  (c-name "gtk_clutter_scrollable_set_adjustments")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "h_adjust")
    '("GtkAdjustment*" "v_adjust")
  )
)

(define-method get_adjustments
  (of-object "GtkClutterScrollable")
  (c-name "gtk_clutter_scrollable_get_adjustments")
  (return-type "none")
  (parameters
    '("GtkAdjustment**" "h_adjust")
    '("GtkAdjustment**" "v_adjust")
  )
)



;; From gtk-clutter-util.h

(define-function gtk_clutter_init
  (c-name "gtk_clutter_init")
  (return-type "ClutterInitError")
  (parameters
    '("int*" "argc")
    '("char***" "argv")
  )
)

(define-function gtk_clutter_init_with_args
  (c-name "gtk_clutter_init_with_args")
  (return-type "ClutterInitError")
  (parameters
    '("int*" "argc")
    '("char***" "argv")
    '("const-char*" "parameter_string")
    '("GOptionEntry*" "entries")
    '("const-char*" "translation_domain")
    '("GError**" "error")
  )
)

(define-function gtk_clutter_get_fg_color
  (c-name "gtk_clutter_get_fg_color")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("GtkStateType" "state")
    '("ClutterColor*" "color")
  )
)

(define-function gtk_clutter_get_bg_color
  (c-name "gtk_clutter_get_bg_color")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("GtkStateType" "state")
    '("ClutterColor*" "color")
  )
)

(define-function gtk_clutter_get_text_color
  (c-name "gtk_clutter_get_text_color")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("GtkStateType" "state")
    '("ClutterColor*" "color")
  )
)

(define-function gtk_clutter_get_text_aa_color
  (c-name "gtk_clutter_get_text_aa_color")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("GtkStateType" "state")
    '("ClutterColor*" "color")
  )
)

(define-function gtk_clutter_get_base_color
  (c-name "gtk_clutter_get_base_color")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("GtkStateType" "state")
    '("ClutterColor*" "color")
  )
)

(define-function gtk_clutter_get_light_color
  (c-name "gtk_clutter_get_light_color")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("GtkStateType" "state")
    '("ClutterColor*" "color")
  )
)

(define-function gtk_clutter_get_dark_color
  (c-name "gtk_clutter_get_dark_color")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("GtkStateType" "state")
    '("ClutterColor*" "color")
  )
)

(define-function gtk_clutter_get_mid_color
  (c-name "gtk_clutter_get_mid_color")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("GtkStateType" "state")
    '("ClutterColor*" "color")
  )
)

(define-function gtk_clutter_texture_new_from_pixbuf
  (c-name "gtk_clutter_texture_new_from_pixbuf")
  (return-type "ClutterActor*")
  (parameters
    '("GdkPixbuf*" "pixbuf")
  )
)

(define-function gtk_clutter_texture_new_from_stock
  (c-name "gtk_clutter_texture_new_from_stock")
  (return-type "ClutterActor*")
  (parameters
    '("GtkWidget*" "widget")
    '("const-gchar*" "stock_id")
    '("GtkIconSize" "size")
  )
)

(define-function gtk_clutter_texture_new_from_icon_name
  (c-name "gtk_clutter_texture_new_from_icon_name")
  (return-type "ClutterActor*")
  (parameters
    '("GtkWidget*" "widget")
    '("const-gchar*" "icon_name")
    '("GtkIconSize" "size")
  )
)

(define-function gtk_clutter_texture_error_quark
  (c-name "gtk_clutter_texture_error_quark")
  (return-type "GQuark")
)

(define-function gtk_clutter_texture_set_from_pixbuf
  (c-name "gtk_clutter_texture_set_from_pixbuf")
  (return-type "gboolean")
  (parameters
    '("ClutterTexture*" "texture")
    '("GdkPixbuf*" "pixbuf")
    '("GError**" "error")
  )
)

(define-function gtk_clutter_texture_set_from_stock
  (c-name "gtk_clutter_texture_set_from_stock")
  (return-type "gboolean")
  (parameters
    '("ClutterTexture*" "texture")
    '("GtkWidget*" "widget")
    '("const-gchar*" "stock_id")
    '("GtkIconSize" "size")
    '("GError**" "error")
  )
)

(define-function gtk_clutter_texture_set_from_icon_name
  (c-name "gtk_clutter_texture_set_from_icon_name")
  (return-type "gboolean")
  (parameters
    '("ClutterTexture*" "texture")
    '("GtkWidget*" "widget")
    '("const-gchar*" "icon_name")
    '("GtkIconSize" "size")
    '("GError**" "error")
  )
)



;; From gtk-clutter-viewport.h

(define-function gtk_clutter_viewport_get_type
  (c-name "gtk_clutter_viewport_get_type")
  (return-type "GType")
)

(define-function gtk_clutter_viewport_new
  (c-name "gtk_clutter_viewport_new")
  (is-constructor-of "GtkClutterViewport")
  (return-type "ClutterActor*")
  (parameters
    '("GtkAdjustment*" "h_adjust")
    '("GtkAdjustment*" "v_adjust")
    '("GtkAdjustment*" "z_adjust")
  )
)

(define-method get_origin
  (of-object "GtkClutterViewport")
  (c-name "gtk_clutter_viewport_get_origin")
  (return-type "none")
  (parameters
    '("gfloat*" "x")
    '("gfloat*" "y")
    '("gfloat*" "z")
  )
)



;; From gtk-clutter-zoomable.h

(define-function gtk_clutter_zoomable_get_type
  (c-name "gtk_clutter_zoomable_get_type")
  (return-type "GType")
)

(define-method set_adjustment
  (of-object "GtkClutterZoomable")
  (c-name "gtk_clutter_zoomable_set_adjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "z_adjust")
  )
)

(define-method get_adjustment
  (of-object "GtkClutterZoomable")
  (c-name "gtk_clutter_zoomable_get_adjustment")
  (return-type "GtkAdjustment*")
)


