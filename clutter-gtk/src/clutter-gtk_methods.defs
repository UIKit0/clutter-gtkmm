;; -*- scheme -*-
; object definitions ...
(define-object ClutterActor
  (in-module "Gtk")
  (parent "ClutterActor")
  (c-name "GtkClutterActor")
  (gtype-id "GTK_TYPE_CLUTTER_ACTOR")
)

(define-object ClutterEmbed
  (in-module "Gtk")
  (parent "GtkContainer")
  (c-name "GtkClutterEmbed")
  (gtype-id "GTK_TYPE_CLUTTER_EMBED")
)

(define-object ClutterTexture
  (in-module "Gtk")
  (parent "ClutterTexture")
  (c-name "GtkClutterTexture")
  (gtype-id "GTK_TYPE_CLUTTER_TEXTURE")
)

(define-object ClutterWindow
  (in-module "Gtk")
  (parent "GtkWindow")
  (c-name "GtkClutterWindow")
  (gtype-id "GTK_TYPE_CLUTTER_WINDOW")
)

;; Enumerations and flags ...

(define-enum ClutterTextureError
  (in-module "Gtk")
  (c-name "GtkClutterTextureError")
  (gtype-id "GTK_TYPE_CLUTTER_TEXTURE_ERROR")
  (values
    '("id" "GTK_CLUTTER_TEXTURE_ERROR_INVALID_STOCK_ID")
  )
)


;; From clutter-gtk.h



;; From gtk-clutter-actor.h

(define-function gtk_clutter_actor_get_type
  (c-name "gtk_clutter_actor_get_type")
  (return-type "GType")
)

(define-function gtk_clutter_actor_new
  (c-name "gtk_clutter_actor_new")
  (is-constructor-of "GtkClutterActor")
  (return-type "ClutterActor*")
)

(define-function gtk_clutter_actor_new_with_contents
  (c-name "gtk_clutter_actor_new_with_contents")
  (return-type "ClutterActor*")
  (parameters
    '("GtkWidget*" "contents")
  )
)

(define-method get_contents
  (of-object "GtkClutterActor")
  (c-name "gtk_clutter_actor_get_contents")
  (return-type "GtkWidget*")
)

(define-method get_widget
  (of-object "GtkClutterActor")
  (c-name "gtk_clutter_actor_get_widget")
  (return-type "GtkWidget*")
)



;; From gtk-clutter-embed.h

(define-function gtk_clutter_embed_get_type
  (c-name "gtk_clutter_embed_get_type")
  (return-type "GType")
)

(define-function gtk_clutter_embed_new
  (c-name "gtk_clutter_embed_new")
  (is-constructor-of "GtkClutterEmbed")
  (return-type "GtkWidget*")
)

(define-method get_stage
  (of-object "GtkClutterEmbed")
  (c-name "gtk_clutter_embed_get_stage")
  (return-type "ClutterActor*")
)



;; From gtk-clutter-texture.h

(define-function gtk_clutter_texture_error_quark
  (c-name "gtk_clutter_texture_error_quark")
  (return-type "GQuark")
)

(define-function gtk_clutter_texture_get_type
  (c-name "gtk_clutter_texture_get_type")
  (return-type "GType")
)

(define-function gtk_clutter_texture_new
  (c-name "gtk_clutter_texture_new")
  (is-constructor-of "GtkClutterTexture")
  (return-type "ClutterActor*")
)

(define-method set_from_pixbuf
  (of-object "GtkClutterTexture")
  (c-name "gtk_clutter_texture_set_from_pixbuf")
  (return-type "gboolean")
  (parameters
    '("GdkPixbuf*" "pixbuf")
    '("GError**" "error")
  )
)

(define-method set_from_stock
  (of-object "GtkClutterTexture")
  (c-name "gtk_clutter_texture_set_from_stock")
  (return-type "gboolean")
  (parameters
    '("GtkWidget*" "widget")
    '("const-gchar*" "stock_id")
    '("GtkIconSize" "icon_size")
    '("GError**" "error")
  )
)

(define-method set_from_icon_name
  (of-object "GtkClutterTexture")
  (c-name "gtk_clutter_texture_set_from_icon_name")
  (return-type "gboolean")
  (parameters
    '("GtkWidget*" "widget")
    '("const-gchar*" "icon_name")
    '("GtkIconSize" "icon_size")
    '("GError**" "error")
  )
)



;; From gtk-clutter-util.h

(define-function gtk_clutter_init
  (c-name "gtk_clutter_init")
  (return-type "ClutterInitError")
  (parameters
    '("int*" "argc")
    '("char***" "argv")
  )
)

(define-function gtk_clutter_init_with_args
  (c-name "gtk_clutter_init_with_args")
  (return-type "ClutterInitError")
  (parameters
    '("int*" "argc")
    '("char***" "argv")
    '("const-char*" "parameter_string")
    '("GOptionEntry*" "entries")
    '("const-char*" "translation_domain")
    '("GError**" "error")
  )
)

(define-function gtk_clutter_get_option_group
  (c-name "gtk_clutter_get_option_group")
  (return-type "GOptionGroup*")
)



;; From gtk-clutter-version.h

(define-function gtk_clutter_check_version
  (c-name "gtk_clutter_check_version")
  (return-type "gboolean")
  (parameters
    '("guint" "major")
    '("guint" "minor")
    '("guint" "micro")
  )
)



;; From gtk-clutter-window.h

(define-function gtk_clutter_window_get_type
  (c-name "gtk_clutter_window_get_type")
  (return-type "GType")
)

(define-function gtk_clutter_window_new
  (c-name "gtk_clutter_window_new")
  (is-constructor-of "GtkClutterWindow")
  (return-type "GtkWidget*")
)

(define-method get_stage
  (of-object "GtkClutterWindow")
  (c-name "gtk_clutter_window_get_stage")
  (return-type "ClutterActor*")
)


